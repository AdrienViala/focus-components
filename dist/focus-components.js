(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require(undefined), require(undefined), require("React"), require("ReactDOM"), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require("moment"), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined));
	else if(typeof define === 'function' && define.amd)
		define([, , "React", "ReactDOM", , , , , , "moment", , , , , , , , , , , , , , , ], factory);
	else if(typeof exports === 'object')
		exports["FocusComponents"] = factory(require(undefined), require(undefined), require("React"), require("ReactDOM"), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require("moment"), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined), require(undefined));
	else
		root["FocusComponents"] = factory(root["FocusCore"]["translation"], root["FocusCore"]["history"], root["React"], root["ReactDOM"], root["FocusCore"]["component"]["builder"], root["FocusCore"]["component"]["types"], root["FocusCore"]["exception"], root["FocusCore"]["application"], root["FocusCore"]["application"]["builtInStore"], root["moment"], root["FocusCore"]["network"], root["FocusCore"]["message"]["builtInStore"], root["FocusCore"]["user"], root["FocusCore"]["definition"]["validator"]["validate"], root["FocusCore"]["definition"]["entity"]["builder"], root["FocusCore"]["util"]["object"], root["FocusCore"]["message"], root["FocusCore"]["reference"]["storeGetter"], root["FocusCore"]["reference"]["builtInAction"], root["FocusCore"]["exception"]["FocusException"], root["FocusCore"]["definition"]["formatter"]["number"], root["FocusCore"]["dispatcher"], root["FocusCore"]["search"]["builtInStore"], root["FocusCore"]["search"]["actionBuilder"], root["FocusCore"]["list"]["actionBuilder"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_142__, __WEBPACK_EXTERNAL_MODULE_143__, __WEBPACK_EXTERNAL_MODULE_146__, __WEBPACK_EXTERNAL_MODULE_147__, __WEBPACK_EXTERNAL_MODULE_219__, __WEBPACK_EXTERNAL_MODULE_220__, __WEBPACK_EXTERNAL_MODULE_295__, __WEBPACK_EXTERNAL_MODULE_399__, __WEBPACK_EXTERNAL_MODULE_404__, __WEBPACK_EXTERNAL_MODULE_437__, __WEBPACK_EXTERNAL_MODULE_518__, __WEBPACK_EXTERNAL_MODULE_526__, __WEBPACK_EXTERNAL_MODULE_599__, __WEBPACK_EXTERNAL_MODULE_826__, __WEBPACK_EXTERNAL_MODULE_834__, __WEBPACK_EXTERNAL_MODULE_851__, __WEBPACK_EXTERNAL_MODULE_854__, __WEBPACK_EXTERNAL_MODULE_858__, __WEBPACK_EXTERNAL_MODULE_859__, __WEBPACK_EXTERNAL_MODULE_861__, __WEBPACK_EXTERNAL_MODULE_884__, __WEBPACK_EXTERNAL_MODULE_903__, __WEBPACK_EXTERNAL_MODULE_905__, __WEBPACK_EXTERNAL_MODULE_906__, __WEBPACK_EXTERNAL_MODULE_923__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:3000/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(2);
	
	var _translation = __webpack_require__(142);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _history = __webpack_require__(143);
	
	var _history2 = _interopRequireDefault(_history);
	
	var _components = __webpack_require__(144);
	
	var _components2 = _interopRequireDefault(_components);
	
	var _behaviours = __webpack_require__(808);
	
	var _behaviours2 = _interopRequireDefault(_behaviours);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var infos = __webpack_require__(809); //Generator http://patorjk.com/software/taag/#p=display&h=1&f=Banner4&t=Focus-COMPONENTS
	
	
	/** LEGACY DIRTY HACKISH RUBBISH TRICK */
	window.i18n = {
	    t: _translation2.default.translate,
	    init: _translation2.default.init
	};
	window.Backbone = {
	    history: _history2.default
	};
	
	/**
	* Display information data for Focus-COMPONENTS
	*/
	var infosFn = function infos() {
	    console.log('\n        FOCUS COMPONENTS\n\n        version: ' + infos.version + '\n        focus-components: ' + infos.homepage + '\n        documentation: ' + infos.documentation + '\n        issues: ' + infos.bugs.url + '\n        ');
	};
	module.exports = {
	    VERSION: infos.version,
	    AUTHORS: infos.author,
	    NAME: infos.name,
	
	    /**
	    * Display documentation data
	    */
	    DOCUMENTATION: function DOCUMENTATION() {
	        console.log('documentation: http://kleegroup.github.io/focus-components');
	        console.log('components available');
	        console.table(infos.components);
	        console.log('repository: ' + infos.repository.url);
	        console.log('issues: ' + infos.bugs.url);
	    },
	    common: __webpack_require__(810),
	    list: __webpack_require__(881),
	    search: __webpack_require__(889),
	    page: __webpack_require__(896),
	    message: __webpack_require__(924),
	    application: __webpack_require__(925),
	    infos: infosFn,
	    components: _components2.default,
	    behaviours: _behaviours2.default
	};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(3);
	
	__webpack_require__(7);
	
	__webpack_require__(12);
	
	__webpack_require__(14);
	
	__webpack_require__(16);
	
	__webpack_require__(18);
	
	__webpack_require__(20);
	
	__webpack_require__(22);
	
	__webpack_require__(24);
	
	__webpack_require__(26);
	
	__webpack_require__(28);
	
	__webpack_require__(30);
	
	__webpack_require__(32);
	
	__webpack_require__(34);
	
	__webpack_require__(36);
	
	__webpack_require__(38);
	
	__webpack_require__(40);
	
	__webpack_require__(42);
	
	__webpack_require__(44);
	
	__webpack_require__(46);
	
	__webpack_require__(48);
	
	__webpack_require__(50);
	
	__webpack_require__(52);
	
	__webpack_require__(54);
	
	__webpack_require__(56);
	
	__webpack_require__(58);
	
	__webpack_require__(60);
	
	__webpack_require__(62);
	
	__webpack_require__(64);
	
	__webpack_require__(66);
	
	__webpack_require__(68);
	
	__webpack_require__(70);
	
	__webpack_require__(72);
	
	__webpack_require__(74);
	
	__webpack_require__(76);
	
	__webpack_require__(78);
	
	__webpack_require__(80);
	
	__webpack_require__(82);
	
	__webpack_require__(84);
	
	__webpack_require__(86);
	
	__webpack_require__(88);
	
	__webpack_require__(90);
	
	__webpack_require__(92);
	
	__webpack_require__(94);
	
	__webpack_require__(96);
	
	__webpack_require__(98);
	
	__webpack_require__(100);
	
	__webpack_require__(102);
	
	__webpack_require__(104);
	
	__webpack_require__(106);
	
	__webpack_require__(108);
	
	__webpack_require__(110);
	
	__webpack_require__(112);
	
	__webpack_require__(114);
	
	__webpack_require__(116);
	
	__webpack_require__(118);
	
	__webpack_require__(120);
	
	__webpack_require__(122);
	
	__webpack_require__(124);
	
	__webpack_require__(126);
	
	__webpack_require__(128);
	
	__webpack_require__(130);
	
	__webpack_require__(132);
	
	__webpack_require__(134);
	
	__webpack_require__(136);
	
	__webpack_require__(138);
	
	__webpack_require__(140);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
3,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
3,
/* 13 */,
/* 14 */
3,
/* 15 */,
/* 16 */
3,
/* 17 */,
/* 18 */
3,
/* 19 */,
/* 20 */
3,
/* 21 */,
/* 22 */
3,
/* 23 */,
/* 24 */
3,
/* 25 */,
/* 26 */
3,
/* 27 */,
/* 28 */
3,
/* 29 */,
/* 30 */
3,
/* 31 */,
/* 32 */
3,
/* 33 */,
/* 34 */
3,
/* 35 */,
/* 36 */
3,
/* 37 */,
/* 38 */
3,
/* 39 */,
/* 40 */
3,
/* 41 */,
/* 42 */
3,
/* 43 */,
/* 44 */
3,
/* 45 */,
/* 46 */
3,
/* 47 */,
/* 48 */
3,
/* 49 */,
/* 50 */
3,
/* 51 */,
/* 52 */
3,
/* 53 */,
/* 54 */
3,
/* 55 */,
/* 56 */
3,
/* 57 */,
/* 58 */
3,
/* 59 */,
/* 60 */
3,
/* 61 */,
/* 62 */
3,
/* 63 */,
/* 64 */
3,
/* 65 */,
/* 66 */
3,
/* 67 */,
/* 68 */
3,
/* 69 */,
/* 70 */
3,
/* 71 */,
/* 72 */
3,
/* 73 */,
/* 74 */
3,
/* 75 */,
/* 76 */
3,
/* 77 */,
/* 78 */
3,
/* 79 */,
/* 80 */
3,
/* 81 */,
/* 82 */
3,
/* 83 */,
/* 84 */
3,
/* 85 */,
/* 86 */
3,
/* 87 */,
/* 88 */
3,
/* 89 */,
/* 90 */
3,
/* 91 */,
/* 92 */
3,
/* 93 */,
/* 94 */
3,
/* 95 */,
/* 96 */
3,
/* 97 */,
/* 98 */
3,
/* 99 */,
/* 100 */
3,
/* 101 */,
/* 102 */
3,
/* 103 */,
/* 104 */
3,
/* 105 */,
/* 106 */
3,
/* 107 */,
/* 108 */
3,
/* 109 */,
/* 110 */
3,
/* 111 */,
/* 112 */
3,
/* 113 */,
/* 114 */
3,
/* 115 */,
/* 116 */
3,
/* 117 */,
/* 118 */
3,
/* 119 */,
/* 120 */
3,
/* 121 */,
/* 122 */
3,
/* 123 */,
/* 124 */
3,
/* 125 */,
/* 126 */
3,
/* 127 */,
/* 128 */
3,
/* 129 */,
/* 130 */
3,
/* 131 */,
/* 132 */
3,
/* 133 */,
/* 134 */
3,
/* 135 */,
/* 136 */
3,
/* 137 */,
/* 138 */
3,
/* 139 */,
/* 140 */
3,
/* 141 */,
/* 142 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_142__;

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_143__;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _confirm = __webpack_require__(145);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _dropdown = __webpack_require__(400);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _headerActions = __webpack_require__(403);
	
	var _headerActions2 = _interopRequireDefault(_headerActions);
	
	var _headerContent = __webpack_require__(420);
	
	var _headerContent2 = _interopRequireDefault(_headerContent);
	
	var _headerDefaultTemplate = __webpack_require__(421);
	
	var _headerDefaultTemplate2 = _interopRequireDefault(_headerDefaultTemplate);
	
	var _headerScrolling = __webpack_require__(422);
	
	var _headerScrolling2 = _interopRequireDefault(_headerScrolling);
	
	var _headerTopRow = __webpack_require__(424);
	
	var _headerTopRow2 = _interopRequireDefault(_headerTopRow);
	
	var _iconDropdown = __webpack_require__(405);
	
	var _iconDropdown2 = _interopRequireDefault(_iconDropdown);
	
	var _input = __webpack_require__(425);
	
	var _input2 = _interopRequireDefault(_input);
	
	var _layout = __webpack_require__(515);
	
	var _layout2 = _interopRequireDefault(_layout);
	
	var _menu = __webpack_require__(527);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	var _messageCenter = __webpack_require__(525);
	
	var _messageCenter2 = _interopRequireDefault(_messageCenter);
	
	var _panel = __webpack_require__(528);
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _role = __webpack_require__(598);
	
	var _role2 = _interopRequireDefault(_role);
	
	var _scrollspyContainer = __webpack_require__(600);
	
	var _scrollspyContainer2 = _interopRequireDefault(_scrollspyContainer);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _buttonBackToTop = __webpack_require__(601);
	
	var _buttonBackToTop2 = _interopRequireDefault(_buttonBackToTop);
	
	var _buttonBack = __webpack_require__(606);
	
	var _buttonBack2 = _interopRequireDefault(_buttonBack);
	
	var _buttonHelp = __webpack_require__(597);
	
	var _buttonHelp2 = _interopRequireDefault(_buttonHelp);
	
	var _grid = __webpack_require__(604);
	
	var _grid2 = _interopRequireDefault(_grid);
	
	var _column = __webpack_require__(605);
	
	var _column2 = _interopRequireDefault(_column);
	
	var _icon = __webpack_require__(607);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _title = __webpack_require__(608);
	
	var _title2 = _interopRequireDefault(_title);
	
	var _progressBar = __webpack_require__(609);
	
	var _progressBar2 = _interopRequireDefault(_progressBar);
	
	var _label = __webpack_require__(610);
	
	var _label2 = _interopRequireDefault(_label);
	
	var _empty = __webpack_require__(611);
	
	var _empty2 = _interopRequireDefault(_empty);
	
	var _topicDisplayer = __webpack_require__(612);
	
	var _topicDisplayer2 = _interopRequireDefault(_topicDisplayer);
	
	var _animation = __webpack_require__(613);
	
	var _animation2 = _interopRequireDefault(_animation);
	
	var _draggableIframe = __webpack_require__(807);
	
	var _draggableIframe2 = _interopRequireDefault(_draggableIframe);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    Confirm: _confirm2.default,
	    Dropdown: _dropdown2.default,
	    HeaderActions: _headerActions2.default,
	    HeaderContent: _headerContent2.default,
	    HeaderDefaultTemplate: _headerDefaultTemplate2.default,
	    HeaderScrolling: _headerScrolling2.default,
	    HeaderTopRow: _headerTopRow2.default,
	    IconDropdown: _iconDropdown2.default,
	    input: _input2.default,
	    Layout: _layout2.default,
	    MenuLeft: _menu2.default,
	    MessageCenter: _messageCenter2.default,
	    Panel: _panel2.default,
	    Role: _role2.default,
	    ScrollspyContainer: _scrollspyContainer2.default,
	    Button: _button2.default,
	    ButtonBackToTop: _buttonBackToTop2.default,
	    ButtonBack: _buttonBack2.default,
	    ButtonHelp: _buttonHelp2.default,
	    Grid: _grid2.default,
	    Column: _column2.default,
	    Icon: _icon2.default,
	    Title: _title2.default,
	    ProgressBar: _progressBar2.default,
	    Label: _label2.default,
	    TopicDisplayer: _topicDisplayer2.default,
	    Animation: _animation2.default,
	    DraggableIframe: _draggableIframe2.default
	};
	module.exports = exports['default'];

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _lang = __webpack_require__(148);
	
	var _confirmationPopin = __webpack_require__(218);
	
	var _connect = __webpack_require__(296);
	
	var _connect2 = _interopRequireDefault(_connect);
	
	var _application = __webpack_require__(399);
	
	var _application2 = _interopRequireDefault(_application);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var applicationStore = _application2.default.builtInStore;
	
	var propTypes = {
	    isVisible: _react.PropTypes.bool,
	    ConfirmContentComponent: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	    handleCancel: _react.PropTypes.func,
	    handleConfirm: _react.PropTypes.func
	};
	
	var defaultProps = {
	    isVisible: false,
	    ConfirmContentComponent: null
	};
	
	var ConfirmWrapper = (_dec = (0, _connect2.default)([{ store: applicationStore, properties: ['confirmConfig'] }], function () {
	    var _ref = applicationStore.getConfirmConfig() || {},
	        _ref$isVisible = _ref.isVisible,
	        isVisible = _ref$isVisible === undefined ? false : _ref$isVisible,
	        _ref$Content = _ref.Content,
	        ConfirmContentComponent = _ref$Content === undefined ? null : _ref$Content,
	        cancelHandler = _ref.handleCancel,
	        confirmHandler = _ref.handleConfirm,
	        contentProps = _objectWithoutProperties(_ref, ['isVisible', 'Content', 'handleCancel', 'handleConfirm']);
	
	    return { isVisible: isVisible, ConfirmContentComponent: ConfirmContentComponent, cancelHandler: cancelHandler, confirmHandler: confirmHandler, contentProps: contentProps };
	}), _dec(_class = function (_Component) {
	    _inherits(ConfirmWrapper, _Component);
	
	    function ConfirmWrapper() {
	        _classCallCheck(this, ConfirmWrapper);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    ConfirmWrapper.prototype.render = function render() {
	        var _props = this.props,
	            isVisible = _props.isVisible,
	            ConfirmContentComponent = _props.ConfirmContentComponent,
	            cancelHandler = _props.cancelHandler,
	            confirmHandler = _props.confirmHandler,
	            contentProps = _props.contentProps;
	
	        var ConfirmContent = (0, _lang.isString)(ConfirmContentComponent) ? function () {
	            return _react2.default.createElement(
	                'span',
	                null,
	                ConfirmContentComponent
	            );
	        } : ConfirmContentComponent;
	        return isVisible ? _react2.default.createElement(
	            _confirmationPopin.component,
	            _extends({ open: true, cancelHandler: cancelHandler, confirmHandler: confirmHandler }, contentProps),
	            ConfirmContent ? _react2.default.createElement(ConfirmContent, null) : null
	        ) : null;
	    };
	
	    return ConfirmWrapper;
	}(_react.Component)) || _class);
	
	
	ConfirmWrapper.propTypes = propTypes;
	ConfirmWrapper.defaultProps = defaultProps;
	ConfirmWrapper.displayName = 'ConfirmWrapper';
	
	exports.default = ConfirmWrapper;
	module.exports = exports['default'];

/***/ }),
/* 146 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_146__;

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_147__;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'clone': __webpack_require__(149),
	  'cloneDeep': __webpack_require__(181),
	  'eq': __webpack_require__(182),
	  'gt': __webpack_require__(191),
	  'gte': __webpack_require__(192),
	  'isArguments': __webpack_require__(166),
	  'isArray': __webpack_require__(167),
	  'isBoolean': __webpack_require__(193),
	  'isDate': __webpack_require__(194),
	  'isElement': __webpack_require__(195),
	  'isEmpty': __webpack_require__(198),
	  'isEqual': __webpack_require__(183),
	  'isError': __webpack_require__(200),
	  'isFinite': __webpack_require__(201),
	  'isFunction': __webpack_require__(158),
	  'isMatch': __webpack_require__(202),
	  'isNaN': __webpack_require__(207),
	  'isNative': __webpack_require__(157),
	  'isNull': __webpack_require__(209),
	  'isNumber': __webpack_require__(208),
	  'isObject': __webpack_require__(159),
	  'isPlainObject': __webpack_require__(196),
	  'isRegExp': __webpack_require__(210),
	  'isString': __webpack_require__(199),
	  'isTypedArray': __webpack_require__(190),
	  'isUndefined': __webpack_require__(211),
	  'lt': __webpack_require__(212),
	  'lte': __webpack_require__(213),
	  'toArray': __webpack_require__(214),
	  'toPlainObject': __webpack_require__(217)
	};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(150),
	    bindCallback = __webpack_require__(178),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	 * otherwise they are assigned by reference. If `customizer` is provided it's
	 * invoked to produce the cloned values. If `customizer` returns `undefined`
	 * cloning is handled by the method instead. The `customizer` is bound to
	 * `thisArg` and invoked with up to three argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var shallow = _.clone(users);
	 * shallow[0] === users[0];
	 * // => true
	 *
	 * var deep = _.clone(users, true);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.clone(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(false);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 0
	 */
	function clone(value, isDeep, customizer, thisArg) {
	  if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	    isDeep = false;
	  }
	  else if (typeof isDeep == 'function') {
	    thisArg = customizer;
	    customizer = isDeep;
	    isDeep = false;
	  }
	  return typeof customizer == 'function'
	    ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))
	    : baseClone(value, isDeep);
	}
	
	module.exports = clone;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(151),
	    arrayEach = __webpack_require__(152),
	    baseAssign = __webpack_require__(153),
	    baseForOwn = __webpack_require__(170),
	    initCloneArray = __webpack_require__(174),
	    initCloneByTag = __webpack_require__(175),
	    initCloneObject = __webpack_require__(177),
	    isArray = __webpack_require__(167),
	    isObject = __webpack_require__(159);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	cloneableTags[dateTag] = cloneableTags[float32Tag] =
	cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[stringTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[mapTag] = cloneableTags[setTag] =
	cloneableTags[weakMapTag] = false;
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * The base implementation of `_.clone` without support for argument juggling
	 * and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The object `value` belongs to.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates clones with source counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return arrayCopy(value, result);
	    }
	  } else {
	    var tag = objToString.call(value),
	        isFunc = tag == funcTag;
	
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return baseAssign(result, value);
	      }
	    } else {
	      return cloneableTags[tag]
	        ? initCloneByTag(value, tag, isDeep)
	        : (object ? value : {});
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stackA || (stackA = []);
	  stackB || (stackB = []);
	
	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == value) {
	      return stackB[length];
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate it with its clone.
	  stackA.push(value);
	  stackB.push(result);
	
	  // Recursively populate clone (susceptible to call stack limits).
	  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	  });
	  return result;
	}
	
	module.exports = baseClone;


/***/ }),
/* 151 */
/***/ (function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;
	
	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}
	
	module.exports = arrayCopy;


/***/ }),
/* 152 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	
	module.exports = arrayEach;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCopy = __webpack_require__(154),
	    keys = __webpack_require__(155);
	
	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}
	
	module.exports = baseAssign;


/***/ }),
/* 154 */
/***/ (function(module, exports) {

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});
	
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}
	
	module.exports = baseCopy;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(156),
	    isArrayLike = __webpack_require__(161),
	    isObject = __webpack_require__(159),
	    shimKeys = __webpack_require__(165);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};
	
	module.exports = keys;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(157);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}
	
	module.exports = getNative;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(158),
	    isObjectLike = __webpack_require__(160);
	
	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}
	
	module.exports = isNative;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}
	
	module.exports = isFunction;


/***/ }),
/* 159 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ }),
/* 160 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(162),
	    isLength = __webpack_require__(164);
	
	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}
	
	module.exports = isArrayLike;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(163);
	
	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');
	
	module.exports = getLength;


/***/ }),
/* 163 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}
	
	module.exports = baseProperty;


/***/ }),
/* 164 */
/***/ (function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(167),
	    isIndex = __webpack_require__(168),
	    isLength = __webpack_require__(164),
	    keysIn = __webpack_require__(169);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;
	
	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));
	
	  var index = -1,
	      result = [];
	
	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = shimKeys;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(161),
	    isObjectLike = __webpack_require__(160);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}
	
	module.exports = isArguments;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(156),
	    isLength = __webpack_require__(164),
	    isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};
	
	module.exports = isArray;


/***/ }),
/* 168 */
/***/ (function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;
	
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}
	
	module.exports = isIndex;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(167),
	    isIndex = __webpack_require__(168),
	    isLength = __webpack_require__(164),
	    isObject = __webpack_require__(159);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;
	
	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;
	
	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = keysIn;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(171),
	    keys = __webpack_require__(155);
	
	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}
	
	module.exports = baseForOwn;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(172);
	
	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	module.exports = baseFor;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(173);
	
	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;
	
	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	module.exports = createBaseFor;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}
	
	module.exports = toObject;


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);
	
	  // Add array properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}
	
	module.exports = initCloneArray;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	var bufferClone = __webpack_require__(176);
	
	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;
	
	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return bufferClone(object);
	
	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);
	
	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      var buffer = object.buffer;
	      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);
	
	    case numberTag:
	    case stringTag:
	      return new Ctor(object);
	
	    case regexpTag:
	      var result = new Ctor(object.source, reFlags.exec(object));
	      result.lastIndex = object.lastIndex;
	  }
	  return result;
	}
	
	module.exports = initCloneByTag;


/***/ }),
/* 176 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Native method references. */
	var ArrayBuffer = global.ArrayBuffer,
	    Uint8Array = global.Uint8Array;
	
	/**
	 * Creates a clone of the given array buffer.
	 *
	 * @private
	 * @param {ArrayBuffer} buffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function bufferClone(buffer) {
	  var result = new ArrayBuffer(buffer.byteLength),
	      view = new Uint8Array(result);
	
	  view.set(new Uint8Array(buffer));
	  return result;
	}
	
	module.exports = bufferClone;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  var Ctor = object.constructor;
	  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	    Ctor = Object;
	  }
	  return new Ctor;
	}
	
	module.exports = initCloneObject;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(179);
	
	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}
	
	module.exports = bindCallback;


/***/ }),
/* 179 */
/***/ (function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	module.exports = identity;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(161),
	    isIndex = __webpack_require__(168),
	    isObject = __webpack_require__(159);
	
	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(150),
	    bindCallback = __webpack_require__(178);
	
	/**
	 * Creates a deep clone of `value`. If `customizer` is provided it's invoked
	 * to produce the cloned values. If `customizer` returns `undefined` cloning
	 * is handled by the method instead. The `customizer` is bound to `thisArg`
	 * and invoked with up to three argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the deep cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var deep = _.cloneDeep(users);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.cloneDeep(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 20
	 */
	function cloneDeep(value, customizer, thisArg) {
	  return typeof customizer == 'function'
	    ? baseClone(value, true, bindCallback(customizer, thisArg, 3))
	    : baseClone(value, true);
	}
	
	module.exports = cloneDeep;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(183);


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(184),
	    bindCallback = __webpack_require__(178);
	
	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent. If `customizer` is provided it's invoked to compare values.
	 * If `customizer` returns `undefined` comparisons are handled by the method
	 * instead. The `customizer` is bound to `thisArg` and invoked with up to
	 * three arguments: (value, other [, index|key]).
	 *
	 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	 * numbers, `Object` objects, regexes, and strings. Objects are compared by
	 * their own, not inherited, enumerable properties. Functions and DOM nodes
	 * are **not** supported. Provide a customizer function to extend support
	 * for comparing other values.
	 *
	 * @static
	 * @memberOf _
	 * @alias eq
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize value comparisons.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * object == other;
	 * // => false
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * // using a customizer callback
	 * var array = ['hello', 'goodbye'];
	 * var other = ['hi', 'goodbye'];
	 *
	 * _.isEqual(array, other, function(value, other) {
	 *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	 *     return true;
	 *   }
	 * });
	 * // => true
	 */
	function isEqual(value, other, customizer, thisArg) {
	  customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	  var result = customizer ? customizer(value, other) : undefined;
	  return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	}
	
	module.exports = isEqual;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(185),
	    isObject = __webpack_require__(159),
	    isObjectLike = __webpack_require__(160);
	
	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}
	
	module.exports = baseIsEqual;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	var equalArrays = __webpack_require__(186),
	    equalByTag = __webpack_require__(188),
	    equalObjects = __webpack_require__(189),
	    isArray = __webpack_require__(167),
	    isTypedArray = __webpack_require__(190);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;
	
	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;
	
	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);
	
	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);
	
	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
	
	  stackA.pop();
	  stackB.pop();
	
	  return result;
	}
	
	module.exports = baseIsEqualDeep;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(187);
	
	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;
	
	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
	
	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = equalArrays;


/***/ }),
/* 187 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	module.exports = arraySome;


/***/ }),
/* 188 */
/***/ (function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';
	
	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;
	
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	
	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;
	
	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}
	
	module.exports = equalByTag;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(155);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;
	
	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;
	
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = equalObjects;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(164),
	    isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}
	
	module.exports = isTypedArray;


/***/ }),
/* 191 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is greater than `other`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	 * @example
	 *
	 * _.gt(3, 1);
	 * // => true
	 *
	 * _.gt(3, 3);
	 * // => false
	 *
	 * _.gt(1, 3);
	 * // => false
	 */
	function gt(value, other) {
	  return value > other;
	}
	
	module.exports = gt;


/***/ }),
/* 192 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is greater than or equal to `other`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	 * @example
	 *
	 * _.gte(3, 1);
	 * // => true
	 *
	 * _.gte(3, 3);
	 * // => true
	 *
	 * _.gte(1, 3);
	 * // => false
	 */
	function gte(value, other) {
	  return value >= other;
	}
	
	module.exports = gte;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	function isBoolean(value) {
	  return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	}
	
	module.exports = isBoolean;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var dateTag = '[object Date]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Date` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isDate(new Date);
	 * // => true
	 *
	 * _.isDate('Mon April 23 2012');
	 * // => false
	 */
	function isDate(value) {
	  return isObjectLike(value) && objToString.call(value) == dateTag;
	}
	
	module.exports = isDate;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160),
	    isPlainObject = __webpack_require__(196);
	
	/**
	 * Checks if `value` is a DOM element.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	 * @example
	 *
	 * _.isElement(document.body);
	 * // => true
	 *
	 * _.isElement('<body>');
	 * // => false
	 */
	function isElement(value) {
	  return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	}
	
	module.exports = isElement;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(197),
	    isArguments = __webpack_require__(166),
	    isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;
	
	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}
	
	module.exports = isPlainObject;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(171),
	    keysIn = __webpack_require__(169);
	
	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}
	
	module.exports = baseForIn;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(167),
	    isArrayLike = __webpack_require__(161),
	    isFunction = __webpack_require__(158),
	    isObjectLike = __webpack_require__(160),
	    isString = __webpack_require__(199),
	    keys = __webpack_require__(155);
	
	/**
	 * Checks if `value` is empty. A value is considered empty unless it's an
	 * `arguments` object, array, string, or jQuery-like collection with a length
	 * greater than `0` or an object with own enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {Array|Object|string} value The value to inspect.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	      (isObjectLike(value) && isFunction(value.splice)))) {
	    return !value.length;
	  }
	  return !keys(value).length;
	}
	
	module.exports = isEmpty;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var stringTag = '[object String]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}
	
	module.exports = isString;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var errorTag = '[object Error]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	 * `SyntaxError`, `TypeError`, or `URIError` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	 * @example
	 *
	 * _.isError(new Error);
	 * // => true
	 *
	 * _.isError(Error);
	 * // => false
	 */
	function isError(value) {
	  return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	}
	
	module.exports = isError;


/***/ }),
/* 201 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsFinite = global.isFinite;
	
	/**
	 * Checks if `value` is a finite primitive number.
	 *
	 * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	 * @example
	 *
	 * _.isFinite(10);
	 * // => true
	 *
	 * _.isFinite('10');
	 * // => false
	 *
	 * _.isFinite(true);
	 * // => false
	 *
	 * _.isFinite(Object(10));
	 * // => false
	 *
	 * _.isFinite(Infinity);
	 * // => false
	 */
	function isFinite(value) {
	  return typeof value == 'number' && nativeIsFinite(value);
	}
	
	module.exports = isFinite;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(203),
	    bindCallback = __webpack_require__(178),
	    getMatchData = __webpack_require__(204);
	
	/**
	 * Performs a deep comparison between `object` and `source` to determine if
	 * `object` contains equivalent property values. If `customizer` is provided
	 * it's invoked to compare values. If `customizer` returns `undefined`
	 * comparisons are handled by the method instead. The `customizer` is bound
	 * to `thisArg` and invoked with three arguments: (value, other, index|key).
	 *
	 * **Note:** This method supports comparing properties of arrays, booleans,
	 * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	 * and DOM nodes are **not** supported. Provide a customizer function to extend
	 * support for comparing other values.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Function} [customizer] The function to customize value comparisons.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.isMatch(object, { 'age': 40 });
	 * // => true
	 *
	 * _.isMatch(object, { 'age': 36 });
	 * // => false
	 *
	 * // using a customizer callback
	 * var object = { 'greeting': 'hello' };
	 * var source = { 'greeting': 'hi' };
	 *
	 * _.isMatch(object, source, function(value, other) {
	 *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	 * });
	 * // => true
	 */
	function isMatch(object, source, customizer, thisArg) {
	  customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	  return baseIsMatch(object, getMatchData(source), customizer);
	}
	
	module.exports = isMatch;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(184),
	    toObject = __webpack_require__(173);
	
	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;
	
	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];
	
	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	module.exports = baseIsMatch;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(205),
	    pairs = __webpack_require__(206);
	
	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;
	
	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}
	
	module.exports = getMatchData;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}
	
	module.exports = isStrictComparable;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(155),
	    toObject = __webpack_require__(173);
	
	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);
	
	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);
	
	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}
	
	module.exports = pairs;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	var isNumber = __webpack_require__(208);
	
	/**
	 * Checks if `value` is `NaN`.
	 *
	 * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	 * which returns `true` for `undefined` and other non-numeric values.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 * @example
	 *
	 * _.isNaN(NaN);
	 * // => true
	 *
	 * _.isNaN(new Number(NaN));
	 * // => true
	 *
	 * isNaN(undefined);
	 * // => true
	 *
	 * _.isNaN(undefined);
	 * // => false
	 */
	function isNaN(value) {
	  // An `NaN` primitive is the only value that is not equal to itself.
	  // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	  return isNumber(value) && value != +value;
	}
	
	module.exports = isNaN;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160);
	
	/** `Object#toString` result references. */
	var numberTag = '[object Number]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	 * as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isNumber(8.4);
	 * // => true
	 *
	 * _.isNumber(NaN);
	 * // => true
	 *
	 * _.isNumber('8.4');
	 * // => false
	 */
	function isNumber(value) {
	  return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	}
	
	module.exports = isNumber;


/***/ }),
/* 209 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `null`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	 * @example
	 *
	 * _.isNull(null);
	 * // => true
	 *
	 * _.isNull(void 0);
	 * // => false
	 */
	function isNull(value) {
	  return value === null;
	}
	
	module.exports = isNull;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	function isRegExp(value) {
	  return isObject(value) && objToString.call(value) == regexpTag;
	}
	
	module.exports = isRegExp;


/***/ }),
/* 211 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	function isUndefined(value) {
	  return value === undefined;
	}
	
	module.exports = isUndefined;


/***/ }),
/* 212 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is less than `other`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	 * @example
	 *
	 * _.lt(1, 3);
	 * // => true
	 *
	 * _.lt(3, 3);
	 * // => false
	 *
	 * _.lt(3, 1);
	 * // => false
	 */
	function lt(value, other) {
	  return value < other;
	}
	
	module.exports = lt;


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is less than or equal to `other`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	 * @example
	 *
	 * _.lte(1, 3);
	 * // => true
	 *
	 * _.lte(3, 3);
	 * // => true
	 *
	 * _.lte(3, 1);
	 * // => false
	 */
	function lte(value, other) {
	  return value <= other;
	}
	
	module.exports = lte;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(151),
	    getLength = __webpack_require__(162),
	    isLength = __webpack_require__(164),
	    values = __webpack_require__(215);
	
	/**
	 * Converts `value` to an array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the converted array.
	 * @example
	 *
	 * (function() {
	 *   return _.toArray(arguments).slice(1);
	 * }(1, 2, 3));
	 * // => [2, 3]
	 */
	function toArray(value) {
	  var length = value ? getLength(value) : 0;
	  if (!isLength(length)) {
	    return values(value);
	  }
	  if (!length) {
	    return [];
	  }
	  return arrayCopy(value);
	}
	
	module.exports = toArray;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(216),
	    keys = __webpack_require__(155);
	
	/**
	 * Creates an array of the own enumerable property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return baseValues(object, keys(object));
	}
	
	module.exports = values;


/***/ }),
/* 216 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  var index = -1,
	      length = props.length,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = object[props[index]];
	  }
	  return result;
	}
	
	module.exports = baseValues;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCopy = __webpack_require__(154),
	    keysIn = __webpack_require__(169);
	
	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}
	
	module.exports = toPlainObject;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Mixins
	
	// Dependencies
	
	var i18nMixin = __webpack_require__(293);
	
	// Components
	
	var Popin = __webpack_require__(294).component;
	
	
	var ConfirmationPopin = {
	    /**
	    * Display name.
	    */
	    displayName: 'confirmation-popin',
	    mixins: [i18nMixin],
	    getDefaultProps: function getDefaultProps() {
	        return {
	            open: false,
	            cancelButtonLabel: 'popin.confirmation.cancel',
	            confirmButtonLabel: 'popin.confirmation.confirm'
	        };
	    },
	    getInitialState: function getInitialState() {
	        return {
	            fromButtonClick: false
	        };
	    },
	
	
	    propTypes: {
	        cancelButtonLabel: (0, _types2.default)('string'),
	        cancelHandler: (0, _types2.default)(['func', 'object']),
	        confirmButtonLabel: (0, _types2.default)('string'),
	        confirmHandler: (0, _types2.default)(['func', 'object'])
	    },
	
	    /**
	    * Confirmation action handler
	    */
	    _handleConfirm: function _handleConfirm() {
	        this.toggleOpen();
	        if (this.props.confirmHandler) {
	            this.props.confirmHandler();
	        }
	    },
	
	
	    /**
	    * Cancel action handler
	    */
	    _handleCancel: function _handleCancel() {
	        this.toggleOpen();
	        if (this.props.cancelHandler) {
	            this.props.cancelHandler();
	        }
	    },
	    _handlePopinClose: function _handlePopinClose() {
	        if (this.props.cancelHandler && !this.state.fromButtonClick) {
	            this.props.cancelHandler();
	        }
	        this.setState({ fromButtonClick: false });
	    },
	    toggleOpen: function toggleOpen() {
	        var _this = this;
	
	        this.setState({
	            fromButtonClick: true
	        }, function () {
	            _this.refs.popin.toggleOpen();
	        });
	    },
	    render: function render() {
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'confirmation-popin' },
	            _react2.default.createElement(
	                Popin,
	                { onPopinClose: this._handlePopinClose, open: this.props.open, ref: 'popin' },
	                this.props.children,
	                _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'button-stack' },
	                    _react2.default.createElement(_button2.default, { handleOnClick: this._handleCancel, label: this.i18n(this.props.cancelButtonLabel) }),
	                    _react2.default.createElement(_button2.default, { handleOnClick: this._handleConfirm, label: this.i18n(this.props.confirmButtonLabel), option: 'primary' })
	                )
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(ConfirmationPopin);

/***/ }),
/* 219 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_219__;

/***/ }),
/* 220 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_220__;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var BTN_JS = 'mdl-js-button';
	var BTN_CLASS = 'mdl-button';
	var BUTTON_PRFX = 'mdl-button--';
	var RIPPLE_EFFECT = 'mdl-js-ripple-effect';
	
	var propTypes = {
	    color: _react.PropTypes.oneOf([undefined, 'colored', 'primary', 'accent']),
	    id: _react.PropTypes.string,
	    handleOnClick: _react.PropTypes.func, //to remove in V2
	    hasRipple: _react.PropTypes.bool,
	    isJs: _react.PropTypes.bool,
	    icon: _react.PropTypes.string,
	    iconLibrary: _react.PropTypes.oneOf(['material', 'font-awesome', 'font-custom']),
	    label: _react.PropTypes.string,
	    onClick: _react.PropTypes.func,
	    shape: _react.PropTypes.oneOf([undefined, 'raised', 'fab', 'icon', 'mini-fab']),
	    type: _react.PropTypes.oneOf(['submit', 'button'])
	};
	
	var defaultProps = {
	    type: 'submit',
	    shape: 'raised',
	    label: '',
	    icon: null,
	    id: '',
	    hasRipple: false,
	    isJs: false,
	    iconLibrary: 'material'
	};
	
	var Button = (_dec = (0, _material2.default)('materialButton', 'MaterialButton'), _dec(_class = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(Button, _Component);
	
	    function Button() {
	        _classCallCheck(this, Button);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    /**
	    * Called when component is mounted.
	    */
	    Button.prototype.componentDidMount = function componentDidMount() {
	        var hasRipple = this.props.hasRipple;
	
	        var refNode = _reactDom2.default.findDOMNode(this.refs['materialButton']);
	        if (hasRipple) {
	            componentHandler.upgradeElement(refNode, 'MaterialRipple');
	        }
	    };
	
	    /**
	    * Date de composant.
	    * @return {string} Classe.
	    */
	
	
	    Button.prototype._getComponentClassName = function _getComponentClassName() {
	        var _props = this.props,
	            shape = _props.shape,
	            color = _props.color,
	            hasRipple = _props.hasRipple,
	            isJs = _props.isJs;
	
	        var SHAPE_CLASS = void 0;
	        switch (shape) {
	            case 'raised':
	                SHAPE_CLASS = BUTTON_PRFX + 'raised';
	                break;
	            case 'fab':
	                SHAPE_CLASS = BUTTON_PRFX + 'fab';
	                break;
	            case 'icon':
	                SHAPE_CLASS = BUTTON_PRFX + 'icon';
	                break;
	            case 'mini-fab':
	                SHAPE_CLASS = BUTTON_PRFX + 'mini-fab ' + BUTTON_PRFX + 'fab';
	                break;
	            case null:
	                SHAPE_CLASS = '';
	                break;
	            default:
	                SHAPE_CLASS = null;
	                break;
	        }
	        var COLOR_CLASS = color ? '' + BUTTON_PRFX + color : '';
	        var JS_CLASS = isJs ? BTN_JS : '';
	        var RIPPLE_EFFECT_CLASS = hasRipple ? RIPPLE_EFFECT : '';
	        return BTN_CLASS + ' ' + COLOR_CLASS + ' ' + SHAPE_CLASS + ' ' + JS_CLASS + ' ' + RIPPLE_EFFECT_CLASS;
	    };
	
	    /**
	    * Render the pressed button.
	    * @return {Component} - Component button.
	    */
	
	
	    Button.prototype.renderPressedButton = function renderPressedButton() {
	        return _react2.default.createElement(
	            'button',
	            null,
	            'Loading...'
	        );
	    };
	
	    /**
	    * Render an icon.
	    * @return {Component} - Composant icone.
	    */
	
	
	    Button.prototype._renderIcon = function _renderIcon() {
	        var _props2 = this.props,
	            icon = _props2.icon,
	            iconLibrary = _props2.iconLibrary,
	            classNameIcon = _props2.classNameIcon,
	            labelIcon = _props2.labelIcon,
	            ariaHidden = _props2.ariaHidden;
	
	        switch (iconLibrary) {
	            case 'material':
	                if (classNameIcon && labelIcon) {
	                    return _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'span',
	                            { className: classNameIcon },
	                            labelIcon
	                        ),
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'material-icons' },
	                            icon
	                        )
	                    );
	                }
	                return _react2.default.createElement(
	                    'i',
	                    { className: 'material-icons', 'aria-hidden': ariaHidden },
	                    icon
	                );
	            case 'font-awesome':
	                var faCss = 'fa fa-' + icon;
	                return _react2.default.createElement('i', { className: faCss });
	            case 'font-custom':
	                return _react2.default.createElement('span', { className: 'icon-' + icon });
	            default:
	                return null;
	        }
	    };
	
	    /**
	    * Render the label.
	    * @return {Component} - Tle button label.
	    */
	    Button.prototype._renderLabel = function _renderLabel() {
	        var _props3 = this.props,
	            label = _props3.label,
	            shape = _props3.shape;
	
	        if (label && 'fab' !== shape && 'icon' !== shape && 'mini-fab' !== shape) {
	            return this.i18n(label);
	        }
	        return null;
	    };
	
	    /** inheritedDoc */
	    Button.prototype.render = function render() {
	        // attribute doc : https://developer.mozilla.org/fr/docs/Web/HTML/Element/Button
	        // be careful the way you declare your attribute names : https://developer.mozilla.org/fr/docs/Web/HTML/Element/Button
	        var _props4 = this.props,
	            className = _props4.className,
	            disabled = _props4.disabled,
	            formNoValidate = _props4.formNoValidate,
	            handleOnClick = _props4.handleOnClick,
	            icon = _props4.icon,
	            id = _props4.id,
	            onClick = _props4.onClick,
	            type = _props4.type,
	            label = _props4.label,
	            style = _props4.style,
	            hasRipple = _props4.hasRipple,
	            isJs = _props4.isJs,
	            iconLibrary = _props4.iconLibrary,
	            noAltAndNoTitle = _props4.noAltAndNoTitle,
	            rest = _objectWithoutProperties(_props4, ['className', 'disabled', 'formNoValidate', 'handleOnClick', 'icon', 'id', 'onClick', 'type', 'label', 'style', 'hasRipple', 'isJs', 'iconLibrary', 'noAltAndNoTitle']);
	
	        var otherInputProps = _extends({ disabled: disabled, formNoValidate: formNoValidate, onClick: handleOnClick ? handleOnClick : onClick, style: style, type: type }, rest); //on click for legacy. Remove handleOnClick in v2
	        var renderedClassName = ((className ? className : '') + ' ' + this._getComponentClassName.call(this)).trim();
	        if (noAltAndNoTitle) {
	            return _react2.default.createElement(
	                'button',
	                _extends({ className: renderedClassName, 'data-focus': 'button-action', id: id }, otherInputProps, { ref: 'materialButton' }),
	                icon && this._renderIcon.call(this),
	                this._renderLabel.call(this)
	            );
	        }
	        return _react2.default.createElement(
	            'button',
	            _extends({ alt: this.i18n(label), className: renderedClassName, 'data-focus': 'button-action', id: id, title: this.i18n(label) }, otherInputProps, { ref: 'materialButton' }),
	            icon && this._renderIcon.call(this),
	            this._renderLabel.call(this)
	        );
	    };
	
	    return Button;
	}(_react.Component)) || _class) || _class);
	
	
	Button.displayName = 'Button';
	Button.defaultProps = defaultProps;
	Button.propTypes = propTypes;
	
	exports.default = Button;
	module.exports = exports['default'];

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	__webpack_require__(223);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Material = function Material(ref, jsClass, watchedProp) {
	    return function (Component) {
	        return function (_Component) {
	            _inherits(MaterialComponent, _Component);
	
	            function MaterialComponent() {
	                _classCallCheck(this, MaterialComponent);
	
	                return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	            }
	
	            MaterialComponent.prototype.componentDidMount = function componentDidMount() {
	                var refNode = _reactDom2.default.findDOMNode(this.refs[ref]);
	                if (refNode) {
	                    componentHandler.upgradeElement(refNode, jsClass);
	                }
	                if (Component.prototype.componentDidMount) {
	                    Component.prototype.componentDidMount.call(this);
	                }
	            };
	
	            MaterialComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	                var refNode = _reactDom2.default.findDOMNode(this.refs[ref]);
	                if (refNode) {
	                    componentHandler.downgradeElements(refNode, jsClass);
	                }
	                if (Component.prototype.componentWillUnmount) {
	                    Component.prototype.componentWillUnmount.call(this);
	                }
	            };
	
	            MaterialComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	                watchedProp = watchedProp || 'error';
	                var newWatchedProp = nextProps[watchedProp];
	                if (newWatchedProp !== this.props[watchedProp]) {
	                    var refNode = _reactDom2.default.findDOMNode(this.refs[ref]);
	                    componentHandler.upgradeElement(refNode, jsClass);
	                }
	                if (Component.prototype.componentWillReceiveProps) {
	                    Component.prototype.componentWillReceiveProps.call(this, nextProps);
	                }
	            };
	
	            return MaterialComponent;
	        }(Component);
	    };
	};
	
	Material.componentHandler = componentHandler;
	
	exports.default = Material;
	module.exports = exports['default'];

/***/ }),
/* 223 */
/***/ (function(module, exports) {

	;(function() {
	"use strict";
	
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	/**
	 * A component handler interface using the revealing module design pattern.
	 * More details on this design pattern here:
	 * https://github.com/jasonmayes/mdl-component-design-pattern
	 *
	 * @author Jason Mayes.
	 */
	/* exported componentHandler */
	
	// Pre-defining the componentHandler interface, for closure documentation and
	// static verification.
	var componentHandler = {
	  /**
	   * Searches existing DOM for elements of our component type and upgrades them
	   * if they have not already been upgraded.
	   *
	   * @param {string=} optJsClass the programatic name of the element class we
	   * need to create a new instance of.
	   * @param {string=} optCssClass the name of the CSS class elements of this
	   * type will have.
	   */
	  upgradeDom: function(optJsClass, optCssClass) {},
	  /**
	   * Upgrades a specific element rather than all in the DOM.
	   *
	   * @param {!Element} element The element we wish to upgrade.
	   * @param {string=} optJsClass Optional name of the class we want to upgrade
	   * the element to.
	   */
	  upgradeElement: function(element, optJsClass) {},
	  /**
	   * Upgrades a specific list of elements rather than all in the DOM.
	   *
	   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements
	   * The elements we wish to upgrade.
	   */
	  upgradeElements: function(elements) {},
	  /**
	   * Upgrades all registered components found in the current DOM. This is
	   * automatically called on window load.
	   */
	  upgradeAllRegistered: function() {},
	  /**
	   * Allows user to be alerted to any upgrades that are performed for a given
	   * component type
	   *
	   * @param {string} jsClass The class name of the MDL component we wish
	   * to hook into for any upgrades performed.
	   * @param {function(!HTMLElement)} callback The function to call upon an
	   * upgrade. This function should expect 1 parameter - the HTMLElement which
	   * got upgraded.
	   */
	  registerUpgradedCallback: function(jsClass, callback) {},
	  /**
	   * Registers a class for future use and attempts to upgrade existing DOM.
	   *
	   * @param {componentHandler.ComponentConfigPublic} config the registration configuration
	   */
	  register: function(config) {},
	  /**
	   * Downgrade either a given node, an array of nodes, or a NodeList.
	   *
	   * @param {!Node|!Array<!Node>|!NodeList} nodes
	   */
	  downgradeElements: function(nodes) {}
	};
	
	componentHandler = (function() {
	  'use strict';
	
	  /** @type {!Array<componentHandler.ComponentConfig>} */
	  var registeredComponents_ = [];
	
	  /** @type {!Array<componentHandler.Component>} */
	  var createdComponents_ = [];
	
	  var componentConfigProperty_ = 'mdlComponentConfigInternal_';
	
	  /**
	   * Searches registered components for a class we are interested in using.
	   * Optionally replaces a match with passed object if specified.
	   *
	   * @param {string} name The name of a class we want to use.
	   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.
	   * @return {!Object|boolean}
	   * @private
	   */
	  function findRegisteredClass_(name, optReplace) {
	    for (var i = 0; i < registeredComponents_.length; i++) {
	      if (registeredComponents_[i].className === name) {
	        if (typeof optReplace !== 'undefined') {
	          registeredComponents_[i] = optReplace;
	        }
	        return registeredComponents_[i];
	      }
	    }
	    return false;
	  }
	
	  /**
	   * Returns an array of the classNames of the upgraded classes on the element.
	   *
	   * @param {!Element} element The element to fetch data from.
	   * @return {!Array<string>}
	   * @private
	   */
	  function getUpgradedListOfElement_(element) {
	    var dataUpgraded = element.getAttribute('data-upgraded');
	    // Use `['']` as default value to conform the `,name,name...` style.
	    return dataUpgraded === null ? [''] : dataUpgraded.split(',');
	  }
	
	  /**
	   * Returns true if the given element has already been upgraded for the given
	   * class.
	   *
	   * @param {!Element} element The element we want to check.
	   * @param {string} jsClass The class to check for.
	   * @returns {boolean}
	   * @private
	   */
	  function isElementUpgraded_(element, jsClass) {
	    var upgradedList = getUpgradedListOfElement_(element);
	    return upgradedList.indexOf(jsClass) !== -1;
	  }
	
	  /**
	   * Searches existing DOM for elements of our component type and upgrades them
	   * if they have not already been upgraded.
	   *
	   * @param {string=} optJsClass the programatic name of the element class we
	   * need to create a new instance of.
	   * @param {string=} optCssClass the name of the CSS class elements of this
	   * type will have.
	   */
	  function upgradeDomInternal(optJsClass, optCssClass) {
	    if (typeof optJsClass === 'undefined' &&
	        typeof optCssClass === 'undefined') {
	      for (var i = 0; i < registeredComponents_.length; i++) {
	        upgradeDomInternal(registeredComponents_[i].className,
	            registeredComponents_[i].cssClass);
	      }
	    } else {
	      var jsClass = /** @type {string} */ (optJsClass);
	      if (typeof optCssClass === 'undefined') {
	        var registeredClass = findRegisteredClass_(jsClass);
	        if (registeredClass) {
	          optCssClass = registeredClass.cssClass;
	        }
	      }
	
	      var elements = document.querySelectorAll('.' + optCssClass);
	      for (var n = 0; n < elements.length; n++) {
	        upgradeElementInternal(elements[n], jsClass);
	      }
	    }
	  }
	
	  /**
	   * Upgrades a specific element rather than all in the DOM.
	   *
	   * @param {!Element} element The element we wish to upgrade.
	   * @param {string=} optJsClass Optional name of the class we want to upgrade
	   * the element to.
	   */
	  function upgradeElementInternal(element, optJsClass) {
	    // Verify argument type.
	    if (!(typeof element === 'object' && element instanceof Element)) {
	      throw new Error('Invalid argument provided to upgrade MDL element.');
	    }
	    var upgradedList = getUpgradedListOfElement_(element);
	    var classesToUpgrade = [];
	    // If jsClass is not provided scan the registered components to find the
	    // ones matching the element's CSS classList.
	    if (!optJsClass) {
	      var classList = element.classList;
	      registeredComponents_.forEach(function(component) {
	        // Match CSS & Not to be upgraded & Not upgraded.
	        if (classList.contains(component.cssClass) &&
	            classesToUpgrade.indexOf(component) === -1 &&
	            !isElementUpgraded_(element, component.className)) {
	          classesToUpgrade.push(component);
	        }
	      });
	    } else if (!isElementUpgraded_(element, optJsClass)) {
	      classesToUpgrade.push(findRegisteredClass_(optJsClass));
	    }
	
	    // Upgrade the element for each classes.
	    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {
	      registeredClass = classesToUpgrade[i];
	      if (registeredClass) {
	        // Mark element as upgraded.
	        upgradedList.push(registeredClass.className);
	        element.setAttribute('data-upgraded', upgradedList.join(','));
	        var instance = new registeredClass.classConstructor(element);
	        instance[componentConfigProperty_] = registeredClass;
	        createdComponents_.push(instance);
	        // Call any callbacks the user has registered with this component type.
	        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {
	          registeredClass.callbacks[j](element);
	        }
	
	        if (registeredClass.widget) {
	          // Assign per element instance for control over API
	          element[registeredClass.className] = instance;
	        }
	      } else {
	        throw new Error(
	          'Unable to find a registered component for the given class.');
	      }
	
	      var ev;
	      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {
	        ev = new Event('mdl-componentupgraded', {
	          'bubbles': true, 'cancelable': false
	        });
	      } else {
	        ev = document.createEvent('Events');
	        ev.initEvent('mdl-componentupgraded', true, true);
	      }
	      element.dispatchEvent(ev);
	    }
	  }
	
	  /**
	   * Upgrades a specific list of elements rather than all in the DOM.
	   *
	   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements
	   * The elements we wish to upgrade.
	   */
	  function upgradeElementsInternal(elements) {
	    if (!Array.isArray(elements)) {
	      if (typeof elements.item === 'function') {
	        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));
	      } else {
	        elements = [elements];
	      }
	    }
	    for (var i = 0, n = elements.length, element; i < n; i++) {
	      element = elements[i];
	      if (element instanceof HTMLElement) {
	        upgradeElementInternal(element);
	        if (element.children.length > 0) {
	          upgradeElementsInternal(element.children);
	        }
	      }
	    }
	  }
	
	  /**
	   * Registers a class for future use and attempts to upgrade existing DOM.
	   *
	   * @param {componentHandler.ComponentConfigPublic} config
	   */
	  function registerInternal(config) {
	    // In order to support both Closure-compiled and uncompiled code accessing
	    // this method, we need to allow for both the dot and array syntax for
	    // property access. You'll therefore see the `foo.bar || foo['bar']`
	    // pattern repeated across this method.
	    var widgetMissing = (typeof config.widget === 'undefined' &&
	        typeof config['widget'] === 'undefined');
	    var widget = true;
	
	    if (!widgetMissing) {
	      widget = config.widget || config['widget'];
	    }
	
	    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({
	      classConstructor: config.constructor || config['constructor'],
	      className: config.classAsString || config['classAsString'],
	      cssClass: config.cssClass || config['cssClass'],
	      widget: widget,
	      callbacks: []
	    });
	
	    registeredComponents_.forEach(function(item) {
	      if (item.cssClass === newConfig.cssClass) {
	        throw new Error('The provided cssClass has already been registered: ' + item.cssClass);
	      }
	      if (item.className === newConfig.className) {
	        throw new Error('The provided className has already been registered');
	      }
	    });
	
	    if (config.constructor.prototype
	        .hasOwnProperty(componentConfigProperty_)) {
	      throw new Error(
	          'MDL component classes must not have ' + componentConfigProperty_ +
	          ' defined as a property.');
	    }
	
	    var found = findRegisteredClass_(config.classAsString, newConfig);
	
	    if (!found) {
	      registeredComponents_.push(newConfig);
	    }
	  }
	
	  /**
	   * Allows user to be alerted to any upgrades that are performed for a given
	   * component type
	   *
	   * @param {string} jsClass The class name of the MDL component we wish
	   * to hook into for any upgrades performed.
	   * @param {function(!HTMLElement)} callback The function to call upon an
	   * upgrade. This function should expect 1 parameter - the HTMLElement which
	   * got upgraded.
	   */
	  function registerUpgradedCallbackInternal(jsClass, callback) {
	    var regClass = findRegisteredClass_(jsClass);
	    if (regClass) {
	      regClass.callbacks.push(callback);
	    }
	  }
	
	  /**
	   * Upgrades all registered components found in the current DOM. This is
	   * automatically called on window load.
	   */
	  function upgradeAllRegisteredInternal() {
	    for (var n = 0; n < registeredComponents_.length; n++) {
	      upgradeDomInternal(registeredComponents_[n].className);
	    }
	  }
	
	  /**
	   * Check the component for the downgrade method.
	   * Execute if found.
	   * Remove component from createdComponents list.
	   *
	   * @param {?componentHandler.Component} component
	   */
	  function deconstructComponentInternal(component) {
	    if (component) {
	      var componentIndex = createdComponents_.indexOf(component);
	      createdComponents_.splice(componentIndex, 1);
	
	      var upgrades = component.element_.getAttribute('data-upgraded').split(',');
	      var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);
	      upgrades.splice(componentPlace, 1);
	      component.element_.setAttribute('data-upgraded', upgrades.join(','));
	
	      var ev;
	      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {
	        ev = new Event('mdl-componentdowngraded', {
	          'bubbles': true, 'cancelable': false
	        });
	      } else {
	        ev = document.createEvent('Events');
	        ev.initEvent('mdl-componentdowngraded', true, true);
	      }
	    }
	  }
	
	  /**
	   * Downgrade either a given node, an array of nodes, or a NodeList.
	   *
	   * @param {!Node|!Array<!Node>|!NodeList} nodes
	   */
	  function downgradeNodesInternal(nodes) {
	    /**
	     * Auxiliary function to downgrade a single node.
	     * @param  {!Node} node the node to be downgraded
	     */
	    var downgradeNode = function(node) {
	      createdComponents_.filter(function(item) {
	        return item.element_ === node;
	      }).forEach(deconstructComponentInternal);
	    };
	    if (nodes instanceof Array || nodes instanceof NodeList) {
	      for (var n = 0; n < nodes.length; n++) {
	        downgradeNode(nodes[n]);
	      }
	    } else if (nodes instanceof Node) {
	      downgradeNode(nodes);
	    } else {
	      throw new Error('Invalid argument provided to downgrade MDL nodes.');
	    }
	  }
	
	  // Now return the functions that should be made public with their publicly
	  // facing names...
	  return {
	    upgradeDom: upgradeDomInternal,
	    upgradeElement: upgradeElementInternal,
	    upgradeElements: upgradeElementsInternal,
	    upgradeAllRegistered: upgradeAllRegisteredInternal,
	    registerUpgradedCallback: registerUpgradedCallbackInternal,
	    register: registerInternal,
	    downgradeElements: downgradeNodesInternal
	  };
	})();
	
	/**
	 * Describes the type of a registered component type managed by
	 * componentHandler. Provided for benefit of the Closure compiler.
	 *
	 * @typedef {{
	 *   constructor: Function,
	 *   classAsString: string,
	 *   cssClass: string,
	 *   widget: (string|boolean|undefined)
	 * }}
	 */
	componentHandler.ComponentConfigPublic;  // jshint ignore:line
	
	/**
	 * Describes the type of a registered component type managed by
	 * componentHandler. Provided for benefit of the Closure compiler.
	 *
	 * @typedef {{
	 *   constructor: !Function,
	 *   className: string,
	 *   cssClass: string,
	 *   widget: (string|boolean),
	 *   callbacks: !Array<function(!HTMLElement)>
	 * }}
	 */
	componentHandler.ComponentConfig;  // jshint ignore:line
	
	/**
	 * Created component (i.e., upgraded element) type as managed by
	 * componentHandler. Provided for benefit of the Closure compiler.
	 *
	 * @typedef {{
	 *   element_: !HTMLElement,
	 *   className: string,
	 *   classAsString: string,
	 *   cssClass: string,
	 *   widget: string
	 * }}
	 */
	componentHandler.Component;  // jshint ignore:line
	
	// Export all symbols, for the benefit of Closure compiler.
	// No effect on uncompiled code.
	componentHandler['upgradeDom'] = componentHandler.upgradeDom;
	componentHandler['upgradeElement'] = componentHandler.upgradeElement;
	componentHandler['upgradeElements'] = componentHandler.upgradeElements;
	componentHandler['upgradeAllRegistered'] =
	    componentHandler.upgradeAllRegistered;
	componentHandler['registerUpgradedCallback'] =
	    componentHandler.registerUpgradedCallback;
	componentHandler['register'] = componentHandler.register;
	componentHandler['downgradeElements'] = componentHandler.downgradeElements;
	window.componentHandler = componentHandler;
	window['componentHandler'] = componentHandler;
	
	window.addEventListener('load', function() {
	  'use strict';
	
	  /**
	   * Performs a "Cutting the mustard" test. If the browser supports the features
	   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL
	   * components requiring JavaScript.
	   */
	  if ('classList' in document.createElement('div') &&
	      'querySelector' in document &&
	      'addEventListener' in window && Array.prototype.forEach) {
	    document.documentElement.classList.add('mdl-js');
	    componentHandler.upgradeAllRegistered();
	  } else {
	    /**
	     * Dummy function to avoid JS errors.
	     */
	    componentHandler.upgradeElement = function() {};
	    /**
	     * Dummy function to avoid JS errors.
	     */
	    componentHandler.register = function() {};
	  }
	});
	
	// Source: https://github.com/darius/requestAnimationFrame/blob/master/requestAnimationFrame.js
	// Adapted from https://gist.github.com/paulirish/1579671 which derived from
	// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
	// requestAnimationFrame polyfill by Erik Möller.
	// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon
	// MIT license
	if (!Date.now) {
	    /**
	   * Date.now polyfill.
	   * @return {number} the current Date
	   */
	    Date.now = function () {
	        return new Date().getTime();
	    };
	    Date['now'] = Date.now;
	}
	var vendors = [
	    'webkit',
	    'moz'
	];
	for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
	    var vp = vendors[i];
	    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
	    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
	    window['requestAnimationFrame'] = window.requestAnimationFrame;
	    window['cancelAnimationFrame'] = window.cancelAnimationFrame;
	}
	if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
	    var lastTime = 0;
	    /**
	   * requestAnimationFrame polyfill.
	   * @param  {!Function} callback the callback function.
	   */
	    window.requestAnimationFrame = function (callback) {
	        var now = Date.now();
	        var nextTime = Math.max(lastTime + 16, now);
	        return setTimeout(function () {
	            callback(lastTime = nextTime);
	        }, nextTime - now);
	    };
	    window.cancelAnimationFrame = clearTimeout;
	    window['requestAnimationFrame'] = window.requestAnimationFrame;
	    window['cancelAnimationFrame'] = window.cancelAnimationFrame;
	}
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Button MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialButton = function MaterialButton(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialButton'] = MaterialButton;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialButton.prototype.Constant_ = {};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialButton.prototype.CssClasses_ = {
	    RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_CONTAINER: 'mdl-button__ripple-container',
	    RIPPLE: 'mdl-ripple'
	};
	/**
	   * Handle blur of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialButton.prototype.blurHandler_ = function (event) {
	    if (event) {
	        this.element_.blur();
	    }
	};
	// Public methods.
	/**
	   * Disable button.
	   *
	   * @public
	   */
	MaterialButton.prototype.disable = function () {
	    this.element_.disabled = true;
	};
	MaterialButton.prototype['disable'] = MaterialButton.prototype.disable;
	/**
	   * Enable button.
	   *
	   * @public
	   */
	MaterialButton.prototype.enable = function () {
	    this.element_.disabled = false;
	};
	MaterialButton.prototype['enable'] = MaterialButton.prototype.enable;
	/**
	   * Initialize element.
	   */
	MaterialButton.prototype.init = function () {
	    if (this.element_) {
	        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
	            var rippleContainer = document.createElement('span');
	            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
	            this.rippleElement_ = document.createElement('span');
	            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);
	            rippleContainer.appendChild(this.rippleElement_);
	            this.boundRippleBlurHandler = this.blurHandler_.bind(this);
	            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);
	            this.element_.appendChild(rippleContainer);
	        }
	        this.boundButtonBlurHandler = this.blurHandler_.bind(this);
	        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);
	        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialButton,
	    classAsString: 'MaterialButton',
	    cssClass: 'mdl-js-button',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Checkbox MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialCheckbox = function MaterialCheckbox(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialCheckbox'] = MaterialCheckbox;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialCheckbox.prototype.CssClasses_ = {
	    INPUT: 'mdl-checkbox__input',
	    BOX_OUTLINE: 'mdl-checkbox__box-outline',
	    FOCUS_HELPER: 'mdl-checkbox__focus-helper',
	    TICK_OUTLINE: 'mdl-checkbox__tick-outline',
	    RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',
	    RIPPLE_CENTER: 'mdl-ripple--center',
	    RIPPLE: 'mdl-ripple',
	    IS_FOCUSED: 'is-focused',
	    IS_DISABLED: 'is-disabled',
	    IS_CHECKED: 'is-checked',
	    IS_UPGRADED: 'is-upgraded'
	};
	/**
	   * Handle change of state.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialCheckbox.prototype.onChange_ = function (event) {
	    this.updateClasses_();
	};
	/**
	   * Handle focus of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialCheckbox.prototype.onFocus_ = function (event) {
	    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle lost focus of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialCheckbox.prototype.onBlur_ = function (event) {
	    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle mouseup.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialCheckbox.prototype.onMouseUp_ = function (event) {
	    this.blur_();
	};
	/**
	   * Handle class updates.
	   *
	   * @private
	   */
	MaterialCheckbox.prototype.updateClasses_ = function () {
	    this.checkDisabled();
	    this.checkToggleState();
	};
	/**
	   * Add blur.
	   *
	   * @private
	   */
	MaterialCheckbox.prototype.blur_ = function () {
	    // TODO: figure out why there's a focus event being fired after our blur,
	    // so that we can avoid this hack.
	    window.setTimeout(function () {
	        this.inputElement_.blur();
	    }.bind(this), this.Constant_.TINY_TIMEOUT);
	};
	// Public methods.
	/**
	   * Check the inputs toggle state and update display.
	   *
	   * @public
	   */
	MaterialCheckbox.prototype.checkToggleState = function () {
	    if (this.inputElement_.checked) {
	        this.element_.classList.add(this.CssClasses_.IS_CHECKED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
	    }
	};
	MaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;
	/**
	   * Check the inputs disabled state and update display.
	   *
	   * @public
	   */
	MaterialCheckbox.prototype.checkDisabled = function () {
	    if (this.inputElement_.disabled) {
	        this.element_.classList.add(this.CssClasses_.IS_DISABLED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
	    }
	};
	MaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;
	/**
	   * Disable checkbox.
	   *
	   * @public
	   */
	MaterialCheckbox.prototype.disable = function () {
	    this.inputElement_.disabled = true;
	    this.updateClasses_();
	};
	MaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;
	/**
	   * Enable checkbox.
	   *
	   * @public
	   */
	MaterialCheckbox.prototype.enable = function () {
	    this.inputElement_.disabled = false;
	    this.updateClasses_();
	};
	MaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;
	/**
	   * Check checkbox.
	   *
	   * @public
	   */
	MaterialCheckbox.prototype.check = function () {
	    this.inputElement_.checked = true;
	    this.updateClasses_();
	};
	MaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;
	/**
	   * Uncheck checkbox.
	   *
	   * @public
	   */
	MaterialCheckbox.prototype.uncheck = function () {
	    this.inputElement_.checked = false;
	    this.updateClasses_();
	};
	MaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;
	/**
	   * Initialize element.
	   */
	MaterialCheckbox.prototype.init = function () {
	    if (this.element_) {
	        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);
	        var boxOutline = document.createElement('span');
	        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);
	        var tickContainer = document.createElement('span');
	        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);
	        var tickOutline = document.createElement('span');
	        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);
	        boxOutline.appendChild(tickOutline);
	        this.element_.appendChild(tickContainer);
	        this.element_.appendChild(boxOutline);
	        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
	            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
	            this.rippleContainerElement_ = document.createElement('span');
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);
	            this.boundRippleMouseUp = this.onMouseUp_.bind(this);
	            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);
	            var ripple = document.createElement('span');
	            ripple.classList.add(this.CssClasses_.RIPPLE);
	            this.rippleContainerElement_.appendChild(ripple);
	            this.element_.appendChild(this.rippleContainerElement_);
	        }
	        this.boundInputOnChange = this.onChange_.bind(this);
	        this.boundInputOnFocus = this.onFocus_.bind(this);
	        this.boundInputOnBlur = this.onBlur_.bind(this);
	        this.boundElementMouseUp = this.onMouseUp_.bind(this);
	        this.inputElement_.addEventListener('change', this.boundInputOnChange);
	        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);
	        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);
	        this.element_.addEventListener('mouseup', this.boundElementMouseUp);
	        this.updateClasses_();
	        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialCheckbox,
	    classAsString: 'MaterialCheckbox',
	    cssClass: 'mdl-js-checkbox',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for icon toggle MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialIconToggle = function MaterialIconToggle(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialIconToggle'] = MaterialIconToggle;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialIconToggle.prototype.CssClasses_ = {
	    INPUT: 'mdl-icon-toggle__input',
	    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',
	    RIPPLE_CENTER: 'mdl-ripple--center',
	    RIPPLE: 'mdl-ripple',
	    IS_FOCUSED: 'is-focused',
	    IS_DISABLED: 'is-disabled',
	    IS_CHECKED: 'is-checked'
	};
	/**
	   * Handle change of state.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialIconToggle.prototype.onChange_ = function (event) {
	    this.updateClasses_();
	};
	/**
	   * Handle focus of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialIconToggle.prototype.onFocus_ = function (event) {
	    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle lost focus of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialIconToggle.prototype.onBlur_ = function (event) {
	    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle mouseup.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialIconToggle.prototype.onMouseUp_ = function (event) {
	    this.blur_();
	};
	/**
	   * Handle class updates.
	   *
	   * @private
	   */
	MaterialIconToggle.prototype.updateClasses_ = function () {
	    this.checkDisabled();
	    this.checkToggleState();
	};
	/**
	   * Add blur.
	   *
	   * @private
	   */
	MaterialIconToggle.prototype.blur_ = function () {
	    // TODO: figure out why there's a focus event being fired after our blur,
	    // so that we can avoid this hack.
	    window.setTimeout(function () {
	        this.inputElement_.blur();
	    }.bind(this), this.Constant_.TINY_TIMEOUT);
	};
	// Public methods.
	/**
	   * Check the inputs toggle state and update display.
	   *
	   * @public
	   */
	MaterialIconToggle.prototype.checkToggleState = function () {
	    if (this.inputElement_.checked) {
	        this.element_.classList.add(this.CssClasses_.IS_CHECKED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
	    }
	};
	MaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState;
	/**
	   * Check the inputs disabled state and update display.
	   *
	   * @public
	   */
	MaterialIconToggle.prototype.checkDisabled = function () {
	    if (this.inputElement_.disabled) {
	        this.element_.classList.add(this.CssClasses_.IS_DISABLED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
	    }
	};
	MaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled;
	/**
	   * Disable icon toggle.
	   *
	   * @public
	   */
	MaterialIconToggle.prototype.disable = function () {
	    this.inputElement_.disabled = true;
	    this.updateClasses_();
	};
	MaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable;
	/**
	   * Enable icon toggle.
	   *
	   * @public
	   */
	MaterialIconToggle.prototype.enable = function () {
	    this.inputElement_.disabled = false;
	    this.updateClasses_();
	};
	MaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;
	/**
	   * Check icon toggle.
	   *
	   * @public
	   */
	MaterialIconToggle.prototype.check = function () {
	    this.inputElement_.checked = true;
	    this.updateClasses_();
	};
	MaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;
	/**
	   * Uncheck icon toggle.
	   *
	   * @public
	   */
	MaterialIconToggle.prototype.uncheck = function () {
	    this.inputElement_.checked = false;
	    this.updateClasses_();
	};
	MaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck;
	/**
	   * Initialize element.
	   */
	MaterialIconToggle.prototype.init = function () {
	    if (this.element_) {
	        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);
	        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {
	            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
	            this.rippleContainerElement_ = document.createElement('span');
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
	            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);
	            this.boundRippleMouseUp = this.onMouseUp_.bind(this);
	            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);
	            var ripple = document.createElement('span');
	            ripple.classList.add(this.CssClasses_.RIPPLE);
	            this.rippleContainerElement_.appendChild(ripple);
	            this.element_.appendChild(this.rippleContainerElement_);
	        }
	        this.boundInputOnChange = this.onChange_.bind(this);
	        this.boundInputOnFocus = this.onFocus_.bind(this);
	        this.boundInputOnBlur = this.onBlur_.bind(this);
	        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);
	        this.inputElement_.addEventListener('change', this.boundInputOnChange);
	        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);
	        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);
	        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);
	        this.updateClasses_();
	        this.element_.classList.add('is-upgraded');
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialIconToggle,
	    classAsString: 'MaterialIconToggle',
	    cssClass: 'mdl-js-icon-toggle',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for dropdown MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialMenu = function MaterialMenu(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialMenu'] = MaterialMenu;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialMenu.prototype.Constant_ = {
	    // Total duration of the menu animation.
	    TRANSITION_DURATION_SECONDS: 0.3,
	    // The fraction of the total duration we want to use for menu item animations.
	    TRANSITION_DURATION_FRACTION: 0.8,
	    // How long the menu stays open after choosing an option (so the user can see
	    // the ripple).
	    CLOSE_TIMEOUT: 150
	};
	/**
	   * Keycodes, for code readability.
	   *
	   * @enum {number}
	   * @private
	   */
	MaterialMenu.prototype.Keycodes_ = {
	    ENTER: 13,
	    ESCAPE: 27,
	    SPACE: 32,
	    UP_ARROW: 38,
	    DOWN_ARROW: 40
	};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialMenu.prototype.CssClasses_ = {
	    CONTAINER: 'mdl-menu__container',
	    OUTLINE: 'mdl-menu__outline',
	    ITEM: 'mdl-menu__item',
	    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',
	    RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    RIPPLE: 'mdl-ripple',
	    // Statuses
	    IS_UPGRADED: 'is-upgraded',
	    IS_VISIBLE: 'is-visible',
	    IS_ANIMATING: 'is-animating',
	    // Alignment options
	    BOTTOM_LEFT: 'mdl-menu--bottom-left',
	    // This is the default.
	    BOTTOM_RIGHT: 'mdl-menu--bottom-right',
	    TOP_LEFT: 'mdl-menu--top-left',
	    TOP_RIGHT: 'mdl-menu--top-right',
	    UNALIGNED: 'mdl-menu--unaligned'
	};
	/**
	   * Initialize element.
	   */
	MaterialMenu.prototype.init = function () {
	    if (this.element_) {
	        // Create container for the menu.
	        var container = document.createElement('div');
	        container.classList.add(this.CssClasses_.CONTAINER);
	        this.element_.parentElement.insertBefore(container, this.element_);
	        this.element_.parentElement.removeChild(this.element_);
	        container.appendChild(this.element_);
	        this.container_ = container;
	        // Create outline for the menu (shadow and background).
	        var outline = document.createElement('div');
	        outline.classList.add(this.CssClasses_.OUTLINE);
	        this.outline_ = outline;
	        container.insertBefore(outline, this.element_);
	        // Find the "for" element and bind events to it.
	        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');
	        var forEl = null;
	        if (forElId) {
	            forEl = document.getElementById(forElId);
	            if (forEl) {
	                this.forElement_ = forEl;
	                forEl.addEventListener('click', this.handleForClick_.bind(this));
	                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));
	            }
	        }
	        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);
	        this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this);
	        this.boundItemClick_ = this.handleItemClick_.bind(this);
	        for (var i = 0; i < items.length; i++) {
	            // Add a listener to each menu item.
	            items[i].addEventListener('click', this.boundItemClick_);
	            // Add a tab index to each menu item.
	            items[i].tabIndex = '-1';
	            // Add a keyboard listener to each menu item.
	            items[i].addEventListener('keydown', this.boundItemKeydown_);
	        }
	        // Add ripple classes to each item, if the user has enabled ripples.
	        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
	            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
	            for (i = 0; i < items.length; i++) {
	                var item = items[i];
	                var rippleContainer = document.createElement('span');
	                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);
	                var ripple = document.createElement('span');
	                ripple.classList.add(this.CssClasses_.RIPPLE);
	                rippleContainer.appendChild(ripple);
	                item.appendChild(rippleContainer);
	                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);
	            }
	        }
	        // Copy alignment classes to the container, so the outline can use them.
	        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {
	            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);
	        }
	        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {
	            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);
	        }
	        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {
	            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);
	        }
	        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {
	            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);
	        }
	        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {
	            this.outline_.classList.add(this.CssClasses_.UNALIGNED);
	        }
	        container.classList.add(this.CssClasses_.IS_UPGRADED);
	    }
	};
	/**
	   * Handles a click on the "for" element, by positioning the menu and then
	   * toggling it.
	   *
	   * @param {Event} evt The event that fired.
	   * @private
	   */
	MaterialMenu.prototype.handleForClick_ = function (evt) {
	    if (this.element_ && this.forElement_) {
	        var rect = this.forElement_.getBoundingClientRect();
	        var forRect = this.forElement_.parentElement.getBoundingClientRect();
	        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {
	        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {
	            // Position below the "for" element, aligned to its right.
	            this.container_.style.right = forRect.right - rect.right + 'px';
	            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';
	        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {
	            // Position above the "for" element, aligned to its left.
	            this.container_.style.left = this.forElement_.offsetLeft + 'px';
	            this.container_.style.bottom = forRect.bottom - rect.top + 'px';
	        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {
	            // Position above the "for" element, aligned to its right.
	            this.container_.style.right = forRect.right - rect.right + 'px';
	            this.container_.style.bottom = forRect.bottom - rect.top + 'px';
	        } else {
	            // Default: position below the "for" element, aligned to its left.
	            this.container_.style.left = this.forElement_.offsetLeft + 'px';
	            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';
	        }
	    }
	    this.toggle(evt);
	};
	/**
	   * Handles a keyboard event on the "for" element.
	   *
	   * @param {Event} evt The event that fired.
	   * @private
	   */
	MaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {
	    if (this.element_ && this.container_ && this.forElement_) {
	        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');
	        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {
	            if (evt.keyCode === this.Keycodes_.UP_ARROW) {
	                evt.preventDefault();
	                items[items.length - 1].focus();
	            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {
	                evt.preventDefault();
	                items[0].focus();
	            }
	        }
	    }
	};
	/**
	   * Handles a keyboard event on an item.
	   *
	   * @param {Event} evt The event that fired.
	   * @private
	   */
	MaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {
	    if (this.element_ && this.container_) {
	        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');
	        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {
	            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);
	            if (evt.keyCode === this.Keycodes_.UP_ARROW) {
	                evt.preventDefault();
	                if (currentIndex > 0) {
	                    items[currentIndex - 1].focus();
	                } else {
	                    items[items.length - 1].focus();
	                }
	            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {
	                evt.preventDefault();
	                if (items.length > currentIndex + 1) {
	                    items[currentIndex + 1].focus();
	                } else {
	                    items[0].focus();
	                }
	            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {
	                evt.preventDefault();
	                // Send mousedown and mouseup to trigger ripple.
	                var e = new MouseEvent('mousedown');
	                evt.target.dispatchEvent(e);
	                e = new MouseEvent('mouseup');
	                evt.target.dispatchEvent(e);
	                // Send click.
	                evt.target.click();
	            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {
	                evt.preventDefault();
	                this.hide();
	            }
	        }
	    }
	};
	/**
	   * Handles a click event on an item.
	   *
	   * @param {Event} evt The event that fired.
	   * @private
	   */
	MaterialMenu.prototype.handleItemClick_ = function (evt) {
	    if (evt.target.hasAttribute('disabled')) {
	        evt.stopPropagation();
	    } else {
	        // Wait some time before closing menu, so the user can see the ripple.
	        this.closing_ = true;
	        window.setTimeout(function (evt) {
	            this.hide();
	            this.closing_ = false;
	        }.bind(this), this.Constant_.CLOSE_TIMEOUT);
	    }
	};
	/**
	   * Calculates the initial clip (for opening the menu) or final clip (for closing
	   * it), and applies it. This allows us to animate from or to the correct point,
	   * that is, the point it's aligned to in the "for" element.
	   *
	   * @param {number} height Height of the clip rectangle
	   * @param {number} width Width of the clip rectangle
	   * @private
	   */
	MaterialMenu.prototype.applyClip_ = function (height, width) {
	    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {
	        // Do not clip.
	        this.element_.style.clip = '';
	    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {
	        // Clip to the top right corner of the menu.
	        this.element_.style.clip = 'rect(0 ' + width + 'px ' + '0 ' + width + 'px)';
	    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {
	        // Clip to the bottom left corner of the menu.
	        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';
	    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {
	        // Clip to the bottom right corner of the menu.
	        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';
	    } else {
	        // Default: do not clip (same as clipping to the top left corner).
	        this.element_.style.clip = '';
	    }
	};
	/**
	   * Cleanup function to remove animation listeners.
	   *
	   * @param {Event} evt
	   * @private
	   */
	MaterialMenu.prototype.removeAnimationEndListener_ = function (evt) {
	    evt.target.classList.remove(MaterialMenu.prototype.CssClasses_.IS_ANIMATING);
	};
	/**
	   * Adds an event listener to clean up after the animation ends.
	   *
	   * @private
	   */
	MaterialMenu.prototype.addAnimationEndListener_ = function () {
	    this.element_.addEventListener('transitionend', this.removeAnimationEndListener_);
	    this.element_.addEventListener('webkitTransitionEnd', this.removeAnimationEndListener_);
	};
	/**
	   * Displays the menu.
	   *
	   * @public
	   */
	MaterialMenu.prototype.show = function (evt) {
	    if (this.element_ && this.container_ && this.outline_) {
	        // Measure the inner element.
	        var height = this.element_.getBoundingClientRect().height;
	        var width = this.element_.getBoundingClientRect().width;
	        // Apply the inner element's size to the container and outline.
	        this.container_.style.width = width + 'px';
	        this.container_.style.height = height + 'px';
	        this.outline_.style.width = width + 'px';
	        this.outline_.style.height = height + 'px';
	        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;
	        // Calculate transition delays for individual menu items, so that they fade
	        // in one at a time.
	        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);
	        for (var i = 0; i < items.length; i++) {
	            var itemDelay = null;
	            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {
	                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';
	            } else {
	                itemDelay = items[i].offsetTop / height * transitionDuration + 's';
	            }
	            items[i].style.transitionDelay = itemDelay;
	        }
	        // Apply the initial clip to the text before we start animating.
	        this.applyClip_(height, width);
	        // Wait for the next frame, turn on animation, and apply the final clip.
	        // Also make it visible. This triggers the transitions.
	        window.requestAnimationFrame(function () {
	            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);
	            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';
	            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);
	        }.bind(this));
	        // Clean up after the animation is complete.
	        this.addAnimationEndListener_();
	        // Add a click listener to the document, to close the menu.
	        var callback = function (e) {
	            // Check to see if the document is processing the same event that
	            // displayed the menu in the first place. If so, do nothing.
	            // Also check to see if the menu is in the process of closing itself, and
	            // do nothing in that case.
	            // Also check if the clicked element is a menu item
	            // if so, do nothing.
	            if (e !== evt && !this.closing_ && e.target.parentNode !== this.element_) {
	                document.removeEventListener('click', callback);
	                this.hide();
	            }
	        }.bind(this);
	        document.addEventListener('click', callback);
	    }
	};
	MaterialMenu.prototype['show'] = MaterialMenu.prototype.show;
	/**
	   * Hides the menu.
	   *
	   * @public
	   */
	MaterialMenu.prototype.hide = function () {
	    if (this.element_ && this.container_ && this.outline_) {
	        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);
	        // Remove all transition delays; menu items fade out concurrently.
	        for (var i = 0; i < items.length; i++) {
	            items[i].style.removeProperty('transition-delay');
	        }
	        // Measure the inner element.
	        var rect = this.element_.getBoundingClientRect();
	        var height = rect.height;
	        var width = rect.width;
	        // Turn on animation, and apply the final clip. Also make invisible.
	        // This triggers the transitions.
	        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);
	        this.applyClip_(height, width);
	        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);
	        // Clean up after the animation is complete.
	        this.addAnimationEndListener_();
	    }
	};
	MaterialMenu.prototype['hide'] = MaterialMenu.prototype.hide;
	/**
	   * Displays or hides the menu, depending on current state.
	   *
	   * @public
	   */
	MaterialMenu.prototype.toggle = function (evt) {
	    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {
	        this.hide();
	    } else {
	        this.show(evt);
	    }
	};
	MaterialMenu.prototype['toggle'] = MaterialMenu.prototype.toggle;
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialMenu,
	    classAsString: 'MaterialMenu',
	    cssClass: 'mdl-js-menu',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Progress MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialProgress = function MaterialProgress(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialProgress'] = MaterialProgress;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialProgress.prototype.Constant_ = {};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };
	/**
	   * Set the current progress of the progressbar.
	   *
	   * @param {number} p Percentage of the progress (0-100)
	   * @public
	   */
	MaterialProgress.prototype.setProgress = function (p) {
	    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {
	        return;
	    }
	    this.progressbar_.style.width = p + '%';
	};
	MaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;
	/**
	   * Set the current progress of the buffer.
	   *
	   * @param {number} p Percentage of the buffer (0-100)
	   * @public
	   */
	MaterialProgress.prototype.setBuffer = function (p) {
	    this.bufferbar_.style.width = p + '%';
	    this.auxbar_.style.width = 100 - p + '%';
	};
	MaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;
	/**
	   * Initialize element.
	   */
	MaterialProgress.prototype.init = function () {
	    if (this.element_) {
	        var el = document.createElement('div');
	        el.className = 'progressbar bar bar1';
	        this.element_.appendChild(el);
	        this.progressbar_ = el;
	        el = document.createElement('div');
	        el.className = 'bufferbar bar bar2';
	        this.element_.appendChild(el);
	        this.bufferbar_ = el;
	        el = document.createElement('div');
	        el.className = 'auxbar bar bar3';
	        this.element_.appendChild(el);
	        this.auxbar_ = el;
	        this.progressbar_.style.width = '0%';
	        this.bufferbar_.style.width = '100%';
	        this.auxbar_.style.width = '0%';
	        this.element_.classList.add('is-upgraded');
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialProgress,
	    classAsString: 'MaterialProgress',
	    cssClass: 'mdl-js-progress',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Radio MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialRadio = function MaterialRadio(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialRadio'] = MaterialRadio;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialRadio.prototype.CssClasses_ = {
	    IS_FOCUSED: 'is-focused',
	    IS_DISABLED: 'is-disabled',
	    IS_CHECKED: 'is-checked',
	    IS_UPGRADED: 'is-upgraded',
	    JS_RADIO: 'mdl-js-radio',
	    RADIO_BTN: 'mdl-radio__button',
	    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',
	    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',
	    RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',
	    RIPPLE_CENTER: 'mdl-ripple--center',
	    RIPPLE: 'mdl-ripple'
	};
	/**
	   * Handle change of state.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialRadio.prototype.onChange_ = function (event) {
	    // Since other radio buttons don't get change events, we need to look for
	    // them to update their classes.
	    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);
	    for (var i = 0; i < radios.length; i++) {
	        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);
	        // Different name == different group, so no point updating those.
	        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {
	            radios[i]['MaterialRadio'].updateClasses_();
	        }
	    }
	};
	/**
	   * Handle focus.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialRadio.prototype.onFocus_ = function (event) {
	    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle lost focus.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialRadio.prototype.onBlur_ = function (event) {
	    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle mouseup.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialRadio.prototype.onMouseup_ = function (event) {
	    this.blur_();
	};
	/**
	   * Update classes.
	   *
	   * @private
	   */
	MaterialRadio.prototype.updateClasses_ = function () {
	    this.checkDisabled();
	    this.checkToggleState();
	};
	/**
	   * Add blur.
	   *
	   * @private
	   */
	MaterialRadio.prototype.blur_ = function () {
	    // TODO: figure out why there's a focus event being fired after our blur,
	    // so that we can avoid this hack.
	    window.setTimeout(function () {
	        this.btnElement_.blur();
	    }.bind(this), this.Constant_.TINY_TIMEOUT);
	};
	// Public methods.
	/**
	   * Check the components disabled state.
	   *
	   * @public
	   */
	MaterialRadio.prototype.checkDisabled = function () {
	    if (this.btnElement_.disabled) {
	        this.element_.classList.add(this.CssClasses_.IS_DISABLED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
	    }
	};
	MaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;
	/**
	   * Check the components toggled state.
	   *
	   * @public
	   */
	MaterialRadio.prototype.checkToggleState = function () {
	    if (this.btnElement_.checked) {
	        this.element_.classList.add(this.CssClasses_.IS_CHECKED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
	    }
	};
	MaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;
	/**
	   * Disable radio.
	   *
	   * @public
	   */
	MaterialRadio.prototype.disable = function () {
	    this.btnElement_.disabled = true;
	    this.updateClasses_();
	};
	MaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;
	/**
	   * Enable radio.
	   *
	   * @public
	   */
	MaterialRadio.prototype.enable = function () {
	    this.btnElement_.disabled = false;
	    this.updateClasses_();
	};
	MaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;
	/**
	   * Check radio.
	   *
	   * @public
	   */
	MaterialRadio.prototype.check = function () {
	    this.btnElement_.checked = true;
	    this.updateClasses_();
	};
	MaterialRadio.prototype['check'] = MaterialRadio.prototype.check;
	/**
	   * Uncheck radio.
	   *
	   * @public
	   */
	MaterialRadio.prototype.uncheck = function () {
	    this.btnElement_.checked = false;
	    this.updateClasses_();
	};
	MaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;
	/**
	   * Initialize element.
	   */
	MaterialRadio.prototype.init = function () {
	    if (this.element_) {
	        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);
	        this.boundChangeHandler_ = this.onChange_.bind(this);
	        this.boundFocusHandler_ = this.onChange_.bind(this);
	        this.boundBlurHandler_ = this.onBlur_.bind(this);
	        this.boundMouseUpHandler_ = this.onMouseup_.bind(this);
	        var outerCircle = document.createElement('span');
	        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);
	        var innerCircle = document.createElement('span');
	        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);
	        this.element_.appendChild(outerCircle);
	        this.element_.appendChild(innerCircle);
	        var rippleContainer;
	        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
	            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
	            rippleContainer = document.createElement('span');
	            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
	            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);
	            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);
	            rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);
	            var ripple = document.createElement('span');
	            ripple.classList.add(this.CssClasses_.RIPPLE);
	            rippleContainer.appendChild(ripple);
	            this.element_.appendChild(rippleContainer);
	        }
	        this.btnElement_.addEventListener('change', this.boundChangeHandler_);
	        this.btnElement_.addEventListener('focus', this.boundFocusHandler_);
	        this.btnElement_.addEventListener('blur', this.boundBlurHandler_);
	        this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);
	        this.updateClasses_();
	        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialRadio,
	    classAsString: 'MaterialRadio',
	    cssClass: 'mdl-js-radio',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Slider MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialSlider = function MaterialSlider(element) {
	    this.element_ = element;
	    // Browser feature detection.
	    this.isIE_ = window.navigator.msPointerEnabled;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialSlider'] = MaterialSlider;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialSlider.prototype.Constant_ = {};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialSlider.prototype.CssClasses_ = {
	    IE_CONTAINER: 'mdl-slider__ie-container',
	    SLIDER_CONTAINER: 'mdl-slider__container',
	    BACKGROUND_FLEX: 'mdl-slider__background-flex',
	    BACKGROUND_LOWER: 'mdl-slider__background-lower',
	    BACKGROUND_UPPER: 'mdl-slider__background-upper',
	    IS_LOWEST_VALUE: 'is-lowest-value',
	    IS_UPGRADED: 'is-upgraded'
	};
	/**
	   * Handle input on element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSlider.prototype.onInput_ = function (event) {
	    this.updateValueStyles_();
	};
	/**
	   * Handle change on element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSlider.prototype.onChange_ = function (event) {
	    this.updateValueStyles_();
	};
	/**
	   * Handle mouseup on element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSlider.prototype.onMouseUp_ = function (event) {
	    event.target.blur();
	};
	/**
	   * Handle mousedown on container element.
	   * This handler is purpose is to not require the use to click
	   * exactly on the 2px slider element, as FireFox seems to be very
	   * strict about this.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   * @suppress {missingProperties}
	   */
	MaterialSlider.prototype.onContainerMouseDown_ = function (event) {
	    // If this click is not on the parent element (but rather some child)
	    // ignore. It may still bubble up.
	    if (event.target !== this.element_.parentElement) {
	        return;
	    }
	    // Discard the original event and create a new event that
	    // is on the slider element.
	    event.preventDefault();
	    var newEvent = new MouseEvent('mousedown', {
	        target: event.target,
	        buttons: event.buttons,
	        clientX: event.clientX,
	        clientY: this.element_.getBoundingClientRect().y
	    });
	    this.element_.dispatchEvent(newEvent);
	};
	/**
	   * Handle updating of values.
	   *
	   * @private
	   */
	MaterialSlider.prototype.updateValueStyles_ = function () {
	    // Calculate and apply percentages to div structure behind slider.
	    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);
	    if (fraction === 0) {
	        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);
	    }
	    if (!this.isIE_) {
	        this.backgroundLower_.style.flex = fraction;
	        this.backgroundLower_.style.webkitFlex = fraction;
	        this.backgroundUpper_.style.flex = 1 - fraction;
	        this.backgroundUpper_.style.webkitFlex = 1 - fraction;
	    }
	};
	// Public methods.
	/**
	   * Disable slider.
	   *
	   * @public
	   */
	MaterialSlider.prototype.disable = function () {
	    this.element_.disabled = true;
	};
	MaterialSlider.prototype['disable'] = MaterialSlider.prototype.disable;
	/**
	   * Enable slider.
	   *
	   * @public
	   */
	MaterialSlider.prototype.enable = function () {
	    this.element_.disabled = false;
	};
	MaterialSlider.prototype['enable'] = MaterialSlider.prototype.enable;
	/**
	   * Update slider value.
	   *
	   * @param {number} value The value to which to set the control (optional).
	   * @public
	   */
	MaterialSlider.prototype.change = function (value) {
	    if (typeof value !== 'undefined') {
	        this.element_.value = value;
	    }
	    this.updateValueStyles_();
	};
	MaterialSlider.prototype['change'] = MaterialSlider.prototype.change;
	/**
	   * Initialize element.
	   */
	MaterialSlider.prototype.init = function () {
	    if (this.element_) {
	        if (this.isIE_) {
	            // Since we need to specify a very large height in IE due to
	            // implementation limitations, we add a parent here that trims it down to
	            // a reasonable size.
	            var containerIE = document.createElement('div');
	            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);
	            this.element_.parentElement.insertBefore(containerIE, this.element_);
	            this.element_.parentElement.removeChild(this.element_);
	            containerIE.appendChild(this.element_);
	        } else {
	            // For non-IE browsers, we need a div structure that sits behind the
	            // slider and allows us to style the left and right sides of it with
	            // different colors.
	            var container = document.createElement('div');
	            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);
	            this.element_.parentElement.insertBefore(container, this.element_);
	            this.element_.parentElement.removeChild(this.element_);
	            container.appendChild(this.element_);
	            var backgroundFlex = document.createElement('div');
	            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);
	            container.appendChild(backgroundFlex);
	            this.backgroundLower_ = document.createElement('div');
	            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);
	            backgroundFlex.appendChild(this.backgroundLower_);
	            this.backgroundUpper_ = document.createElement('div');
	            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);
	            backgroundFlex.appendChild(this.backgroundUpper_);
	        }
	        this.boundInputHandler = this.onInput_.bind(this);
	        this.boundChangeHandler = this.onChange_.bind(this);
	        this.boundMouseUpHandler = this.onMouseUp_.bind(this);
	        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);
	        this.element_.addEventListener('input', this.boundInputHandler);
	        this.element_.addEventListener('change', this.boundChangeHandler);
	        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);
	        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);
	        this.updateValueStyles_();
	        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialSlider,
	    classAsString: 'MaterialSlider',
	    cssClass: 'mdl-js-slider',
	    widget: true
	});
	/**
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Snackbar MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialSnackbar = function MaterialSnackbar(element) {
	    this.element_ = element;
	    this.textElement_ = this.element_.querySelector('.' + this.cssClasses_.MESSAGE);
	    this.actionElement_ = this.element_.querySelector('.' + this.cssClasses_.ACTION);
	    if (!this.textElement_) {
	        throw new Error('There must be a message element for a snackbar.');
	    }
	    if (!this.actionElement_) {
	        throw new Error('There must be an action element for a snackbar.');
	    }
	    this.active = false;
	    this.actionHandler_ = undefined;
	    this.message_ = undefined;
	    this.actionText_ = undefined;
	    this.queuedNotifications_ = [];
	    this.setActionHidden_(true);
	};
	window['MaterialSnackbar'] = MaterialSnackbar;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialSnackbar.prototype.Constant_ = {
	    // The duration of the snackbar show/hide animation, in ms.
	    ANIMATION_LENGTH: 250
	};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialSnackbar.prototype.cssClasses_ = {
	    SNACKBAR: 'mdl-snackbar',
	    MESSAGE: 'mdl-snackbar__text',
	    ACTION: 'mdl-snackbar__action',
	    ACTIVE: 'mdl-snackbar--active'
	};
	/**
	   * Display the snackbar.
	   *
	   * @private
	   */
	MaterialSnackbar.prototype.displaySnackbar_ = function () {
	    this.element_.setAttribute('aria-hidden', 'true');
	    if (this.actionHandler_) {
	        this.actionElement_.textContent = this.actionText_;
	        this.actionElement_.addEventListener('click', this.actionHandler_);
	        this.setActionHidden_(false);
	    }
	    this.textElement_.textContent = this.message_;
	    this.element_.classList.add(this.cssClasses_.ACTIVE);
	    this.element_.setAttribute('aria-hidden', 'false');
	    setTimeout(this.cleanup_.bind(this), this.timeout_);
	};
	/**
	   * Show the snackbar.
	   *
	   * @param {Object} data The data for the notification.
	   * @public
	   */
	MaterialSnackbar.prototype.showSnackbar = function (data) {
	    if (data === undefined) {
	        throw new Error('Please provide a data object with at least a message to display.');
	    }
	    if (data['message'] === undefined) {
	        throw new Error('Please provide a message to be displayed.');
	    }
	    if (data['actionHandler'] && !data['actionText']) {
	        throw new Error('Please provide action text with the handler.');
	    }
	    if (this.active) {
	        this.queuedNotifications_.push(data);
	    } else {
	        this.active = true;
	        this.message_ = data['message'];
	        if (data['timeout']) {
	            this.timeout_ = data['timeout'];
	        } else {
	            this.timeout_ = 2750;
	        }
	        if (data['actionHandler']) {
	            this.actionHandler_ = data['actionHandler'];
	        }
	        if (data['actionText']) {
	            this.actionText_ = data['actionText'];
	        }
	        this.displaySnackbar_();
	    }
	};
	MaterialSnackbar.prototype['showSnackbar'] = MaterialSnackbar.prototype.showSnackbar;
	/**
	   * Check if the queue has items within it.
	   * If it does, display the next entry.
	   *
	   * @private
	   */
	MaterialSnackbar.prototype.checkQueue_ = function () {
	    if (this.queuedNotifications_.length > 0) {
	        this.showSnackbar(this.queuedNotifications_.shift());
	    }
	};
	/**
	   * Cleanup the snackbar event listeners and accessiblity attributes.
	   *
	   * @private
	   */
	MaterialSnackbar.prototype.cleanup_ = function () {
	    this.element_.classList.remove(this.cssClasses_.ACTIVE);
	    setTimeout(function () {
	        this.element_.setAttribute('aria-hidden', 'true');
	        this.textElement_.textContent = '';
	        if (!Boolean(this.actionElement_.getAttribute('aria-hidden'))) {
	            this.setActionHidden_(true);
	            this.actionElement_.textContent = '';
	            this.actionElement_.removeEventListener('click', this.actionHandler_);
	        }
	        this.actionHandler_ = undefined;
	        this.message_ = undefined;
	        this.actionText_ = undefined;
	        this.active = false;
	        this.checkQueue_();
	    }.bind(this), this.Constant_.ANIMATION_LENGTH);
	};
	/**
	   * Set the action handler hidden state.
	   *
	   * @param {boolean} value
	   * @private
	   */
	MaterialSnackbar.prototype.setActionHidden_ = function (value) {
	    if (value) {
	        this.actionElement_.setAttribute('aria-hidden', 'true');
	    } else {
	        this.actionElement_.removeAttribute('aria-hidden');
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialSnackbar,
	    classAsString: 'MaterialSnackbar',
	    cssClass: 'mdl-js-snackbar',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Spinner MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @param {HTMLElement} element The element that will be upgraded.
	   * @constructor
	   */
	var MaterialSpinner = function MaterialSpinner(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialSpinner'] = MaterialSpinner;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialSpinner.prototype.CssClasses_ = {
	    MDL_SPINNER_LAYER: 'mdl-spinner__layer',
	    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',
	    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',
	    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',
	    MDL_SPINNER_LEFT: 'mdl-spinner__left',
	    MDL_SPINNER_RIGHT: 'mdl-spinner__right'
	};
	/**
	   * Auxiliary method to create a spinner layer.
	   *
	   * @param {number} index Index of the layer to be created.
	   * @public
	   */
	MaterialSpinner.prototype.createLayer = function (index) {
	    var layer = document.createElement('div');
	    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);
	    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);
	    var leftClipper = document.createElement('div');
	    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);
	    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);
	    var gapPatch = document.createElement('div');
	    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);
	    var rightClipper = document.createElement('div');
	    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);
	    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);
	    var circleOwners = [
	        leftClipper,
	        gapPatch,
	        rightClipper
	    ];
	    for (var i = 0; i < circleOwners.length; i++) {
	        var circle = document.createElement('div');
	        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);
	        circleOwners[i].appendChild(circle);
	    }
	    layer.appendChild(leftClipper);
	    layer.appendChild(gapPatch);
	    layer.appendChild(rightClipper);
	    this.element_.appendChild(layer);
	};
	MaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;
	/**
	   * Stops the spinner animation.
	   * Public method for users who need to stop the spinner for any reason.
	   *
	   * @public
	   */
	MaterialSpinner.prototype.stop = function () {
	    this.element_.classList.remove('is-active');
	};
	MaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;
	/**
	   * Starts the spinner animation.
	   * Public method for users who need to manually start the spinner for any reason
	   * (instead of just adding the 'is-active' class to their markup).
	   *
	   * @public
	   */
	MaterialSpinner.prototype.start = function () {
	    this.element_.classList.add('is-active');
	};
	MaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;
	/**
	   * Initialize element.
	   */
	MaterialSpinner.prototype.init = function () {
	    if (this.element_) {
	        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {
	            this.createLayer(i);
	        }
	        this.element_.classList.add('is-upgraded');
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialSpinner,
	    classAsString: 'MaterialSpinner',
	    cssClass: 'mdl-js-spinner',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Checkbox MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialSwitch = function MaterialSwitch(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialSwitch'] = MaterialSwitch;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialSwitch.prototype.CssClasses_ = {
	    INPUT: 'mdl-switch__input',
	    TRACK: 'mdl-switch__track',
	    THUMB: 'mdl-switch__thumb',
	    FOCUS_HELPER: 'mdl-switch__focus-helper',
	    RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',
	    RIPPLE_CENTER: 'mdl-ripple--center',
	    RIPPLE: 'mdl-ripple',
	    IS_FOCUSED: 'is-focused',
	    IS_DISABLED: 'is-disabled',
	    IS_CHECKED: 'is-checked'
	};
	/**
	   * Handle change of state.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSwitch.prototype.onChange_ = function (event) {
	    this.updateClasses_();
	};
	/**
	   * Handle focus of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSwitch.prototype.onFocus_ = function (event) {
	    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle lost focus of element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSwitch.prototype.onBlur_ = function (event) {
	    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle mouseup.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialSwitch.prototype.onMouseUp_ = function (event) {
	    this.blur_();
	};
	/**
	   * Handle class updates.
	   *
	   * @private
	   */
	MaterialSwitch.prototype.updateClasses_ = function () {
	    this.checkDisabled();
	    this.checkToggleState();
	};
	/**
	   * Add blur.
	   *
	   * @private
	   */
	MaterialSwitch.prototype.blur_ = function () {
	    // TODO: figure out why there's a focus event being fired after our blur,
	    // so that we can avoid this hack.
	    window.setTimeout(function () {
	        this.inputElement_.blur();
	    }.bind(this), this.Constant_.TINY_TIMEOUT);
	};
	// Public methods.
	/**
	   * Check the components disabled state.
	   *
	   * @public
	   */
	MaterialSwitch.prototype.checkDisabled = function () {
	    if (this.inputElement_.disabled) {
	        this.element_.classList.add(this.CssClasses_.IS_DISABLED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
	    }
	};
	MaterialSwitch.prototype['checkDisabled'] = MaterialSwitch.prototype.checkDisabled;
	/**
	   * Check the components toggled state.
	   *
	   * @public
	   */
	MaterialSwitch.prototype.checkToggleState = function () {
	    if (this.inputElement_.checked) {
	        this.element_.classList.add(this.CssClasses_.IS_CHECKED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
	    }
	};
	MaterialSwitch.prototype['checkToggleState'] = MaterialSwitch.prototype.checkToggleState;
	/**
	   * Disable switch.
	   *
	   * @public
	   */
	MaterialSwitch.prototype.disable = function () {
	    this.inputElement_.disabled = true;
	    this.updateClasses_();
	};
	MaterialSwitch.prototype['disable'] = MaterialSwitch.prototype.disable;
	/**
	   * Enable switch.
	   *
	   * @public
	   */
	MaterialSwitch.prototype.enable = function () {
	    this.inputElement_.disabled = false;
	    this.updateClasses_();
	};
	MaterialSwitch.prototype['enable'] = MaterialSwitch.prototype.enable;
	/**
	   * Activate switch.
	   *
	   * @public
	   */
	MaterialSwitch.prototype.on = function () {
	    this.inputElement_.checked = true;
	    this.updateClasses_();
	};
	MaterialSwitch.prototype['on'] = MaterialSwitch.prototype.on;
	/**
	   * Deactivate switch.
	   *
	   * @public
	   */
	MaterialSwitch.prototype.off = function () {
	    this.inputElement_.checked = false;
	    this.updateClasses_();
	};
	MaterialSwitch.prototype['off'] = MaterialSwitch.prototype.off;
	/**
	   * Initialize element.
	   */
	MaterialSwitch.prototype.init = function () {
	    if (this.element_) {
	        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);
	        var track = document.createElement('div');
	        track.classList.add(this.CssClasses_.TRACK);
	        var thumb = document.createElement('div');
	        thumb.classList.add(this.CssClasses_.THUMB);
	        var focusHelper = document.createElement('span');
	        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);
	        thumb.appendChild(focusHelper);
	        this.element_.appendChild(track);
	        this.element_.appendChild(thumb);
	        this.boundMouseUpHandler = this.onMouseUp_.bind(this);
	        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
	            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
	            this.rippleContainerElement_ = document.createElement('span');
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);
	            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);
	            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);
	            var ripple = document.createElement('span');
	            ripple.classList.add(this.CssClasses_.RIPPLE);
	            this.rippleContainerElement_.appendChild(ripple);
	            this.element_.appendChild(this.rippleContainerElement_);
	        }
	        this.boundChangeHandler = this.onChange_.bind(this);
	        this.boundFocusHandler = this.onFocus_.bind(this);
	        this.boundBlurHandler = this.onBlur_.bind(this);
	        this.inputElement_.addEventListener('change', this.boundChangeHandler);
	        this.inputElement_.addEventListener('focus', this.boundFocusHandler);
	        this.inputElement_.addEventListener('blur', this.boundBlurHandler);
	        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);
	        this.updateClasses_();
	        this.element_.classList.add('is-upgraded');
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialSwitch,
	    classAsString: 'MaterialSwitch',
	    cssClass: 'mdl-js-switch',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Tabs MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {Element} element The element that will be upgraded.
	   */
	var MaterialTabs = function MaterialTabs(element) {
	    // Stores the HTML element.
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialTabs'] = MaterialTabs;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialTabs.prototype.Constant_ = {};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialTabs.prototype.CssClasses_ = {
	    TAB_CLASS: 'mdl-tabs__tab',
	    PANEL_CLASS: 'mdl-tabs__panel',
	    ACTIVE_CLASS: 'is-active',
	    UPGRADED_CLASS: 'is-upgraded',
	    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',
	    MDL_RIPPLE: 'mdl-ripple',
	    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'
	};
	/**
	   * Handle clicks to a tabs component
	   *
	   * @private
	   */
	MaterialTabs.prototype.initTabs_ = function () {
	    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {
	        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);
	    }
	    // Select element tabs, document panels
	    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);
	    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);
	    // Create new tabs for each tab element
	    for (var i = 0; i < this.tabs_.length; i++) {
	        new MaterialTab(this.tabs_[i], this);
	    }
	    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);
	};
	/**
	   * Reset tab state, dropping active classes
	   *
	   * @private
	   */
	MaterialTabs.prototype.resetTabState_ = function () {
	    for (var k = 0; k < this.tabs_.length; k++) {
	        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);
	    }
	};
	/**
	   * Reset panel state, droping active classes
	   *
	   * @private
	   */
	MaterialTabs.prototype.resetPanelState_ = function () {
	    for (var j = 0; j < this.panels_.length; j++) {
	        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);
	    }
	};
	/**
	   * Initialize element.
	   */
	MaterialTabs.prototype.init = function () {
	    if (this.element_) {
	        this.initTabs_();
	    }
	};
	/**
	   * Constructor for an individual tab.
	   *
	   * @constructor
	   * @param {Element} tab The HTML element for the tab.
	   * @param {MaterialTabs} ctx The MaterialTabs object that owns the tab.
	   */
	function MaterialTab(tab, ctx) {
	    if (tab) {
	        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {
	            var rippleContainer = document.createElement('span');
	            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);
	            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);
	            var ripple = document.createElement('span');
	            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);
	            rippleContainer.appendChild(ripple);
	            tab.appendChild(rippleContainer);
	        }
	        tab.addEventListener('click', function (e) {
	            e.preventDefault();
	            var href = tab.href.split('#')[1];
	            var panel = ctx.element_.querySelector('#' + href);
	            ctx.resetTabState_();
	            ctx.resetPanelState_();
	            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);
	            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);
	        });
	    }
	}
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialTabs,
	    classAsString: 'MaterialTabs',
	    cssClass: 'mdl-js-tabs'
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Textfield MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialTextfield = function MaterialTextfield(element) {
	    this.element_ = element;
	    this.maxRows = this.Constant_.NO_MAX_ROWS;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialTextfield'] = MaterialTextfield;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialTextfield.prototype.Constant_ = {
	    NO_MAX_ROWS: -1,
	    MAX_ROWS_ATTRIBUTE: 'maxrows'
	};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialTextfield.prototype.CssClasses_ = {
	    LABEL: 'mdl-textfield__label',
	    INPUT: 'mdl-textfield__input',
	    IS_DIRTY: 'is-dirty',
	    IS_FOCUSED: 'is-focused',
	    IS_DISABLED: 'is-disabled',
	    IS_INVALID: 'is-invalid',
	    IS_UPGRADED: 'is-upgraded',
	    HAS_PLACEHOLDER: 'has-placeholder'
	};
	/**
	   * Handle input being entered.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialTextfield.prototype.onKeyDown_ = function (event) {
	    var currentRowCount = event.target.value.split('\n').length;
	    if (event.keyCode === 13) {
	        if (currentRowCount >= this.maxRows) {
	            event.preventDefault();
	        }
	    }
	};
	/**
	   * Handle focus.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialTextfield.prototype.onFocus_ = function (event) {
	    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle lost focus.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialTextfield.prototype.onBlur_ = function (event) {
	    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
	};
	/**
	   * Handle reset event from out side.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialTextfield.prototype.onReset_ = function (event) {
	    this.updateClasses_();
	};
	/**
	   * Handle class updates.
	   *
	   * @private
	   */
	MaterialTextfield.prototype.updateClasses_ = function () {
	    this.checkDisabled();
	    this.checkValidity();
	    this.checkDirty();
	    this.checkFocus();
	};
	// Public methods.
	/**
	   * Check the disabled state and update field accordingly.
	   *
	   * @public
	   */
	MaterialTextfield.prototype.checkDisabled = function () {
	    if (this.input_.disabled) {
	        this.element_.classList.add(this.CssClasses_.IS_DISABLED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
	    }
	};
	MaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;
	/**
	  * Check the focus state and update field accordingly.
	  *
	  * @public
	  */
	MaterialTextfield.prototype.checkFocus = function () {
	    if (Boolean(this.element_.querySelector(':focus'))) {
	        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
	    }
	};
	MaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;
	/**
	   * Check the validity state and update field accordingly.
	   *
	   * @public
	   */
	MaterialTextfield.prototype.checkValidity = function () {
	    if (this.input_.validity) {
	        if (this.input_.validity.valid) {
	            this.element_.classList.remove(this.CssClasses_.IS_INVALID);
	        } else {
	            this.element_.classList.add(this.CssClasses_.IS_INVALID);
	        }
	    }
	};
	MaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;
	/**
	   * Check the dirty state and update field accordingly.
	   *
	   * @public
	   */
	MaterialTextfield.prototype.checkDirty = function () {
	    if (this.input_.value && this.input_.value.length > 0) {
	        this.element_.classList.add(this.CssClasses_.IS_DIRTY);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);
	    }
	};
	MaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;
	/**
	   * Disable text field.
	   *
	   * @public
	   */
	MaterialTextfield.prototype.disable = function () {
	    this.input_.disabled = true;
	    this.updateClasses_();
	};
	MaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;
	/**
	   * Enable text field.
	   *
	   * @public
	   */
	MaterialTextfield.prototype.enable = function () {
	    this.input_.disabled = false;
	    this.updateClasses_();
	};
	MaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;
	/**
	   * Update text field value.
	   *
	   * @param {string} value The value to which to set the control (optional).
	   * @public
	   */
	MaterialTextfield.prototype.change = function (value) {
	    this.input_.value = value || '';
	    this.updateClasses_();
	};
	MaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;
	/**
	   * Initialize element.
	   */
	MaterialTextfield.prototype.init = function () {
	    if (this.element_) {
	        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);
	        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);
	        if (this.input_) {
	            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {
	                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);
	                if (isNaN(this.maxRows)) {
	                    this.maxRows = this.Constant_.NO_MAX_ROWS;
	                }
	            }
	            if (this.input_.hasAttribute('placeholder')) {
	                this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);
	            }
	            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);
	            this.boundFocusHandler = this.onFocus_.bind(this);
	            this.boundBlurHandler = this.onBlur_.bind(this);
	            this.boundResetHandler = this.onReset_.bind(this);
	            this.input_.addEventListener('input', this.boundUpdateClassesHandler);
	            this.input_.addEventListener('focus', this.boundFocusHandler);
	            this.input_.addEventListener('blur', this.boundBlurHandler);
	            this.input_.addEventListener('reset', this.boundResetHandler);
	            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {
	                // TODO: This should handle pasting multi line text.
	                // Currently doesn't.
	                this.boundKeyDownHandler = this.onKeyDown_.bind(this);
	                this.input_.addEventListener('keydown', this.boundKeyDownHandler);
	            }
	            var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);
	            this.updateClasses_();
	            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
	            if (invalid) {
	                this.element_.classList.add(this.CssClasses_.IS_INVALID);
	            }
	            if (this.input_.hasAttribute('autofocus')) {
	                this.element_.focus();
	                this.checkFocus();
	            }
	        }
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialTextfield,
	    classAsString: 'MaterialTextfield',
	    cssClass: 'mdl-js-textfield',
	    widget: true
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Tooltip MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialTooltip = function MaterialTooltip(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialTooltip'] = MaterialTooltip;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialTooltip.prototype.Constant_ = {};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialTooltip.prototype.CssClasses_ = {
	    IS_ACTIVE: 'is-active',
	    BOTTOM: 'mdl-tooltip--bottom',
	    LEFT: 'mdl-tooltip--left',
	    RIGHT: 'mdl-tooltip--right',
	    TOP: 'mdl-tooltip--top'
	};
	/**
	   * Handle mouseenter for tooltip.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialTooltip.prototype.handleMouseEnter_ = function (event) {
	    var props = event.target.getBoundingClientRect();
	    var left = props.left + props.width / 2;
	    var top = props.top + props.height / 2;
	    var marginLeft = -1 * (this.element_.offsetWidth / 2);
	    var marginTop = -1 * (this.element_.offsetHeight / 2);
	    if (this.element_.classList.contains(this.CssClasses_.LEFT) || this.element_.classList.contains(this.CssClasses_.RIGHT)) {
	        left = props.width / 2;
	        if (top + marginTop < 0) {
	            this.element_.style.top = 0;
	            this.element_.style.marginTop = 0;
	        } else {
	            this.element_.style.top = top + 'px';
	            this.element_.style.marginTop = marginTop + 'px';
	        }
	    } else {
	        if (left + marginLeft < 0) {
	            this.element_.style.left = 0;
	            this.element_.style.marginLeft = 0;
	        } else {
	            this.element_.style.left = left + 'px';
	            this.element_.style.marginLeft = marginLeft + 'px';
	        }
	    }
	    if (this.element_.classList.contains(this.CssClasses_.TOP)) {
	        this.element_.style.top = props.top - this.element_.offsetHeight - 10 + 'px';
	    } else if (this.element_.classList.contains(this.CssClasses_.RIGHT)) {
	        this.element_.style.left = props.left + props.width + 10 + 'px';
	    } else if (this.element_.classList.contains(this.CssClasses_.LEFT)) {
	        this.element_.style.left = props.left - this.element_.offsetWidth - 10 + 'px';
	    } else {
	        this.element_.style.top = props.top + props.height + 10 + 'px';
	    }
	    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);
	};
	/**
	   * Handle mouseleave for tooltip.
	   *
	   * @private
	   */
	MaterialTooltip.prototype.handleMouseLeave_ = function () {
	    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);
	};
	/**
	   * Initialize element.
	   */
	MaterialTooltip.prototype.init = function () {
	    if (this.element_) {
	        var forElId = this.element_.getAttribute('for');
	        if (forElId) {
	            this.forElement_ = document.getElementById(forElId);
	        }
	        if (this.forElement_) {
	            // It's left here because it prevents accidental text selection on Android
	            if (!this.forElement_.hasAttribute('tabindex')) {
	                this.forElement_.setAttribute('tabindex', '0');
	            }
	            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);
	            this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this);
	            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);
	            this.forElement_.addEventListener('touchend', this.boundMouseEnterHandler, false);
	            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveHandler, false);
	            window.addEventListener('touchstart', this.boundMouseLeaveHandler);
	        }
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialTooltip,
	    classAsString: 'MaterialTooltip',
	    cssClass: 'mdl-tooltip'
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Layout MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialLayout = function MaterialLayout(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialLayout'] = MaterialLayout;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialLayout.prototype.Constant_ = {
	    MAX_WIDTH: '(max-width: 1024px)',
	    TAB_SCROLL_PIXELS: 100,
	    RESIZE_TIMEOUT: 100,
	    MENU_ICON: '&#xE5D2;',
	    CHEVRON_LEFT: 'chevron_left',
	    CHEVRON_RIGHT: 'chevron_right'
	};
	/**
	   * Keycodes, for code readability.
	   *
	   * @enum {number}
	   * @private
	   */
	MaterialLayout.prototype.Keycodes_ = {
	    ENTER: 13,
	    ESCAPE: 27,
	    SPACE: 32
	};
	/**
	   * Modes.
	   *
	   * @enum {number}
	   * @private
	   */
	MaterialLayout.prototype.Mode_ = {
	    STANDARD: 0,
	    SEAMED: 1,
	    WATERFALL: 2,
	    SCROLL: 3
	};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialLayout.prototype.CssClasses_ = {
	    CONTAINER: 'mdl-layout__container',
	    HEADER: 'mdl-layout__header',
	    DRAWER: 'mdl-layout__drawer',
	    CONTENT: 'mdl-layout__content',
	    DRAWER_BTN: 'mdl-layout__drawer-button',
	    ICON: 'material-icons',
	    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',
	    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',
	    RIPPLE: 'mdl-ripple',
	    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    HEADER_SEAMED: 'mdl-layout__header--seamed',
	    HEADER_WATERFALL: 'mdl-layout__header--waterfall',
	    HEADER_SCROLL: 'mdl-layout__header--scroll',
	    FIXED_HEADER: 'mdl-layout--fixed-header',
	    OBFUSCATOR: 'mdl-layout__obfuscator',
	    TAB_BAR: 'mdl-layout__tab-bar',
	    TAB_CONTAINER: 'mdl-layout__tab-bar-container',
	    TAB: 'mdl-layout__tab',
	    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',
	    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',
	    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',
	    PANEL: 'mdl-layout__tab-panel',
	    HAS_DRAWER: 'has-drawer',
	    HAS_TABS: 'has-tabs',
	    HAS_SCROLLING_HEADER: 'has-scrolling-header',
	    CASTING_SHADOW: 'is-casting-shadow',
	    IS_COMPACT: 'is-compact',
	    IS_SMALL_SCREEN: 'is-small-screen',
	    IS_DRAWER_OPEN: 'is-visible',
	    IS_ACTIVE: 'is-active',
	    IS_UPGRADED: 'is-upgraded',
	    IS_ANIMATING: 'is-animating',
	    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',
	    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'
	};
	/**
	   * Handles scrolling on the content.
	   *
	   * @private
	   */
	MaterialLayout.prototype.contentScrollHandler_ = function () {
	    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {
	        return;
	    }
	    var headerVisible = !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) || this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);
	    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {
	        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);
	        this.header_.classList.add(this.CssClasses_.IS_COMPACT);
	        if (headerVisible) {
	            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);
	        }
	    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {
	        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);
	        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);
	        if (headerVisible) {
	            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);
	        }
	    }
	};
	/**
	   * Handles a keyboard event on the drawer.
	   *
	   * @param {Event} evt The event that fired.
	   * @private
	   */
	MaterialLayout.prototype.keyboardEventHandler_ = function (evt) {
	    // Only react when the drawer is open.
	    if (evt.keyCode === this.Keycodes_.ESCAPE && this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {
	        this.toggleDrawer();
	    }
	};
	/**
	   * Handles changes in screen size.
	   *
	   * @private
	   */
	MaterialLayout.prototype.screenSizeHandler_ = function () {
	    if (this.screenSizeMediaQuery_.matches) {
	        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);
	    } else {
	        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);
	        // Collapse drawer (if any) when moving to a large screen size.
	        if (this.drawer_) {
	            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);
	            this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);
	        }
	    }
	};
	/**
	   * Handles events of drawer button.
	   *
	   * @param {Event} evt The event that fired.
	   * @private
	   */
	MaterialLayout.prototype.drawerToggleHandler_ = function (evt) {
	    if (evt && evt.type === 'keydown') {
	        if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {
	            // prevent scrolling in drawer nav
	            evt.preventDefault();
	        } else {
	            // prevent other keys
	            return;
	        }
	    }
	    this.toggleDrawer();
	};
	/**
	   * Handles (un)setting the `is-animating` class
	   *
	   * @private
	   */
	MaterialLayout.prototype.headerTransitionEndHandler_ = function () {
	    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);
	};
	/**
	   * Handles expanding the header on click
	   *
	   * @private
	   */
	MaterialLayout.prototype.headerClickHandler_ = function () {
	    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {
	        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);
	        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);
	    }
	};
	/**
	   * Reset tab state, dropping active classes
	   *
	   * @private
	   */
	MaterialLayout.prototype.resetTabState_ = function (tabBar) {
	    for (var k = 0; k < tabBar.length; k++) {
	        tabBar[k].classList.remove(this.CssClasses_.IS_ACTIVE);
	    }
	};
	/**
	   * Reset panel state, droping active classes
	   *
	   * @private
	   */
	MaterialLayout.prototype.resetPanelState_ = function (panels) {
	    for (var j = 0; j < panels.length; j++) {
	        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);
	    }
	};
	/**
	  * Toggle drawer state
	  *
	  * @public
	  */
	MaterialLayout.prototype.toggleDrawer = function () {
	    var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);
	    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);
	    this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);
	    // Set accessibility properties.
	    if (this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {
	        this.drawer_.setAttribute('aria-hidden', 'false');
	        drawerButton.setAttribute('aria-expanded', 'true');
	    } else {
	        this.drawer_.setAttribute('aria-hidden', 'true');
	        drawerButton.setAttribute('aria-expanded', 'false');
	    }
	};
	MaterialLayout.prototype['toggleDrawer'] = MaterialLayout.prototype.toggleDrawer;
	/**
	   * Initialize element.
	   */
	MaterialLayout.prototype.init = function () {
	    if (this.element_) {
	        var container = document.createElement('div');
	        container.classList.add(this.CssClasses_.CONTAINER);
	        var focusedElement = this.element_.querySelector(':focus');
	        this.element_.parentElement.insertBefore(container, this.element_);
	        this.element_.parentElement.removeChild(this.element_);
	        container.appendChild(this.element_);
	        if (focusedElement) {
	            focusedElement.focus();
	        }
	        var directChildren = this.element_.childNodes;
	        var numChildren = directChildren.length;
	        for (var c = 0; c < numChildren; c++) {
	            var child = directChildren[c];
	            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {
	                this.header_ = child;
	            }
	            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {
	                this.drawer_ = child;
	            }
	            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {
	                this.content_ = child;
	            }
	        }
	        window.addEventListener('pageshow', function (e) {
	            if (e.persisted) {
	                // when page is loaded from back/forward cache
	                // trigger repaint to let layout scroll in safari
	                this.element_.style.overflowY = 'hidden';
	                requestAnimationFrame(function () {
	                    this.element_.style.overflowY = '';
	                }.bind(this));
	            }
	        }.bind(this), false);
	        if (this.header_) {
	            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);
	        }
	        var mode = this.Mode_.STANDARD;
	        if (this.header_) {
	            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {
	                mode = this.Mode_.SEAMED;
	            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {
	                mode = this.Mode_.WATERFALL;
	                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));
	                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));
	            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {
	                mode = this.Mode_.SCROLL;
	                container.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);
	            }
	            if (mode === this.Mode_.STANDARD) {
	                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);
	                if (this.tabBar_) {
	                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);
	                }
	            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {
	                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);
	                if (this.tabBar_) {
	                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);
	                }
	            } else if (mode === this.Mode_.WATERFALL) {
	                // Add and remove shadows depending on scroll position.
	                // Also add/remove auxiliary class for styling of the compact version of
	                // the header.
	                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));
	                this.contentScrollHandler_();
	            }
	        }
	        // Add drawer toggling button to our layout, if we have an openable drawer.
	        if (this.drawer_) {
	            var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);
	            if (!drawerButton) {
	                drawerButton = document.createElement('div');
	                drawerButton.setAttribute('aria-expanded', 'false');
	                drawerButton.setAttribute('role', 'button');
	                drawerButton.setAttribute('tabindex', '0');
	                drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);
	                var drawerButtonIcon = document.createElement('i');
	                drawerButtonIcon.classList.add(this.CssClasses_.ICON);
	                drawerButtonIcon.innerHTML = this.Constant_.MENU_ICON;
	                drawerButton.appendChild(drawerButtonIcon);
	            }
	            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {
	                //If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.
	                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);
	            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {
	                //If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.
	                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);
	            }
	            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));
	            drawerButton.addEventListener('keydown', this.drawerToggleHandler_.bind(this));
	            // Add a class if the layout has a drawer, for altering the left padding.
	            // Adds the HAS_DRAWER to the elements since this.header_ may or may
	            // not be present.
	            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);
	            // If we have a fixed header, add the button to the header rather than
	            // the layout.
	            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {
	                this.header_.insertBefore(drawerButton, this.header_.firstChild);
	            } else {
	                this.element_.insertBefore(drawerButton, this.content_);
	            }
	            var obfuscator = document.createElement('div');
	            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);
	            this.element_.appendChild(obfuscator);
	            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));
	            this.obfuscator_ = obfuscator;
	            this.drawer_.addEventListener('keydown', this.keyboardEventHandler_.bind(this));
	            this.drawer_.setAttribute('aria-hidden', 'true');
	        }
	        // Keep an eye on screen size, and add/remove auxiliary class for styling
	        // of small screens.
	        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);
	        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));
	        this.screenSizeHandler_();
	        // Initialize tabs, if any.
	        if (this.header_ && this.tabBar_) {
	            this.element_.classList.add(this.CssClasses_.HAS_TABS);
	            var tabContainer = document.createElement('div');
	            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);
	            this.header_.insertBefore(tabContainer, this.tabBar_);
	            this.header_.removeChild(this.tabBar_);
	            var leftButton = document.createElement('div');
	            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);
	            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);
	            var leftButtonIcon = document.createElement('i');
	            leftButtonIcon.classList.add(this.CssClasses_.ICON);
	            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;
	            leftButton.appendChild(leftButtonIcon);
	            leftButton.addEventListener('click', function () {
	                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;
	            }.bind(this));
	            var rightButton = document.createElement('div');
	            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);
	            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);
	            var rightButtonIcon = document.createElement('i');
	            rightButtonIcon.classList.add(this.CssClasses_.ICON);
	            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;
	            rightButton.appendChild(rightButtonIcon);
	            rightButton.addEventListener('click', function () {
	                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;
	            }.bind(this));
	            tabContainer.appendChild(leftButton);
	            tabContainer.appendChild(this.tabBar_);
	            tabContainer.appendChild(rightButton);
	            // Add and remove tab buttons depending on scroll position and total
	            // window size.
	            var tabUpdateHandler = function () {
	                if (this.tabBar_.scrollLeft > 0) {
	                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);
	                } else {
	                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);
	                }
	                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {
	                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);
	                } else {
	                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);
	                }
	            }.bind(this);
	            this.tabBar_.addEventListener('scroll', tabUpdateHandler);
	            tabUpdateHandler();
	            // Update tabs when the window resizes.
	            var windowResizeHandler = function () {
	                // Use timeouts to make sure it doesn't happen too often.
	                if (this.resizeTimeoutId_) {
	                    clearTimeout(this.resizeTimeoutId_);
	                }
	                this.resizeTimeoutId_ = setTimeout(function () {
	                    tabUpdateHandler();
	                    this.resizeTimeoutId_ = null;
	                }.bind(this), this.Constant_.RESIZE_TIMEOUT);
	            }.bind(this);
	            window.addEventListener('resize', windowResizeHandler);
	            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {
	                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
	            }
	            // Select element tabs, document panels
	            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);
	            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);
	            // Create new tabs for each tab element
	            for (var i = 0; i < tabs.length; i++) {
	                new MaterialLayoutTab(tabs[i], tabs, panels, this);
	            }
	        }
	        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
	    }
	};
	/**
	   * Constructor for an individual tab.
	   *
	   * @constructor
	   * @param {HTMLElement} tab The HTML element for the tab.
	   * @param {!Array<HTMLElement>} tabs Array with HTML elements for all tabs.
	   * @param {!Array<HTMLElement>} panels Array with HTML elements for all panels.
	   * @param {MaterialLayout} layout The MaterialLayout object that owns the tab.
	   */
	function MaterialLayoutTab(tab, tabs, panels, layout) {
	    /**
	     * Auxiliary method to programmatically select a tab in the UI.
	     */
	    function selectTab() {
	        var href = tab.href.split('#')[1];
	        var panel = layout.content_.querySelector('#' + href);
	        layout.resetTabState_(tabs);
	        layout.resetPanelState_(panels);
	        tab.classList.add(layout.CssClasses_.IS_ACTIVE);
	        panel.classList.add(layout.CssClasses_.IS_ACTIVE);
	    }
	    if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {
	        var rippleContainer = document.createElement('span');
	        rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);
	        rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);
	        var ripple = document.createElement('span');
	        ripple.classList.add(layout.CssClasses_.RIPPLE);
	        rippleContainer.appendChild(ripple);
	        tab.appendChild(rippleContainer);
	    }
	    tab.addEventListener('click', function (e) {
	        if (tab.getAttribute('href').charAt(0) === '#') {
	            e.preventDefault();
	            selectTab();
	        }
	    });
	    tab.show = selectTab;
	}
	window['MaterialLayoutTab'] = MaterialLayoutTab;
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialLayout,
	    classAsString: 'MaterialLayout',
	    cssClass: 'mdl-js-layout'
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Data Table Card MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {Element} element The element that will be upgraded.
	   */
	var MaterialDataTable = function MaterialDataTable(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialDataTable'] = MaterialDataTable;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialDataTable.prototype.Constant_ = {};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialDataTable.prototype.CssClasses_ = {
	    DATA_TABLE: 'mdl-data-table',
	    SELECTABLE: 'mdl-data-table--selectable',
	    SELECT_ELEMENT: 'mdl-data-table__select',
	    IS_SELECTED: 'is-selected',
	    IS_UPGRADED: 'is-upgraded'
	};
	/**
	   * Generates and returns a function that toggles the selection state of a
	   * single row (or multiple rows).
	   *
	   * @param {Element} checkbox Checkbox that toggles the selection state.
	   * @param {Element} row Row to toggle when checkbox changes.
	   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.
	   * @private
	   */
	MaterialDataTable.prototype.selectRow_ = function (checkbox, row, opt_rows) {
	    if (row) {
	        return function () {
	            if (checkbox.checked) {
	                row.classList.add(this.CssClasses_.IS_SELECTED);
	            } else {
	                row.classList.remove(this.CssClasses_.IS_SELECTED);
	            }
	        }.bind(this);
	    }
	    if (opt_rows) {
	        return function () {
	            var i;
	            var el;
	            if (checkbox.checked) {
	                for (i = 0; i < opt_rows.length; i++) {
	                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');
	                    el['MaterialCheckbox'].check();
	                    opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);
	                }
	            } else {
	                for (i = 0; i < opt_rows.length; i++) {
	                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');
	                    el['MaterialCheckbox'].uncheck();
	                    opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);
	                }
	            }
	        }.bind(this);
	    }
	};
	/**
	   * Creates a checkbox for a single or or multiple rows and hooks up the
	   * event handling.
	   *
	   * @param {Element} row Row to toggle when checkbox changes.
	   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.
	   * @private
	   */
	MaterialDataTable.prototype.createCheckbox_ = function (row, opt_rows) {
	    var label = document.createElement('label');
	    var labelClasses = [
	        'mdl-checkbox',
	        'mdl-js-checkbox',
	        'mdl-js-ripple-effect',
	        this.CssClasses_.SELECT_ELEMENT
	    ];
	    label.className = labelClasses.join(' ');
	    var checkbox = document.createElement('input');
	    checkbox.type = 'checkbox';
	    checkbox.classList.add('mdl-checkbox__input');
	    if (row) {
	        checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);
	        checkbox.addEventListener('change', this.selectRow_(checkbox, row));
	    } else if (opt_rows) {
	        checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));
	    }
	    label.appendChild(checkbox);
	    componentHandler.upgradeElement(label, 'MaterialCheckbox');
	    return label;
	};
	/**
	   * Initialize element.
	   */
	MaterialDataTable.prototype.init = function () {
	    if (this.element_) {
	        var firstHeader = this.element_.querySelector('th');
	        var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));
	        var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));
	        var rows = bodyRows.concat(footRows);
	        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {
	            var th = document.createElement('th');
	            var headerCheckbox = this.createCheckbox_(null, rows);
	            th.appendChild(headerCheckbox);
	            firstHeader.parentElement.insertBefore(th, firstHeader);
	            for (var i = 0; i < rows.length; i++) {
	                var firstCell = rows[i].querySelector('td');
	                if (firstCell) {
	                    var td = document.createElement('td');
	                    if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {
	                        var rowCheckbox = this.createCheckbox_(rows[i]);
	                        td.appendChild(rowCheckbox);
	                    }
	                    rows[i].insertBefore(td, firstCell);
	                }
	            }
	            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
	        }
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialDataTable,
	    classAsString: 'MaterialDataTable',
	    cssClass: 'mdl-js-data-table'
	});
	/**
	 * @license
	 * Copyright 2015 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	   * Class constructor for Ripple MDL component.
	   * Implements MDL component design pattern defined at:
	   * https://github.com/jasonmayes/mdl-component-design-pattern
	   *
	   * @constructor
	   * @param {HTMLElement} element The element that will be upgraded.
	   */
	var MaterialRipple = function MaterialRipple(element) {
	    this.element_ = element;
	    // Initialize instance.
	    this.init();
	};
	window['MaterialRipple'] = MaterialRipple;
	/**
	   * Store constants in one place so they can be updated easily.
	   *
	   * @enum {string | number}
	   * @private
	   */
	MaterialRipple.prototype.Constant_ = {
	    INITIAL_SCALE: 'scale(0.0001, 0.0001)',
	    INITIAL_SIZE: '1px',
	    INITIAL_OPACITY: '0.4',
	    FINAL_OPACITY: '0',
	    FINAL_SCALE: ''
	};
	/**
	   * Store strings for class names defined by this component that are used in
	   * JavaScript. This allows us to simply change it in one place should we
	   * decide to modify at a later date.
	   *
	   * @enum {string}
	   * @private
	   */
	MaterialRipple.prototype.CssClasses_ = {
	    RIPPLE_CENTER: 'mdl-ripple--center',
	    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',
	    RIPPLE: 'mdl-ripple',
	    IS_ANIMATING: 'is-animating',
	    IS_VISIBLE: 'is-visible'
	};
	/**
	   * Handle mouse / finger down on element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialRipple.prototype.downHandler_ = function (event) {
	    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {
	        var rect = this.element_.getBoundingClientRect();
	        this.boundHeight = rect.height;
	        this.boundWidth = rect.width;
	        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;
	        this.rippleElement_.style.width = this.rippleSize_ + 'px';
	        this.rippleElement_.style.height = this.rippleSize_ + 'px';
	    }
	    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);
	    if (event.type === 'mousedown' && this.ignoringMouseDown_) {
	        this.ignoringMouseDown_ = false;
	    } else {
	        if (event.type === 'touchstart') {
	            this.ignoringMouseDown_ = true;
	        }
	        var frameCount = this.getFrameCount();
	        if (frameCount > 0) {
	            return;
	        }
	        this.setFrameCount(1);
	        var bound = event.currentTarget.getBoundingClientRect();
	        var x;
	        var y;
	        // Check if we are handling a keyboard click.
	        if (event.clientX === 0 && event.clientY === 0) {
	            x = Math.round(bound.width / 2);
	            y = Math.round(bound.height / 2);
	        } else {
	            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;
	            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;
	            x = Math.round(clientX - bound.left);
	            y = Math.round(clientY - bound.top);
	        }
	        this.setRippleXY(x, y);
	        this.setRippleStyles(true);
	        window.requestAnimationFrame(this.animFrameHandler.bind(this));
	    }
	};
	/**
	   * Handle mouse / finger up on element.
	   *
	   * @param {Event} event The event that fired.
	   * @private
	   */
	MaterialRipple.prototype.upHandler_ = function (event) {
	    // Don't fire for the artificial "mouseup" generated by a double-click.
	    if (event && event.detail !== 2) {
	        // Allow a repaint to occur before removing this class, so the animation
	        // shows for tap events, which seem to trigger a mouseup too soon after
	        // mousedown.
	        window.setTimeout(function () {
	            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);
	        }.bind(this), 0);
	    }
	};
	/**
	   * Initialize element.
	   */
	MaterialRipple.prototype.init = function () {
	    if (this.element_) {
	        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);
	        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {
	            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);
	            this.frameCount_ = 0;
	            this.rippleSize_ = 0;
	            this.x_ = 0;
	            this.y_ = 0;
	            // Touch start produces a compat mouse down event, which would cause a
	            // second ripples. To avoid that, we use this property to ignore the first
	            // mouse down after a touch start.
	            this.ignoringMouseDown_ = false;
	            this.boundDownHandler = this.downHandler_.bind(this);
	            this.element_.addEventListener('mousedown', this.boundDownHandler);
	            this.element_.addEventListener('touchstart', this.boundDownHandler);
	            this.boundUpHandler = this.upHandler_.bind(this);
	            this.element_.addEventListener('mouseup', this.boundUpHandler);
	            this.element_.addEventListener('mouseleave', this.boundUpHandler);
	            this.element_.addEventListener('touchend', this.boundUpHandler);
	            this.element_.addEventListener('blur', this.boundUpHandler);
	            /**
	         * Getter for frameCount_.
	         * @return {number} the frame count.
	         */
	            this.getFrameCount = function () {
	                return this.frameCount_;
	            };
	            /**
	         * Setter for frameCount_.
	         * @param {number} fC the frame count.
	         */
	            this.setFrameCount = function (fC) {
	                this.frameCount_ = fC;
	            };
	            /**
	         * Getter for rippleElement_.
	         * @return {Element} the ripple element.
	         */
	            this.getRippleElement = function () {
	                return this.rippleElement_;
	            };
	            /**
	         * Sets the ripple X and Y coordinates.
	         * @param  {number} newX the new X coordinate
	         * @param  {number} newY the new Y coordinate
	         */
	            this.setRippleXY = function (newX, newY) {
	                this.x_ = newX;
	                this.y_ = newY;
	            };
	            /**
	         * Sets the ripple styles.
	         * @param  {boolean} start whether or not this is the start frame.
	         */
	            this.setRippleStyles = function (start) {
	                if (this.rippleElement_ !== null) {
	                    var transformString;
	                    var scale;
	                    var size;
	                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';
	                    if (start) {
	                        scale = this.Constant_.INITIAL_SCALE;
	                        size = this.Constant_.INITIAL_SIZE;
	                    } else {
	                        scale = this.Constant_.FINAL_SCALE;
	                        size = this.rippleSize_ + 'px';
	                        if (recentering) {
	                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';
	                        }
	                    }
	                    transformString = 'translate(-50%, -50%) ' + offset + scale;
	                    this.rippleElement_.style.webkitTransform = transformString;
	                    this.rippleElement_.style.msTransform = transformString;
	                    this.rippleElement_.style.transform = transformString;
	                    if (start) {
	                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);
	                    } else {
	                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);
	                    }
	                }
	            };
	            /**
	         * Handles an animation frame.
	         */
	            this.animFrameHandler = function () {
	                if (this.frameCount_-- > 0) {
	                    window.requestAnimationFrame(this.animFrameHandler.bind(this));
	                } else {
	                    this.setRippleStyles(false);
	                }
	            };
	        }
	    }
	};
	// The component registers itself. It can assume componentHandler is available
	// in the global scope.
	componentHandler.register({
	    constructor: MaterialRipple,
	    classAsString: 'MaterialRipple',
	    cssClass: 'mdl-js-ripple-effect',
	    widget: false
	});
	}());


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _translation = __webpack_require__(142);
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Translation = function Translation(Component) {
	    return function (_Component) {
	        _inherits(TranslatedComponent, _Component);
	
	        function TranslatedComponent(props) {
	            _classCallCheck(this, TranslatedComponent);
	
	            var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	            _this.i18n = _translation.translate;
	            return _this;
	        }
	
	        return TranslatedComponent;
	    }(Component);
	};
	
	exports.default = Translation;
	module.exports = exports['default'];

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _function = __webpack_require__(226);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Component base is an annotation used to combine all the standard annotation of a component.
	 * @return {function} - The annotation.
	 */
	var componentBase = (0, _function.flow)(_translation2.default);
	
	exports.default = componentBase;
	module.exports = exports['default'];

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'after': __webpack_require__(227),
	  'ary': __webpack_require__(228),
	  'backflow': __webpack_require__(254),
	  'before': __webpack_require__(257),
	  'bind': __webpack_require__(258),
	  'bindAll': __webpack_require__(260),
	  'bindKey': __webpack_require__(265),
	  'compose': __webpack_require__(266),
	  'curry': __webpack_require__(267),
	  'curryRight': __webpack_require__(269),
	  'debounce': __webpack_require__(270),
	  'defer': __webpack_require__(271),
	  'delay': __webpack_require__(273),
	  'flow': __webpack_require__(274),
	  'flowRight': __webpack_require__(255),
	  'memoize': __webpack_require__(275),
	  'modArgs': __webpack_require__(281),
	  'negate': __webpack_require__(284),
	  'once': __webpack_require__(285),
	  'partial': __webpack_require__(286),
	  'partialRight': __webpack_require__(288),
	  'rearg': __webpack_require__(289),
	  'restParam': __webpack_require__(259),
	  'spread': __webpack_require__(290),
	  'throttle': __webpack_require__(291),
	  'wrap': __webpack_require__(292)
	};


/***/ }),
/* 227 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsFinite = global.isFinite;
	
	/**
	 * The opposite of `_.before`; this method creates a function that invokes
	 * `func` once it's called `n` or more times.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {number} n The number of calls before `func` is invoked.
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new restricted function.
	 * @example
	 *
	 * var saves = ['profile', 'settings'];
	 *
	 * var done = _.after(saves.length, function() {
	 *   console.log('done saving!');
	 * });
	 *
	 * _.forEach(saves, function(type) {
	 *   asyncSave({ 'type': type, 'complete': done });
	 * });
	 * // => logs 'done saving!' after the two async saves have completed
	 */
	function after(n, func) {
	  if (typeof func != 'function') {
	    if (typeof n == 'function') {
	      var temp = n;
	      n = func;
	      func = temp;
	    } else {
	      throw new TypeError(FUNC_ERROR_TEXT);
	    }
	  }
	  n = nativeIsFinite(n = +n) ? n : 0;
	  return function() {
	    if (--n < 1) {
	      return func.apply(this, arguments);
	    }
	  };
	}
	
	module.exports = after;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrapper = __webpack_require__(229),
	    isIterateeCall = __webpack_require__(180);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var ARY_FLAG = 128;
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a function that accepts up to `n` arguments ignoring any
	 * additional arguments.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} [n=func.length] The arity cap.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	 * // => [6, 8, 10]
	 */
	function ary(func, n, guard) {
	  if (guard && isIterateeCall(func, n, guard)) {
	    n = undefined;
	  }
	  n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	  return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	}
	
	module.exports = ary;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetData = __webpack_require__(230),
	    createBindWrapper = __webpack_require__(232),
	    createHybridWrapper = __webpack_require__(235),
	    createPartialWrapper = __webpack_require__(252),
	    getData = __webpack_require__(241),
	    mergeData = __webpack_require__(253),
	    setData = __webpack_require__(250);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1,
	    BIND_KEY_FLAG = 2,
	    PARTIAL_FLAG = 32,
	    PARTIAL_RIGHT_FLAG = 64;
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to reference.
	 * @param {number} bitmask The bitmask of flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - `_.bind`
	 *     2 - `_.bindKey`
	 *     4 - `_.curry` or `_.curryRight` of a bound function
	 *     8 - `_.curry`
	 *    16 - `_.curryRight`
	 *    32 - `_.partial`
	 *    64 - `_.partialRight`
	 *   128 - `_.rearg`
	 *   256 - `_.ary`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & BIND_KEY_FLAG;
	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var length = partials ? partials.length : 0;
	  if (!length) {
	    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	    partials = holders = undefined;
	  }
	  length -= (holders ? holders.length : 0);
	  if (bitmask & PARTIAL_RIGHT_FLAG) {
	    var partialsRight = partials,
	        holdersRight = holders;
	
	    partials = holders = undefined;
	  }
	  var data = isBindKey ? undefined : getData(func),
	      newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
	
	  if (data) {
	    mergeData(newData, data);
	    bitmask = newData[1];
	    arity = newData[9];
	  }
	  newData[9] = arity == null
	    ? (isBindKey ? 0 : func.length)
	    : (nativeMax(arity - length, 0) || 0);
	
	  if (bitmask == BIND_FLAG) {
	    var result = createBindWrapper(newData[0], newData[2]);
	  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	    result = createPartialWrapper.apply(undefined, newData);
	  } else {
	    result = createHybridWrapper.apply(undefined, newData);
	  }
	  var setter = data ? baseSetData : setData;
	  return setter(result, newData);
	}
	
	module.exports = createWrapper;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(179),
	    metaMap = __webpack_require__(231);
	
	/**
	 * The base implementation of `setData` without support for hot loop detection.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetData = !metaMap ? identity : function(func, data) {
	  metaMap.set(func, data);
	  return func;
	};
	
	module.exports = baseSetData;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var getNative = __webpack_require__(156);
	
	/** Native method references. */
	var WeakMap = getNative(global, 'WeakMap');
	
	/** Used to store function metadata. */
	var metaMap = WeakMap && new WeakMap;
	
	module.exports = metaMap;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var createCtorWrapper = __webpack_require__(233);
	
	/**
	 * Creates a function that wraps `func` and invokes it with the `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new bound function.
	 */
	function createBindWrapper(func, thisArg) {
	  var Ctor = createCtorWrapper(func);
	
	  function wrapper() {
	    var fn = (this && this !== global && this instanceof wrapper) ? Ctor : func;
	    return fn.apply(thisArg, arguments);
	  }
	  return wrapper;
	}
	
	module.exports = createBindWrapper;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(234),
	    isObject = __webpack_require__(159);
	
	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCtorWrapper(Ctor) {
	  return function() {
	    // Use a `switch` statement to work with class constructors.
	    // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;
	    switch (args.length) {
	      case 0: return new Ctor;
	      case 1: return new Ctor(args[0]);
	      case 2: return new Ctor(args[0], args[1]);
	      case 3: return new Ctor(args[0], args[1], args[2]);
	      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }
	    var thisBinding = baseCreate(Ctor.prototype),
	        result = Ctor.apply(thisBinding, args);
	
	    // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.
	    return isObject(result) ? result : thisBinding;
	  };
	}
	
	module.exports = createCtorWrapper;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(prototype) {
	    if (isObject(prototype)) {
	      object.prototype = prototype;
	      var result = new object;
	      object.prototype = undefined;
	    }
	    return result || {};
	  };
	}());
	
	module.exports = baseCreate;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var arrayCopy = __webpack_require__(151),
	    composeArgs = __webpack_require__(236),
	    composeArgsRight = __webpack_require__(237),
	    createCtorWrapper = __webpack_require__(233),
	    isLaziable = __webpack_require__(238),
	    reorder = __webpack_require__(248),
	    replaceHolders = __webpack_require__(249),
	    setData = __webpack_require__(250);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1,
	    BIND_KEY_FLAG = 2,
	    CURRY_BOUND_FLAG = 4,
	    CURRY_FLAG = 8,
	    CURRY_RIGHT_FLAG = 16,
	    PARTIAL_FLAG = 32,
	    PARTIAL_RIGHT_FLAG = 64,
	    ARY_FLAG = 128;
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a function that wraps `func` and invokes it with optional `this`
	 * binding of, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to reference.
	 * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & ARY_FLAG,
	      isBind = bitmask & BIND_FLAG,
	      isBindKey = bitmask & BIND_KEY_FLAG,
	      isCurry = bitmask & CURRY_FLAG,
	      isCurryBound = bitmask & CURRY_BOUND_FLAG,
	      isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	      Ctor = isBindKey ? undefined : createCtorWrapper(func);
	
	  function wrapper() {
	    // Avoid `arguments` object use disqualifying optimizations by
	    // converting it to an array before providing it to other functions.
	    var length = arguments.length,
	        index = length,
	        args = Array(length);
	
	    while (index--) {
	      args[index] = arguments[index];
	    }
	    if (partials) {
	      args = composeArgs(args, partials, holders);
	    }
	    if (partialsRight) {
	      args = composeArgsRight(args, partialsRight, holdersRight);
	    }
	    if (isCurry || isCurryRight) {
	      var placeholder = wrapper.placeholder,
	          argsHolders = replaceHolders(args, placeholder);
	
	      length -= argsHolders.length;
	      if (length < arity) {
	        var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	            newArity = nativeMax(arity - length, 0),
	            newsHolders = isCurry ? argsHolders : undefined,
	            newHoldersRight = isCurry ? undefined : argsHolders,
	            newPartials = isCurry ? args : undefined,
	            newPartialsRight = isCurry ? undefined : args;
	
	        bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
	
	        if (!isCurryBound) {
	          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	        }
	        var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	            result = createHybridWrapper.apply(undefined, newData);
	
	        if (isLaziable(func)) {
	          setData(result, newData);
	        }
	        result.placeholder = placeholder;
	        return result;
	      }
	    }
	    var thisBinding = isBind ? thisArg : this,
	        fn = isBindKey ? thisBinding[func] : func;
	
	    if (argPos) {
	      args = reorder(args, argPos);
	    }
	    if (isAry && ary < args.length) {
	      args.length = ary;
	    }
	    if (this && this !== global && this instanceof wrapper) {
	      fn = Ctor || createCtorWrapper(func);
	    }
	    return fn.apply(thisBinding, args);
	  }
	  return wrapper;
	}
	
	module.exports = createHybridWrapper;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 236 */
/***/ (function(module, exports) {

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array|Object} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgs(args, partials, holders) {
	  var holdersLength = holders.length,
	      argsIndex = -1,
	      argsLength = nativeMax(args.length - holdersLength, 0),
	      leftIndex = -1,
	      leftLength = partials.length,
	      result = Array(leftLength + argsLength);
	
	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }
	  while (++argsIndex < holdersLength) {
	    result[holders[argsIndex]] = args[argsIndex];
	  }
	  while (argsLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }
	  return result;
	}
	
	module.exports = composeArgs;


/***/ }),
/* 237 */
/***/ (function(module, exports) {

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array|Object} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgsRight(args, partials, holders) {
	  var holdersIndex = -1,
	      holdersLength = holders.length,
	      argsIndex = -1,
	      argsLength = nativeMax(args.length - holdersLength, 0),
	      rightIndex = -1,
	      rightLength = partials.length,
	      result = Array(argsLength + rightLength);
	
	  while (++argsIndex < argsLength) {
	    result[argsIndex] = args[argsIndex];
	  }
	  var offset = argsIndex;
	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }
	  while (++holdersIndex < holdersLength) {
	    result[offset + holders[holdersIndex]] = args[argsIndex++];
	  }
	  return result;
	}
	
	module.exports = composeArgsRight;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var LazyWrapper = __webpack_require__(239),
	    getData = __webpack_require__(241),
	    getFuncName = __webpack_require__(243),
	    lodash = __webpack_require__(245);
	
	/**
	 * Checks if `func` has a lazy counterpart.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	 */
	function isLaziable(func) {
	  var funcName = getFuncName(func),
	      other = lodash[funcName];
	
	  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	    return false;
	  }
	  if (func === other) {
	    return true;
	  }
	  var data = getData(other);
	  return !!data && func === data[0];
	}
	
	module.exports = isLaziable;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(234),
	    baseLodash = __webpack_require__(240);
	
	/** Used as references for `-Infinity` and `Infinity`. */
	var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
	
	/**
	 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 */
	function LazyWrapper(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = POSITIVE_INFINITY;
	  this.__views__ = [];
	}
	
	LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	LazyWrapper.prototype.constructor = LazyWrapper;
	
	module.exports = LazyWrapper;


/***/ }),
/* 240 */
/***/ (function(module, exports) {

	/**
	 * The function whose prototype all chaining wrappers inherit from.
	 *
	 * @private
	 */
	function baseLodash() {
	  // No operation performed.
	}
	
	module.exports = baseLodash;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	var metaMap = __webpack_require__(231),
	    noop = __webpack_require__(242);
	
	/**
	 * Gets metadata for `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {*} Returns the metadata for `func`.
	 */
	var getData = !metaMap ? noop : function(func) {
	  return metaMap.get(func);
	};
	
	module.exports = getData;


/***/ }),
/* 242 */
/***/ (function(module, exports) {

	/**
	 * A no-operation function that returns `undefined` regardless of the
	 * arguments it receives.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.noop(object) === undefined;
	 * // => true
	 */
	function noop() {
	  // No operation performed.
	}
	
	module.exports = noop;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	var realNames = __webpack_require__(244);
	
	/**
	 * Gets the name of `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {string} Returns the function name.
	 */
	function getFuncName(func) {
	  var result = (func.name + ''),
	      array = realNames[result],
	      length = array ? array.length : 0;
	
	  while (length--) {
	    var data = array[length],
	        otherFunc = data.func;
	    if (otherFunc == null || otherFunc == func) {
	      return data.name;
	    }
	  }
	  return result;
	}
	
	module.exports = getFuncName;


/***/ }),
/* 244 */
/***/ (function(module, exports) {

	/** Used to lookup unminified function names. */
	var realNames = {};
	
	module.exports = realNames;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var LazyWrapper = __webpack_require__(239),
	    LodashWrapper = __webpack_require__(246),
	    baseLodash = __webpack_require__(240),
	    isArray = __webpack_require__(167),
	    isObjectLike = __webpack_require__(160),
	    wrapperClone = __webpack_require__(247);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	 * Methods that operate on and return arrays, collections, and functions can
	 * be chained together. Methods that retrieve a single value or may return a
	 * primitive value will automatically end the chain returning the unwrapped
	 * value. Explicit chaining may be enabled using `_.chain`. The execution of
	 * chained methods is lazy, that is, execution is deferred until `_#value`
	 * is implicitly or explicitly called.
	 *
	 * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	 * fusion is an optimization strategy which merge iteratee calls; this can help
	 * to avoid the creation of intermediate data structures and greatly reduce the
	 * number of iteratee executions.
	 *
	 * Chaining is supported in custom builds as long as the `_#value` method is
	 * directly or indirectly included in the build.
	 *
	 * In addition to lodash methods, wrappers have `Array` and `String` methods.
	 *
	 * The wrapper `Array` methods are:
	 * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	 * `splice`, and `unshift`
	 *
	 * The wrapper `String` methods are:
	 * `replace` and `split`
	 *
	 * The wrapper methods that support shortcut fusion are:
	 * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	 * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	 * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	 * and `where`
	 *
	 * The chainable wrapper methods are:
	 * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	 * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	 * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	 * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	 * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	 * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	 * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	 * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	 * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	 * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	 * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	 * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	 * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	 * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	 * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	 * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	 * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	 *
	 * The wrapper methods that are **not** chainable by default are:
	 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	 * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	 * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	 * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	 * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	 * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	 * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	 * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	 * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	 * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	 * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	 * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	 * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	 * `unescape`, `uniqueId`, `value`, and `words`
	 *
	 * The wrapper method `sample` will return a wrapped value when `n` is provided,
	 * otherwise an unwrapped value is returned.
	 *
	 * @name _
	 * @constructor
	 * @category Chain
	 * @param {*} value The value to wrap in a `lodash` instance.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * var wrapped = _([1, 2, 3]);
	 *
	 * // returns an unwrapped value
	 * wrapped.reduce(function(total, n) {
	 *   return total + n;
	 * });
	 * // => 6
	 *
	 * // returns a wrapped value
	 * var squares = wrapped.map(function(n) {
	 *   return n * n;
	 * });
	 *
	 * _.isArray(squares);
	 * // => false
	 *
	 * _.isArray(squares.value());
	 * // => true
	 */
	function lodash(value) {
	  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	    if (value instanceof LodashWrapper) {
	      return value;
	    }
	    if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	      return wrapperClone(value);
	    }
	  }
	  return new LodashWrapper(value);
	}
	
	// Ensure wrappers are instances of `baseLodash`.
	lodash.prototype = baseLodash.prototype;
	
	module.exports = lodash;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(234),
	    baseLodash = __webpack_require__(240);
	
	/**
	 * The base constructor for creating `lodash` wrapper objects.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	 * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	 */
	function LodashWrapper(value, chainAll, actions) {
	  this.__wrapped__ = value;
	  this.__actions__ = actions || [];
	  this.__chain__ = !!chainAll;
	}
	
	LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	LodashWrapper.prototype.constructor = LodashWrapper;
	
	module.exports = LodashWrapper;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	var LazyWrapper = __webpack_require__(239),
	    LodashWrapper = __webpack_require__(246),
	    arrayCopy = __webpack_require__(151);
	
	/**
	 * Creates a clone of `wrapper`.
	 *
	 * @private
	 * @param {Object} wrapper The wrapper to clone.
	 * @returns {Object} Returns the cloned wrapper.
	 */
	function wrapperClone(wrapper) {
	  return wrapper instanceof LazyWrapper
	    ? wrapper.clone()
	    : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	}
	
	module.exports = wrapperClone;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(151),
	    isIndex = __webpack_require__(168);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;
	
	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */
	function reorder(array, indexes) {
	  var arrLength = array.length,
	      length = nativeMin(indexes.length, arrLength),
	      oldArray = arrayCopy(array);
	
	  while (length--) {
	    var index = indexes[length];
	    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }
	  return array;
	}
	
	module.exports = reorder;


/***/ }),
/* 249 */
/***/ (function(module, exports) {

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';
	
	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders(array, placeholder) {
	  var index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	
	  while (++index < length) {
	    if (array[index] === placeholder) {
	      array[index] = PLACEHOLDER;
	      result[++resIndex] = index;
	    }
	  }
	  return result;
	}
	
	module.exports = replaceHolders;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetData = __webpack_require__(230),
	    now = __webpack_require__(251);
	
	/** Used to detect when a function becomes hot. */
	var HOT_COUNT = 150,
	    HOT_SPAN = 16;
	
	/**
	 * Sets metadata for `func`.
	 *
	 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	 * period of time, it will trip its breaker and transition to an identity function
	 * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	 * for more details.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var setData = (function() {
	  var count = 0,
	      lastCalled = 0;
	
	  return function(key, value) {
	    var stamp = now(),
	        remaining = HOT_SPAN - (stamp - lastCalled);
	
	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return key;
	      }
	    } else {
	      count = 0;
	    }
	    return baseSetData(key, value);
	  };
	}());
	
	module.exports = setData;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(156);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeNow = getNative(Date, 'now');
	
	/**
	 * Gets the number of milliseconds that have elapsed since the Unix epoch
	 * (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @category Date
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => logs the number of milliseconds it took for the deferred function to be invoked
	 */
	var now = nativeNow || function() {
	  return new Date().getTime();
	};
	
	module.exports = now;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var createCtorWrapper = __webpack_require__(233);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1;
	
	/**
	 * Creates a function that wraps `func` and invokes it with the optional `this`
	 * binding of `thisArg` and the `partials` prepended to those provided to
	 * the wrapper.
	 *
	 * @private
	 * @param {Function} func The function to partially apply arguments to.
	 * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to the new function.
	 * @returns {Function} Returns the new bound function.
	 */
	function createPartialWrapper(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & BIND_FLAG,
	      Ctor = createCtorWrapper(func);
	
	  function wrapper() {
	    // Avoid `arguments` object use disqualifying optimizations by
	    // converting it to an array before providing it `func`.
	    var argsIndex = -1,
	        argsLength = arguments.length,
	        leftIndex = -1,
	        leftLength = partials.length,
	        args = Array(leftLength + argsLength);
	
	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }
	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }
	    var fn = (this && this !== global && this instanceof wrapper) ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, args);
	  }
	  return wrapper;
	}
	
	module.exports = createPartialWrapper;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(151),
	    composeArgs = __webpack_require__(236),
	    composeArgsRight = __webpack_require__(237),
	    replaceHolders = __webpack_require__(249);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1,
	    CURRY_BOUND_FLAG = 4,
	    CURRY_FLAG = 8,
	    ARY_FLAG = 128,
	    REARG_FLAG = 256;
	
	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;
	
	/**
	 * Merges the function metadata of `source` into `data`.
	 *
	 * Merging metadata reduces the number of wrappers required to invoke a function.
	 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	 * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	 * augment function arguments, making the order in which they are executed important,
	 * preventing the merging of metadata. However, we make an exception for a safe
	 * common case where curried functions have `_.ary` and or `_.rearg` applied.
	 *
	 * @private
	 * @param {Array} data The destination metadata.
	 * @param {Array} source The source metadata.
	 * @returns {Array} Returns `data`.
	 */
	function mergeData(data, source) {
	  var bitmask = data[1],
	      srcBitmask = source[1],
	      newBitmask = bitmask | srcBitmask,
	      isCommon = newBitmask < ARY_FLAG;
	
	  var isCombo =
	    (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	    (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	    (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);
	
	  // Exit early if metadata can't be merged.
	  if (!(isCommon || isCombo)) {
	    return data;
	  }
	  // Use source `thisArg` if available.
	  if (srcBitmask & BIND_FLAG) {
	    data[2] = source[2];
	    // Set when currying a bound function.
	    newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	  }
	  // Compose partial arguments.
	  var value = source[3];
	  if (value) {
	    var partials = data[3];
	    data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	  }
	  // Compose partial right arguments.
	  value = source[5];
	  if (value) {
	    partials = data[5];
	    data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	  }
	  // Use source `argPos` if available.
	  value = source[7];
	  if (value) {
	    data[7] = arrayCopy(value);
	  }
	  // Use source `ary` if it's smaller.
	  if (srcBitmask & ARY_FLAG) {
	    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	  }
	  // Use source `arity` if one is not provided.
	  if (data[9] == null) {
	    data[9] = source[9];
	  }
	  // Use source `func` and merge bitmasks.
	  data[0] = source[0];
	  data[1] = newBitmask;
	
	  return data;
	}
	
	module.exports = mergeData;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(255);


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	var createFlow = __webpack_require__(256);
	
	/**
	 * This method is like `_.flow` except that it creates a function that
	 * invokes the provided functions from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @alias backflow, compose
	 * @category Function
	 * @param {...Function} [funcs] Functions to invoke.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var addSquare = _.flowRight(square, _.add);
	 * addSquare(1, 2);
	 * // => 9
	 */
	var flowRight = createFlow(true);
	
	module.exports = flowRight;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	var LodashWrapper = __webpack_require__(246),
	    getData = __webpack_require__(241),
	    getFuncName = __webpack_require__(243),
	    isArray = __webpack_require__(167),
	    isLaziable = __webpack_require__(238);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var CURRY_FLAG = 8,
	    PARTIAL_FLAG = 32,
	    ARY_FLAG = 128,
	    REARG_FLAG = 256;
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a `_.flow` or `_.flowRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new flow function.
	 */
	function createFlow(fromRight) {
	  return function() {
	    var wrapper,
	        length = arguments.length,
	        index = fromRight ? length : -1,
	        leftIndex = 0,
	        funcs = Array(length);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      var func = funcs[leftIndex++] = arguments[index];
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	        wrapper = new LodashWrapper([], true);
	      }
	    }
	    index = wrapper ? -1 : length;
	    while (++index < length) {
	      func = funcs[index];
	
	      var funcName = getFuncName(func),
	          data = funcName == 'wrapper' ? getData(func) : undefined;
	
	      if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	      } else {
	        wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	      }
	    }
	    return function() {
	      var args = arguments,
	          value = args[0];
	
	      if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	        return wrapper.plant(value).value();
	      }
	      var index = 0,
	          result = length ? funcs[index].apply(this, args) : value;
	
	      while (++index < length) {
	        result = funcs[index].call(this, result);
	      }
	      return result;
	    };
	  };
	}
	
	module.exports = createFlow;


/***/ }),
/* 257 */
/***/ (function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that invokes `func`, with the `this` binding and arguments
	 * of the created function, while it's called less than `n` times. Subsequent
	 * calls to the created function return the result of the last `func` invocation.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {number} n The number of calls at which `func` is no longer invoked.
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new restricted function.
	 * @example
	 *
	 * jQuery('#add').on('click', _.before(5, addContactToList));
	 * // => allows adding up to 4 contacts to the list
	 */
	function before(n, func) {
	  var result;
	  if (typeof func != 'function') {
	    if (typeof n == 'function') {
	      var temp = n;
	      n = func;
	      func = temp;
	    } else {
	      throw new TypeError(FUNC_ERROR_TEXT);
	    }
	  }
	  return function() {
	    if (--n > 0) {
	      result = func.apply(this, arguments);
	    }
	    if (n <= 1) {
	      func = undefined;
	    }
	    return result;
	  };
	}
	
	module.exports = before;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrapper = __webpack_require__(229),
	    replaceHolders = __webpack_require__(249),
	    restParam = __webpack_require__(259);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1,
	    PARTIAL_FLAG = 32;
	
	/**
	 * Creates a function that invokes `func` with the `this` binding of `thisArg`
	 * and prepends any additional `_.bind` arguments to those provided to the
	 * bound function.
	 *
	 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** Unlike native `Function#bind` this method does not set the "length"
	 * property of bound functions.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new bound function.
	 * @example
	 *
	 * var greet = function(greeting, punctuation) {
	 *   return greeting + ' ' + this.user + punctuation;
	 * };
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * var bound = _.bind(greet, object, 'hi');
	 * bound('!');
	 * // => 'hi fred!'
	 *
	 * // using placeholders
	 * var bound = _.bind(greet, object, _, '!');
	 * bound('hi');
	 * // => 'hi fred!'
	 */
	var bind = restParam(function(func, thisArg, partials) {
	  var bitmask = BIND_FLAG;
	  if (partials.length) {
	    var holders = replaceHolders(partials, bind.placeholder);
	    bitmask |= PARTIAL_FLAG;
	  }
	  return createWrapper(func, bitmask, thisArg, partials, holders);
	});
	
	// Assign default placeholders.
	bind.placeholder = {};
	
	module.exports = bind;


/***/ }),
/* 259 */
/***/ (function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);
	
	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}
	
	module.exports = restParam;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261),
	    createWrapper = __webpack_require__(229),
	    functions = __webpack_require__(263),
	    restParam = __webpack_require__(259);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1;
	
	/**
	 * Binds methods of an object to the object itself, overwriting the existing
	 * method. Method names may be specified as individual arguments or as arrays
	 * of method names. If no method names are provided all enumerable function
	 * properties, own and inherited, of `object` are bound.
	 *
	 * **Note:** This method does not set the "length" property of bound functions.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Object} object The object to bind and assign the bound methods to.
	 * @param {...(string|string[])} [methodNames] The object method names to bind,
	 *  specified as individual method names or arrays of method names.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var view = {
	 *   'label': 'docs',
	 *   'onClick': function() {
	 *     console.log('clicked ' + this.label);
	 *   }
	 * };
	 *
	 * _.bindAll(view);
	 * jQuery('#docs').on('click', view.onClick);
	 * // => logs 'clicked docs' when the element is clicked
	 */
	var bindAll = restParam(function(object, methodNames) {
	  methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);
	
	  var index = -1,
	      length = methodNames.length;
	
	  while (++index < length) {
	    var key = methodNames[index];
	    object[key] = createWrapper(object[key], BIND_FLAG, object);
	  }
	  return object;
	});
	
	module.exports = bindAll;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(262),
	    isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(167),
	    isArrayLike = __webpack_require__(161),
	    isObjectLike = __webpack_require__(160);
	
	/**
	 * The base implementation of `_.flatten` with added support for restricting
	 * flattening and specifying the start index.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);
	
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    var value = array[index];
	    if (isObjectLike(value) && isArrayLike(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = baseFlatten;


/***/ }),
/* 262 */
/***/ (function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;
	
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	
	module.exports = arrayPush;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFunctions = __webpack_require__(264),
	    keysIn = __webpack_require__(169);
	
	/**
	 * Creates an array of function property names from all enumerable properties,
	 * own and inherited, of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @alias methods
	 * @category Object
	 * @param {Object} object The object to inspect.
	 * @returns {Array} Returns the new array of property names.
	 * @example
	 *
	 * _.functions(_);
	 * // => ['after', 'ary', 'assign', ...]
	 */
	function functions(object) {
	  return baseFunctions(object, keysIn(object));
	}
	
	module.exports = functions;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(158);
	
	/**
	 * The base implementation of `_.functions` which creates an array of
	 * `object` function property names filtered from those provided.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} props The property names to filter.
	 * @returns {Array} Returns the new array of filtered property names.
	 */
	function baseFunctions(object, props) {
	  var index = -1,
	      length = props.length,
	      resIndex = -1,
	      result = [];
	
	  while (++index < length) {
	    var key = props[index];
	    if (isFunction(object[key])) {
	      result[++resIndex] = key;
	    }
	  }
	  return result;
	}
	
	module.exports = baseFunctions;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrapper = __webpack_require__(229),
	    replaceHolders = __webpack_require__(249),
	    restParam = __webpack_require__(259);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var BIND_FLAG = 1,
	    BIND_KEY_FLAG = 2,
	    PARTIAL_FLAG = 32;
	
	/**
	 * Creates a function that invokes the method at `object[key]` and prepends
	 * any additional `_.bindKey` arguments to those provided to the bound function.
	 *
	 * This method differs from `_.bind` by allowing bound functions to reference
	 * methods that may be redefined or don't yet exist.
	 * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	 * for more details.
	 *
	 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Object} object The object the method belongs to.
	 * @param {string} key The key of the method.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new bound function.
	 * @example
	 *
	 * var object = {
	 *   'user': 'fred',
	 *   'greet': function(greeting, punctuation) {
	 *     return greeting + ' ' + this.user + punctuation;
	 *   }
	 * };
	 *
	 * var bound = _.bindKey(object, 'greet', 'hi');
	 * bound('!');
	 * // => 'hi fred!'
	 *
	 * object.greet = function(greeting, punctuation) {
	 *   return greeting + 'ya ' + this.user + punctuation;
	 * };
	 *
	 * bound('!');
	 * // => 'hiya fred!'
	 *
	 * // using placeholders
	 * var bound = _.bindKey(object, 'greet', _, '!');
	 * bound('hi');
	 * // => 'hiya fred!'
	 */
	var bindKey = restParam(function(object, key, partials) {
	  var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	  if (partials.length) {
	    var holders = replaceHolders(partials, bindKey.placeholder);
	    bitmask |= PARTIAL_FLAG;
	  }
	  return createWrapper(key, bitmask, object, partials, holders);
	});
	
	// Assign default placeholders.
	bindKey.placeholder = {};
	
	module.exports = bindKey;


/***/ }),
/* 266 */
254,
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	var createCurry = __webpack_require__(268);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var CURRY_FLAG = 8;
	
	/**
	 * Creates a function that accepts one or more arguments of `func` that when
	 * called either invokes `func` returning its result, if all `func` arguments
	 * have been provided, or returns a function that accepts one or more of the
	 * remaining `func` arguments, and so on. The arity of `func` may be specified
	 * if `func.length` is not sufficient.
	 *
	 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method does not set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curry(abc);
	 *
	 * curried(1)(2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // using placeholders
	 * curried(1)(_, 3)(2);
	 * // => [1, 2, 3]
	 */
	var curry = createCurry(CURRY_FLAG);
	
	// Assign default placeholders.
	curry.placeholder = {};
	
	module.exports = curry;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrapper = __webpack_require__(229),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a `_.curry` or `_.curryRight` function.
	 *
	 * @private
	 * @param {boolean} flag The curry bit flag.
	 * @returns {Function} Returns the new curry function.
	 */
	function createCurry(flag) {
	  function curryFunc(func, arity, guard) {
	    if (guard && isIterateeCall(func, arity, guard)) {
	      arity = undefined;
	    }
	    var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	    result.placeholder = curryFunc.placeholder;
	    return result;
	  }
	  return curryFunc;
	}
	
	module.exports = createCurry;


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var createCurry = __webpack_require__(268);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var CURRY_RIGHT_FLAG = 16;
	
	/**
	 * This method is like `_.curry` except that arguments are applied to `func`
	 * in the manner of `_.partialRight` instead of `_.partial`.
	 *
	 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method does not set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curryRight(abc);
	 *
	 * curried(3)(2)(1);
	 * // => [1, 2, 3]
	 *
	 * curried(2, 3)(1);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // using placeholders
	 * curried(3)(1, _)(2);
	 * // => [1, 2, 3]
	 */
	var curryRight = createCurry(CURRY_RIGHT_FLAG);
	
	// Assign default placeholders.
	curryRight.placeholder = {};
	
	module.exports = curryRight;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159),
	    now = __webpack_require__(251);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed invocations. Provide an options object to indicate that `func`
	 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	 * Subsequent calls to the debounced function return the result of the last
	 * `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the debounced function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=false] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	 *  delayed before it's invoked.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // avoid costly calculations while the window size is in flux
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // ensure `batchLog` is invoked once after 1 second of debounced calls
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', _.debounce(batchLog, 250, {
	 *   'maxWait': 1000
	 * }));
	 *
	 * // cancel a debounced call
	 * var todoChanges = _.debounce(batchLog, 1000);
	 * Object.observe(models.todo, todoChanges);
	 *
	 * Object.observe(models, function(changes) {
	 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	 *     todoChanges.cancel();
	 *   }
	 * }, ['delete']);
	 *
	 * // ...at some point `models.todo` is changed
	 * models.todo.completed = true;
	 *
	 * // ...before 1 second has passed `models.todo` is deleted
	 * // which cancels the debounced `todoChanges` call
	 * delete models.todo;
	 */
	function debounce(func, wait, options) {
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = wait < 0 ? 0 : (+wait || 0);
	  if (options === true) {
	    var leading = true;
	    trailing = false;
	  } else if (isObject(options)) {
	    leading = !!options.leading;
	    maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	
	  function cancel() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    if (maxTimeoutId) {
	      clearTimeout(maxTimeoutId);
	    }
	    lastCalled = 0;
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	  }
	
	  function complete(isCalled, id) {
	    if (id) {
	      clearTimeout(id);
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if (isCalled) {
	      lastCalled = now();
	      result = func.apply(thisArg, args);
	      if (!timeoutId && !maxTimeoutId) {
	        args = thisArg = undefined;
	      }
	    }
	  }
	
	  function delayed() {
	    var remaining = wait - (now() - stamp);
	    if (remaining <= 0 || remaining > wait) {
	      complete(trailingCall, maxTimeoutId);
	    } else {
	      timeoutId = setTimeout(delayed, remaining);
	    }
	  }
	
	  function maxDelayed() {
	    complete(trailing, timeoutId);
	  }
	
	  function debounced() {
	    args = arguments;
	    stamp = now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);
	
	    if (maxWait === false) {
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if (!maxTimeoutId && !leading) {
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0 || remaining > maxWait;
	
	      if (isCalled) {
	        if (maxTimeoutId) {
	          maxTimeoutId = clearTimeout(maxTimeoutId);
	        }
	        lastCalled = stamp;
	        result = func.apply(thisArg, args);
	      }
	      else if (!maxTimeoutId) {
	        maxTimeoutId = setTimeout(maxDelayed, remaining);
	      }
	    }
	    if (isCalled && timeoutId) {
	      timeoutId = clearTimeout(timeoutId);
	    }
	    else if (!timeoutId && wait !== maxWait) {
	      timeoutId = setTimeout(delayed, wait);
	    }
	    if (leadingCall) {
	      isCalled = true;
	      result = func.apply(thisArg, args);
	    }
	    if (isCalled && !timeoutId && !maxTimeoutId) {
	      args = thisArg = undefined;
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  return debounced;
	}
	
	module.exports = debounce;


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	var baseDelay = __webpack_require__(272),
	    restParam = __webpack_require__(259);
	
	/**
	 * Defers invoking the `func` until the current call stack has cleared. Any
	 * additional arguments are provided to `func` when it's invoked.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to defer.
	 * @param {...*} [args] The arguments to invoke the function with.
	 * @returns {number} Returns the timer id.
	 * @example
	 *
	 * _.defer(function(text) {
	 *   console.log(text);
	 * }, 'deferred');
	 * // logs 'deferred' after one or more milliseconds
	 */
	var defer = restParam(function(func, args) {
	  return baseDelay(func, 1, args);
	});
	
	module.exports = defer;


/***/ }),
/* 272 */
/***/ (function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * The base implementation of `_.delay` and `_.defer` which accepts an index
	 * of where to slice the arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to delay.
	 * @param {number} wait The number of milliseconds to delay invocation.
	 * @param {Object} args The arguments provide to `func`.
	 * @returns {number} Returns the timer id.
	 */
	function baseDelay(func, wait, args) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  return setTimeout(function() { func.apply(undefined, args); }, wait);
	}
	
	module.exports = baseDelay;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	var baseDelay = __webpack_require__(272),
	    restParam = __webpack_require__(259);
	
	/**
	 * Invokes `func` after `wait` milliseconds. Any additional arguments are
	 * provided to `func` when it's invoked.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to delay.
	 * @param {number} wait The number of milliseconds to delay invocation.
	 * @param {...*} [args] The arguments to invoke the function with.
	 * @returns {number} Returns the timer id.
	 * @example
	 *
	 * _.delay(function(text) {
	 *   console.log(text);
	 * }, 1000, 'later');
	 * // => logs 'later' after one second
	 */
	var delay = restParam(function(func, wait, args) {
	  return baseDelay(func, wait, args);
	});
	
	module.exports = delay;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var createFlow = __webpack_require__(256);
	
	/**
	 * Creates a function that returns the result of invoking the provided
	 * functions with the `this` binding of the created function, where each
	 * successive invocation is supplied the return value of the previous.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {...Function} [funcs] Functions to invoke.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var addSquare = _.flow(_.add, square);
	 * addSquare(1, 2);
	 * // => 9
	 */
	var flow = createFlow();
	
	module.exports = flow;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(276);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is coerced to a string and used as the
	 * cache key. The `func` is invoked with the `this` binding of the memoized
	 * function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoizing function.
	 * @example
	 *
	 * var upperCase = _.memoize(function(string) {
	 *   return string.toUpperCase();
	 * });
	 *
	 * upperCase('fred');
	 * // => 'FRED'
	 *
	 * // modifying the result cache
	 * upperCase.cache.set('fred', 'BARNEY');
	 * upperCase('fred');
	 * // => 'BARNEY'
	 *
	 * // replacing `_.memoize.Cache`
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'barney' };
	 * var identity = _.memoize(_.identity);
	 *
	 * identity(object);
	 * // => { 'user': 'fred' }
	 * identity(other);
	 * // => { 'user': 'fred' }
	 *
	 * _.memoize.Cache = WeakMap;
	 * var identity = _.memoize(_.identity);
	 *
	 * identity(object);
	 * // => { 'user': 'fred' }
	 * identity(other);
	 * // => { 'user': 'barney' }
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new memoize.Cache;
	  return memoized;
	}
	
	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;
	
	module.exports = memoize;


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	var mapDelete = __webpack_require__(277),
	    mapGet = __webpack_require__(278),
	    mapHas = __webpack_require__(279),
	    mapSet = __webpack_require__(280);
	
	/**
	 * Creates a cache object to store key/value pairs.
	 *
	 * @private
	 * @static
	 * @name Cache
	 * @memberOf _.memoize
	 */
	function MapCache() {
	  this.__data__ = {};
	}
	
	// Add functions to the `Map` cache.
	MapCache.prototype['delete'] = mapDelete;
	MapCache.prototype.get = mapGet;
	MapCache.prototype.has = mapHas;
	MapCache.prototype.set = mapSet;
	
	module.exports = MapCache;


/***/ }),
/* 277 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf _.memoize.Cache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	 */
	function mapDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}
	
	module.exports = mapDelete;


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	/**
	 * Gets the cached value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf _.memoize.Cache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the cached value.
	 */
	function mapGet(key) {
	  return key == '__proto__' ? undefined : this.__data__[key];
	}
	
	module.exports = mapGet;


/***/ }),
/* 279 */
/***/ (function(module, exports) {

	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if a cached value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf _.memoize.Cache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapHas(key) {
	  return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	}
	
	module.exports = mapHas;


/***/ }),
/* 280 */
/***/ (function(module, exports) {

	/**
	 * Sets `value` to `key` of the cache.
	 *
	 * @private
	 * @name set
	 * @memberOf _.memoize.Cache
	 * @param {string} key The key of the value to cache.
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache object.
	 */
	function mapSet(key, value) {
	  if (key != '__proto__') {
	    this.__data__[key] = value;
	  }
	  return this;
	}
	
	module.exports = mapSet;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEvery = __webpack_require__(282),
	    baseFlatten = __webpack_require__(261),
	    baseIsFunction = __webpack_require__(283),
	    restParam = __webpack_require__(259);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;
	
	/**
	 * Creates a function that runs each argument through a corresponding
	 * transform function.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to wrap.
	 * @param {...(Function|Function[])} [transforms] The functions to transform
	 * arguments, specified as individual functions or arrays of functions.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * function doubled(n) {
	 *   return n * 2;
	 * }
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var modded = _.modArgs(function(x, y) {
	 *   return [x, y];
	 * }, square, doubled);
	 *
	 * modded(1, 2);
	 * // => [1, 4]
	 *
	 * modded(5, 10);
	 * // => [25, 20]
	 */
	var modArgs = restParam(function(func, transforms) {
	  transforms = baseFlatten(transforms);
	  if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var length = transforms.length;
	  return restParam(function(args) {
	    var index = nativeMin(args.length, length);
	    while (index--) {
	      args[index] = transforms[index](args[index]);
	    }
	    return func.apply(this, args);
	  });
	});
	
	module.exports = modArgs;


/***/ }),
/* 282 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.every` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = arrayEvery;


/***/ }),
/* 283 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.isFunction` without support for environments
	 * with incorrect `typeof` results.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 */
	function baseIsFunction(value) {
	  // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	  // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	  return typeof value == 'function' || false;
	}
	
	module.exports = baseIsFunction;


/***/ }),
/* 284 */
/***/ (function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that negates the result of the predicate `func`. The
	 * `func` predicate is invoked with the `this` binding and arguments of the
	 * created function.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} predicate The predicate to negate.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * function isEven(n) {
	 *   return n % 2 == 0;
	 * }
	 *
	 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	 * // => [1, 3, 5]
	 */
	function negate(predicate) {
	  if (typeof predicate != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  return function() {
	    return !predicate.apply(this, arguments);
	  };
	}
	
	module.exports = negate;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	var before = __webpack_require__(257);
	
	/**
	 * Creates a function that is restricted to invoking `func` once. Repeat calls
	 * to the function return the value of the first call. The `func` is invoked
	 * with the `this` binding and arguments of the created function.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new restricted function.
	 * @example
	 *
	 * var initialize = _.once(createApplication);
	 * initialize();
	 * initialize();
	 * // `initialize` invokes `createApplication` once
	 */
	function once(func) {
	  return before(2, func);
	}
	
	module.exports = once;


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	var createPartial = __webpack_require__(287);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var PARTIAL_FLAG = 32;
	
	/**
	 * Creates a function that invokes `func` with `partial` arguments prepended
	 * to those provided to the new function. This method is like `_.bind` except
	 * it does **not** alter the `this` binding.
	 *
	 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** This method does not set the "length" property of partially
	 * applied functions.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to partially apply arguments to.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new partially applied function.
	 * @example
	 *
	 * var greet = function(greeting, name) {
	 *   return greeting + ' ' + name;
	 * };
	 *
	 * var sayHelloTo = _.partial(greet, 'hello');
	 * sayHelloTo('fred');
	 * // => 'hello fred'
	 *
	 * // using placeholders
	 * var greetFred = _.partial(greet, _, 'fred');
	 * greetFred('hi');
	 * // => 'hi fred'
	 */
	var partial = createPartial(PARTIAL_FLAG);
	
	// Assign default placeholders.
	partial.placeholder = {};
	
	module.exports = partial;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrapper = __webpack_require__(229),
	    replaceHolders = __webpack_require__(249),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates a `_.partial` or `_.partialRight` function.
	 *
	 * @private
	 * @param {boolean} flag The partial bit flag.
	 * @returns {Function} Returns the new partial function.
	 */
	function createPartial(flag) {
	  var partialFunc = restParam(function(func, partials) {
	    var holders = replaceHolders(partials, partialFunc.placeholder);
	    return createWrapper(func, flag, undefined, partials, holders);
	  });
	  return partialFunc;
	}
	
	module.exports = createPartial;


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	var createPartial = __webpack_require__(287);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var PARTIAL_RIGHT_FLAG = 64;
	
	/**
	 * This method is like `_.partial` except that partially applied arguments
	 * are appended to those provided to the new function.
	 *
	 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** This method does not set the "length" property of partially
	 * applied functions.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to partially apply arguments to.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new partially applied function.
	 * @example
	 *
	 * var greet = function(greeting, name) {
	 *   return greeting + ' ' + name;
	 * };
	 *
	 * var greetFred = _.partialRight(greet, 'fred');
	 * greetFred('hi');
	 * // => 'hi fred'
	 *
	 * // using placeholders
	 * var sayHelloTo = _.partialRight(greet, 'hello', _);
	 * sayHelloTo('fred');
	 * // => 'hello fred'
	 */
	var partialRight = createPartial(PARTIAL_RIGHT_FLAG);
	
	// Assign default placeholders.
	partialRight.placeholder = {};
	
	module.exports = partialRight;


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261),
	    createWrapper = __webpack_require__(229),
	    restParam = __webpack_require__(259);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var REARG_FLAG = 256;
	
	/**
	 * Creates a function that invokes `func` with arguments arranged according
	 * to the specified indexes where the argument value at the first index is
	 * provided as the first argument, the argument value at the second index is
	 * provided as the second argument, and so on.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to rearrange arguments for.
	 * @param {...(number|number[])} indexes The arranged argument indexes,
	 *  specified as individual indexes or arrays of indexes.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var rearged = _.rearg(function(a, b, c) {
	 *   return [a, b, c];
	 * }, 2, 0, 1);
	 *
	 * rearged('b', 'c', 'a')
	 * // => ['a', 'b', 'c']
	 *
	 * var map = _.rearg(_.map, [1, 0]);
	 * map(function(n) {
	 *   return n * 3;
	 * }, [1, 2, 3]);
	 * // => [3, 6, 9]
	 */
	var rearg = restParam(function(func, indexes) {
	  return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	});
	
	module.exports = rearg;


/***/ }),
/* 290 */
/***/ (function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that invokes `func` with the `this` binding of the created
	 * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	 *
	 * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to spread arguments over.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.spread(function(who, what) {
	 *   return who + ' says ' + what;
	 * });
	 *
	 * say(['fred', 'hello']);
	 * // => 'fred says hello'
	 *
	 * // with a Promise
	 * var numbers = Promise.all([
	 *   Promise.resolve(40),
	 *   Promise.resolve(36)
	 * ]);
	 *
	 * numbers.then(_.spread(function(x, y) {
	 *   return x + y;
	 * }));
	 * // => a Promise of 76
	 */
	function spread(func) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  return function(array) {
	    return func.apply(this, array);
	  };
	}
	
	module.exports = spread;


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	var debounce = __webpack_require__(270),
	    isObject = __webpack_require__(159);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed invocations. Provide an options object to indicate
	 * that `func` should be invoked on the leading and/or trailing edge of the
	 * `wait` timeout. Subsequent calls to the throttled function return the
	 * result of the last `func` call.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the throttled function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=true] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // avoid excessively updating the position while scrolling
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	 * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	 *   'trailing': false
	 * }));
	 *
	 * // cancel a trailing throttled call
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (options === false) {
	    leading = false;
	  } else if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	}
	
	module.exports = throttle;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrapper = __webpack_require__(229),
	    identity = __webpack_require__(179);
	
	/** Used to compose bitmasks for wrapper metadata. */
	var PARTIAL_FLAG = 32;
	
	/**
	 * Creates a function that provides `value` to the wrapper function as its
	 * first argument. Any additional arguments provided to the function are
	 * appended to those provided to the wrapper function. The wrapper is invoked
	 * with the `this` binding of the created function.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {*} value The value to wrap.
	 * @param {Function} wrapper The wrapper function.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var p = _.wrap(_.escape, function(func, text) {
	 *   return '<p>' + func(text) + '</p>';
	 * });
	 *
	 * p('fred, barney, & pebbles');
	 * // => '<p>fred, barney, &amp; pebbles</p>'
	 */
	function wrap(value, wrapper) {
	  wrapper = wrapper == null ? identity : wrapper;
	  return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	}
	
	module.exports = wrap;


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _translation = __webpack_require__(142);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*global window*/
	/*todo check the library presence*/
	module.exports = {
	    /**
	     * Compute the translated label.
	     * @param key {string}- Key in the dictionnary of translations.
	     * @param data {object} - Data to interpole in the translated string.
	     * @returns {string} - Translated string.
	     */
	    i18n: function translate(key, data) {
	        return _translation2.default.translate(key, data);
	    }
	};

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Dependencies
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _exception = __webpack_require__(295);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Small overlay component used to listen to scroll and prevent it to leave the Popin component
	*/
	var Overlay = _react2.default.createClass({
	    displayName: 'PopinOverlay',
	    propTypes: {
	        children: _react.PropTypes.object,
	        clickHandler: _react.PropTypes.func,
	        show: _react.PropTypes.bool
	    },
	    getDefaultProps: function getDefaultProps() {
	        return { show: false };
	    },
	
	    /**
	    * Store the body overgflow property, and set it to hidden
	    * @private
	    */
	    _hideBodyOverflow: function _hideBodyOverflow() {
	        document.body.style['overflow-y'] = 'hidden';
	    },
	
	    /**
	    * Restore body overflow property
	    * @private
	    */
	    _restoreBodyOverflow: function _restoreBodyOverflow() {
	        document.body.style['overflow-y'] = 'auto';
	    },
	
	    /**
	    * Component will unmount event handler.
	    * Remove the mouse wheel listener.
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        // ReactDOM.findDOMNode(this.refs.overlay).removeEventListener('mousewheel', this._onScroll);
	        this._restoreBodyOverflow();
	    },
	
	    /**
	    * Render the component
	    * @return {XML} the rendered HTML
	    */
	    render: function render() {
	        var _props = this.props,
	            children = _props.children,
	            clickHandler = _props.clickHandler,
	            show = _props.show;
	
	        return _react2.default.createElement(
	            'div',
	            { className: 'animated fadeIn', 'data-animation': 'fadeIn', 'data-closing-animation': 'fadeOut', 'data-focus': 'popin-overlay', 'data-visible': show, onClick: clickHandler, ref: 'overlay' },
	            children
	        );
	    }
	});
	
	/**
	* The popin component configuration
	* @type {Object}
	*/
	var popin = {
	    /**
	    * Init the component.
	    * The popin is closed by default.
	    * @return {Object} the initial state
	    */
	    getInitialState: function getInitialState() {
	        return {
	            opened: this.props.open
	        };
	    },
	
	    /**
	    * Init the props if not provided.
	    * By default, a popin is full, medium and modal.
	    * @return {Object} the default props
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            modal: true,
	            size: 'medium',
	            type: 'full',
	            level: 0,
	            overlay: true,
	            open: false
	        };
	    },
	
	    /**
	    * Helper attribute, for React debugging
	    */
	    displayName: 'Popin',
	    /**
	    * Properties validation
	    */
	    propTypes: {
	        modal: (0, _types2.default)('bool'),
	        size: (0, _types2.default)('string'),
	        types: (0, _types2.default)('string'),
	        level: (0, _types2.default)('number'),
	        overlay: (0, _types2.default)('bool'),
	        open: (0, _types2.default)('bool')
	    },
	    /**
	    * Wheel event handler.
	    * @param  {object} event wheel event
	    */
	    _onWheel: function _onWheel(event) {
	        _reactDom2.default.findDOMNode(this.refs['popin-window']).scrollTop += 0 < event.deltaY ? 100 : -100;
	    },
	
	    /**
	    * Toggle the popin's open state
	    */
	    toggleOpen: function toggleOpen() {
	        var _this = this;
	
	        var timeout = 0;
	        var opened = this.state.opened;
	        var onPopinClose = this.props.onPopinClose;
	
	        if (opened) {
	            var popinWindow = _reactDom2.default.findDOMNode(this.refs['popin-window']);
	            var popinOverlay = _reactDom2.default.findDOMNode(this.refs['popin-overlay']);
	            popinWindow.classList.remove(popinWindow.getAttribute('data-animation'));
	            popinWindow.classList.add(popinWindow.getAttribute('data-closing-animation'));
	            popinOverlay.classList.remove(popinOverlay.getAttribute('data-animation'));
	            popinOverlay.classList.add(popinOverlay.getAttribute('data-closing-animation'));
	            timeout = 200;
	        }
	        if (opened && onPopinClose) {
	            onPopinClose();
	        }
	        this._openTimeoutID = setTimeout(function () {
	            // Store the current popin state
	            var wasOpened = _this.state.opened;
	            // If it was  opened, then we are closing it, so restore the body overflow before closing.
	            if (wasOpened && _this.refs['popin-overlay']) {
	                _this.refs['popin-overlay']._restoreBodyOverflow();
	            }
	            _this.setState({
	                opened: !wasOpened
	            }, function () {
	                if (_this.refs['popin-overlay']) {
	                    if (!wasOpened) {
	                        // We just opened the popin, so store and hide the body overflow.
	                        _this.refs['popin-overlay']._hideBodyOverflow();
	                    }
	                }
	            });
	        }, timeout);
	    },
	    componentWillUnmount: function componentWillUnmount() {
	        window.clearTimeout(this._openTimeoutID);
	    },
	
	    /**
	    * Render the component
	    * @return {XML} the rendered HTML
	    */
	    render: function render() {
	        // test for this.state.opened and return an Overlay component if true
	        var _props2 = this.props,
	            type = _props2.type,
	            level = _props2.level,
	            modal = _props2.modal,
	            overlay = _props2.overlay,
	            children = _props2.children,
	            modalTitleId = _props2.modalTitleId,
	            labelIcon = _props2.labelIcon,
	            classNameIcon = _props2.classNameIcon;
	
	        var optionnalModalProps = {};
	        if (modalTitleId) {
	            optionnalModalProps['aria-labelledby'] = modalTitleId;
	        }
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'popin', 'data-level': level, 'data-size': this._validateSize(), 'data-type': type },
	            this.state.opened && _react2.default.createElement(
	                Overlay,
	                { clickHandler: modal && this.toggleOpen, ref: 'popin-overlay', resize: 'full' === type, show: overlay },
	                _react2.default.createElement(
	                    'div',
	                    _extends({}, this._getAnimationProps(), { 'data-focus': 'popin-window' }, optionnalModalProps, { role: 'dialog', onClick: this._preventPopinClose, ref: 'popin-window' }),
	                    labelIcon && classNameIcon && _react2.default.createElement(
	                        'span',
	                        { className: classNameIcon },
	                        labelIcon
	                    ),
	                    _react2.default.createElement(
	                        'i',
	                        { className: 'material-icons', 'data-focus': 'popin-window-close', onClick: this.toggleOpen },
	                        'close'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { onWheel: this._onWheel },
	                        children
	                    )
	                )
	            )
	        );
	    },
	
	    /**
	    * Compute the animation classes
	    * @return {Object} the props to attach to the component
	    * @private
	    */
	    _getAnimationProps: function _getAnimationProps() {
	        var openingAnimation = void 0;
	        var closingAnimation = void 0;
	        switch (this.props.type) {
	            case 'from-menu':
	                openingAnimation = 'slideInLeft';
	                closingAnimation = 'slideOutLeft';
	                break;
	            case 'from-right':
	                openingAnimation = 'slideInRight';
	                closingAnimation = 'slideOutRight';
	                break;
	            default:
	                openingAnimation = 'zoomIn';
	                closingAnimation = 'zoomOut';
	                break;
	        }
	        return {
	            className: 'animated ' + openingAnimation,
	            'data-animation': openingAnimation,
	            'data-closing-animation': closingAnimation
	        };
	    },
	
	    /**
	    * Validate the optional given size
	    * @return {string} the validated size
	    * @private
	    */
	    _validateSize: function _validateSize() {
	        var _this2 = this;
	
	        if (!['small', 'medium', 'large'].find(function (size) {
	            return size === _this2.props.size;
	        })) {
	            throw new _exception.ArgumentInvalidException('Please provide a valid popin size among small, medium and large. Provided ' + this.props.size);
	        }
	        return this.props.size;
	    },
	
	    /**
	    * Prevent popin close when there's a click on the popin window
	    * @param {Object} event - raised by the click
	    * @private
	    */
	    _preventPopinClose: function _preventPopinClose(event) {
	        event.stopPropagation();
	    }
	};
	
	module.exports = (0, _builder2.default)(popin);

/***/ }),
/* 295 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_295__;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.default = connectToStores;
	
	var _lang = __webpack_require__(148);
	
	var _string = __webpack_require__(297);
	
	var _object = __webpack_require__(341);
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// - Provide the component
	// - Provide the store configuration `[{store: yourStore, properties: ['property1', 'property2']}]`
	// - Provide a function to read state from your store
	function connectToStores(storesConfiguration, getState) {
	    // Validate the stores object
	    if (!(0, _lang.isArray)(storesConfiguration)) {
	        throw new Error('connectToStores: you need to provide an array of store config.');
	    }
	
	    // Validate .
	    if (!(0, _lang.isFunction)(getState)) {
	        throw new Error('connectToStores: you need to provide function to read state from store.');
	    }
	    // Return a wrapper function around the component
	    return function connectComponent(DecoratedComponent) {
	
	        // Save the display name for later
	        var displayName = DecoratedComponent.displayName || 'Component';
	
	        // The goal of this class is to connect a component to a list of stores with properties.
	
	        var StoreConnector = function (_Component) {
	            _inherits(StoreConnector, _Component);
	
	            function StoreConnector(props) {
	                _classCallCheck(this, StoreConnector);
	
	                //Build the initial state from props.
	                var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	                _this.handleStoresChanged = function () {
	                    _this.updateState(_this.props);
	                };
	
	                _this.state = getState(props);
	                _this._isMounted = false;
	                return _this;
	            }
	
	            // When the component will mount, we listen to all stores changes.
	            // When a change occurs the state is read again from the state.
	
	
	            StoreConnector.prototype.componentWillMount = function componentWillMount() {
	                var _this2 = this;
	
	                storesConfiguration.forEach(function (storeConf) {
	                    var properties = storeConf.properties,
	                        store = storeConf.store;
	
	                    properties.forEach(function (property) {
	                        if (!store || !store.definition || !store.definition[property]) {
	                            console.warn('\n                                StoreConnector ' + displayName + ':\n                                    You add a property : ' + property + ' in your store configuration which is not in your definition : ' + (0, _object.keys)(store.definition) + '\n                            ');
	                        }
	                        var capitalizedProperty = (0, _string.capitalize)(property);
	                        storeConf.store['add' + capitalizedProperty + 'ChangeListener'](_this2.handleStoresChanged);
	                        storeConf.store['add' + capitalizedProperty + 'ErrorListener'](_this2.handleStoresChanged);
	                    });
	                });
	            };
	
	            // When a component will receive a new props.
	
	
	            StoreConnector.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	                this.updateState(nextProps);
	            };
	
	            // Component unmount.
	
	
	            StoreConnector.prototype.componentWillUnmount = function componentWillUnmount() {
	                var _this3 = this;
	
	                this._isMounted = false;
	                storesConfiguration.forEach(function (storeConf) {
	                    var properties = storeConf.properties,
	                        store = storeConf.store;
	
	                    properties.forEach(function (property) {
	                        var capitalizedProperty = (0, _string.capitalize)(property);
	                        storeConf.store['remove' + capitalizedProperty + 'ChangeListener'](_this3.handleStoresChanged);
	                        storeConf.store['remove' + capitalizedProperty + 'ErrorListener'](_this3.handleStoresChanged);
	                    });
	                });
	            };
	
	            StoreConnector.prototype.componentDidMount = function componentDidMount() {
	                this._isMounted = true;
	                this.updateState(this.props);
	            };
	
	            StoreConnector.prototype.updateState = function updateState(props) {
	                if (this._isMounted) {
	                    this.setState(getState(this.props));
	                }
	            };
	
	            //Handle the store changes
	
	
	            // Render the component with only props, some from the real props some from the state
	            StoreConnector.prototype.render = function render() {
	                var props = this.props,
	                    state = this.state;
	
	                return _react2.default.createElement(DecoratedComponent, _extends({}, props, state));
	            };
	
	            return StoreConnector;
	        }(_react.Component);
	
	        StoreConnector.displayName = displayName + 'Connected';
	        return StoreConnector;
	    };
	}
	
	// Add a function to connect a store to a component .
	// All the store properties values will be provided to the component as props.
	// This could be use as an ES7 annotation or as a function.
	
	
	// ### ES6 version
	// ```jsx
	// store
	// const newStore = new CoreStore({definition: {name: 'name', email: 'email'}});
	//Component
	// const Component = props => <div>{JSON.stringify(props)}</div>;
	// create a connector function
	// const connector = storeConnectBehaviour(
	//     [{store: newStore, properties: ['name', 'email']}],
	//     (props) => {return newStore.getValue()}
	// );
	// Component connected to the store
	// const ConnectedComponent = connector(Component);
	// ```
	
	// ### ES7 version
	// ```jsx
	//    Class version
	// @connect( [{store: newStore, properties: ['name', 'email']}],(props) => newStore.getValue())
	// class YourComponent extends Component{
	//     render(){
	//          return  <div>{JSON.stringify(props)}</div>;
	//     }
	// }
	// ```
	
	module.exports = exports['default'];

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'camelCase': __webpack_require__(298),
	  'capitalize': __webpack_require__(304),
	  'deburr': __webpack_require__(300),
	  'endsWith': __webpack_require__(305),
	  'escape': __webpack_require__(306),
	  'escapeRegExp': __webpack_require__(308),
	  'kebabCase': __webpack_require__(310),
	  'pad': __webpack_require__(311),
	  'padLeft': __webpack_require__(314),
	  'padRight': __webpack_require__(316),
	  'parseInt': __webpack_require__(317),
	  'repeat': __webpack_require__(313),
	  'snakeCase': __webpack_require__(324),
	  'startCase': __webpack_require__(325),
	  'startsWith': __webpack_require__(326),
	  'template': __webpack_require__(327),
	  'templateSettings': __webpack_require__(333),
	  'trim': __webpack_require__(318),
	  'trimLeft': __webpack_require__(336),
	  'trimRight': __webpack_require__(337),
	  'trunc': __webpack_require__(338),
	  'unescape': __webpack_require__(339),
	  'words': __webpack_require__(303)
	};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(299);
	
	/**
	 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the camel cased string.
	 * @example
	 *
	 * _.camelCase('Foo Bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('--foo-bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('__foo_bar__');
	 * // => 'fooBar'
	 */
	var camelCase = createCompounder(function(result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	});
	
	module.exports = camelCase;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	var deburr = __webpack_require__(300),
	    words = __webpack_require__(303);
	
	/**
	 * Creates a function that produces compound words out of the words in a
	 * given string.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    var index = -1,
	        array = words(deburr(string)),
	        length = array.length,
	        result = '';
	
	    while (++index < length) {
	      result = callback(result, array[index], index);
	    }
	    return result;
	  };
	}
	
	module.exports = createCompounder;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    deburrLetter = __webpack_require__(302);
	
	/** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;
	
	/** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
	
	/**
	 * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = baseToString(string);
	  return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	}
	
	module.exports = deburr;


/***/ }),
/* 301 */
/***/ (function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}
	
	module.exports = baseToString;


/***/ }),
/* 302 */
/***/ (function(module, exports) {

	/** Used to map latin-1 supplementary letters to basic latin letters. */
	var deburredLetters = {
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss'
	};
	
	/**
	 * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	function deburrLetter(letter) {
	  return deburredLetters[letter];
	}
	
	module.exports = deburrLetter;


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    isIterateeCall = __webpack_require__(180);
	
	/** Used to match words to create compound words. */
	var reWords = (function() {
	  var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	      lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';
	
	  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	}());
	
	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  if (guard && isIterateeCall(string, pattern, guard)) {
	    pattern = undefined;
	  }
	  string = baseToString(string);
	  return string.match(pattern || reWords) || [];
	}
	
	module.exports = words;


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301);
	
	/**
	 * Capitalizes the first character of `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to capitalize.
	 * @returns {string} Returns the capitalized string.
	 * @example
	 *
	 * _.capitalize('fred');
	 * // => 'Fred'
	 */
	function capitalize(string) {
	  string = baseToString(string);
	  return string && (string.charAt(0).toUpperCase() + string.slice(1));
	}
	
	module.exports = capitalize;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;
	
	/**
	 * Checks if `string` ends with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to search.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=string.length] The position to search from.
	 * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	 * @example
	 *
	 * _.endsWith('abc', 'c');
	 * // => true
	 *
	 * _.endsWith('abc', 'b');
	 * // => false
	 *
	 * _.endsWith('abc', 'b', 2);
	 * // => true
	 */
	function endsWith(string, target, position) {
	  string = baseToString(string);
	  target = (target + '');
	
	  var length = string.length;
	  position = position === undefined
	    ? length
	    : nativeMin(position < 0 ? 0 : (+position || 0), length);
	
	  position -= target.length;
	  return position >= 0 && string.indexOf(target, position) == position;
	}
	
	module.exports = endsWith;


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    escapeHtmlChar = __webpack_require__(307);
	
	/** Used to match HTML entities and HTML characters. */
	var reUnescapedHtml = /[&<>"'`]/g,
	    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	/**
	 * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	 * their corresponding HTML entities.
	 *
	 * **Note:** No other characters are escaped. To escape additional characters
	 * use a third-party library like [_he_](https://mths.be/he).
	 *
	 * Though the ">" character is escaped for symmetry, characters like
	 * ">" and "/" don't need escaping in HTML and have no special meaning
	 * unless they're part of a tag or unquoted attribute value.
	 * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	 * (under "semi-related fun fact") for more details.
	 *
	 * Backticks are escaped because in Internet Explorer < 9, they can break out
	 * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	 * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	 * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	 * for more details.
	 *
	 * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	 * to reduce XSS vectors.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escape('fred, barney, & pebbles');
	 * // => 'fred, barney, &amp; pebbles'
	 */
	function escape(string) {
	  // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	  string = baseToString(string);
	  return (string && reHasUnescapedHtml.test(string))
	    ? string.replace(reUnescapedHtml, escapeHtmlChar)
	    : string;
	}
	
	module.exports = escape;


/***/ }),
/* 307 */
/***/ (function(module, exports) {

	/** Used to map characters to HTML entities. */
	var htmlEscapes = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#39;',
	  '`': '&#96;'
	};
	
	/**
	 * Used by `_.escape` to convert characters to HTML entities.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeHtmlChar(chr) {
	  return htmlEscapes[chr];
	}
	
	module.exports = escapeHtmlChar;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    escapeRegExpChar = __webpack_require__(309);
	
	/**
	 * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	 * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	 */
	var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	    reHasRegExpChars = RegExp(reRegExpChars.source);
	
	/**
	 * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	 * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	 */
	function escapeRegExp(string) {
	  string = baseToString(string);
	  return (string && reHasRegExpChars.test(string))
	    ? string.replace(reRegExpChars, escapeRegExpChar)
	    : (string || '(?:)');
	}
	
	module.exports = escapeRegExp;


/***/ }),
/* 309 */
/***/ (function(module, exports) {

	/** Used to escape characters for inclusion in compiled regexes. */
	var regexpEscapes = {
	  '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	  '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	  'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	  'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	  'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	};
	
	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
	  '\\': '\\',
	  "'": "'",
	  '\n': 'n',
	  '\r': 'r',
	  '\u2028': 'u2028',
	  '\u2029': 'u2029'
	};
	
	/**
	 * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @param {string} leadingChar The capture group for a leading character.
	 * @param {string} whitespaceChar The capture group for a whitespace character.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	  if (leadingChar) {
	    chr = regexpEscapes[chr];
	  } else if (whitespaceChar) {
	    chr = stringEscapes[chr];
	  }
	  return '\\' + chr;
	}
	
	module.exports = escapeRegExpChar;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(299);
	
	/**
	 * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the kebab cased string.
	 * @example
	 *
	 * _.kebabCase('Foo Bar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('fooBar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('__foo_bar__');
	 * // => 'foo-bar'
	 */
	var kebabCase = createCompounder(function(result, word, index) {
	  return result + (index ? '-' : '') + word.toLowerCase();
	});
	
	module.exports = kebabCase;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var baseToString = __webpack_require__(301),
	    createPadding = __webpack_require__(312);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeFloor = Math.floor,
	    nativeIsFinite = global.isFinite;
	
	/**
	 * Pads `string` on the left and right sides if it's shorter than `length`.
	 * Padding characters are truncated if they can't be evenly divided by `length`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.pad('abc', 8);
	 * // => '  abc   '
	 *
	 * _.pad('abc', 8, '_-');
	 * // => '_-abc_-_'
	 *
	 * _.pad('abc', 3);
	 * // => 'abc'
	 */
	function pad(string, length, chars) {
	  string = baseToString(string);
	  length = +length;
	
	  var strLength = string.length;
	  if (strLength >= length || !nativeIsFinite(length)) {
	    return string;
	  }
	  var mid = (length - strLength) / 2,
	      leftLength = nativeFloor(mid),
	      rightLength = nativeCeil(mid);
	
	  chars = createPadding('', rightLength, chars);
	  return chars.slice(0, leftLength) + string + chars;
	}
	
	module.exports = pad;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var repeat = __webpack_require__(313);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeIsFinite = global.isFinite;
	
	/**
	 * Creates the padding required for `string` based on the given `length`.
	 * The `chars` string is truncated if the number of characters exceeds `length`.
	 *
	 * @private
	 * @param {string} string The string to create padding for.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the pad for `string`.
	 */
	function createPadding(string, length, chars) {
	  var strLength = string.length;
	  length = +length;
	
	  if (strLength >= length || !nativeIsFinite(length)) {
	    return '';
	  }
	  var padLength = length - strLength;
	  chars = chars == null ? ' ' : (chars + '');
	  return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	}
	
	module.exports = createPadding;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var baseToString = __webpack_require__(301);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeFloor = Math.floor,
	    nativeIsFinite = global.isFinite;
	
	/**
	 * Repeats the given string `n` times.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to repeat.
	 * @param {number} [n=0] The number of times to repeat the string.
	 * @returns {string} Returns the repeated string.
	 * @example
	 *
	 * _.repeat('*', 3);
	 * // => '***'
	 *
	 * _.repeat('abc', 2);
	 * // => 'abcabc'
	 *
	 * _.repeat('abc', 0);
	 * // => ''
	 */
	function repeat(string, n) {
	  var result = '';
	  string = baseToString(string);
	  n = +n;
	  if (n < 1 || !string || !nativeIsFinite(n)) {
	    return result;
	  }
	  // Leverage the exponentiation by squaring algorithm for a faster repeat.
	  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	  do {
	    if (n % 2) {
	      result += string;
	    }
	    n = nativeFloor(n / 2);
	    string += string;
	  } while (n);
	
	  return result;
	}
	
	module.exports = repeat;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	var createPadDir = __webpack_require__(315);
	
	/**
	 * Pads `string` on the left side if it's shorter than `length`. Padding
	 * characters are truncated if they exceed `length`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.padLeft('abc', 6);
	 * // => '   abc'
	 *
	 * _.padLeft('abc', 6, '_-');
	 * // => '_-_abc'
	 *
	 * _.padLeft('abc', 3);
	 * // => 'abc'
	 */
	var padLeft = createPadDir();
	
	module.exports = padLeft;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    createPadding = __webpack_require__(312);
	
	/**
	 * Creates a function for `_.padLeft` or `_.padRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify padding from the right.
	 * @returns {Function} Returns the new pad function.
	 */
	function createPadDir(fromRight) {
	  return function(string, length, chars) {
	    string = baseToString(string);
	    return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	  };
	}
	
	module.exports = createPadDir;


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	var createPadDir = __webpack_require__(315);
	
	/**
	 * Pads `string` on the right side if it's shorter than `length`. Padding
	 * characters are truncated if they exceed `length`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to pad.
	 * @param {number} [length=0] The padding length.
	 * @param {string} [chars=' '] The string used as padding.
	 * @returns {string} Returns the padded string.
	 * @example
	 *
	 * _.padRight('abc', 6);
	 * // => 'abc   '
	 *
	 * _.padRight('abc', 6, '_-');
	 * // => 'abc_-_'
	 *
	 * _.padRight('abc', 3);
	 * // => 'abc'
	 */
	var padRight = createPadDir(true);
	
	module.exports = padRight;


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var isIterateeCall = __webpack_require__(180),
	    trim = __webpack_require__(318);
	
	/** Used to detect hexadecimal string values. */
	var reHasHexPrefix = /^0[xX]/;
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeParseInt = global.parseInt;
	
	/**
	 * Converts `string` to an integer of the specified radix. If `radix` is
	 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	 * in which case a `radix` of `16` is used.
	 *
	 * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	 * of `parseInt`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} string The string to convert.
	 * @param {number} [radix] The radix to interpret `value` by.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.parseInt('08');
	 * // => 8
	 *
	 * _.map(['6', '08', '10'], _.parseInt);
	 * // => [6, 8, 10]
	 */
	function parseInt(string, radix, guard) {
	  // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	  // Chrome fails to trim leading <BOM> whitespace characters.
	  // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	  if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	    radix = 0;
	  } else if (radix) {
	    radix = +radix;
	  }
	  string = trim(string);
	  return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	}
	
	module.exports = parseInt;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    charsLeftIndex = __webpack_require__(319),
	    charsRightIndex = __webpack_require__(320),
	    isIterateeCall = __webpack_require__(180),
	    trimmedLeftIndex = __webpack_require__(321),
	    trimmedRightIndex = __webpack_require__(323);
	
	/**
	 * Removes leading and trailing whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trim('  abc  ');
	 * // => 'abc'
	 *
	 * _.trim('-_-abc-_-', '_-');
	 * // => 'abc'
	 *
	 * _.map(['  foo  ', '  bar  '], _.trim);
	 * // => ['foo', 'bar']
	 */
	function trim(string, chars, guard) {
	  var value = string;
	  string = baseToString(string);
	  if (!string) {
	    return string;
	  }
	  if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	    return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	  }
	  chars = (chars + '');
	  return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	}
	
	module.exports = trim;


/***/ }),
/* 319 */
/***/ (function(module, exports) {

	/**
	 * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	 * of `string` that is not found in `chars`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @param {string} chars The characters to find.
	 * @returns {number} Returns the index of the first character not found in `chars`.
	 */
	function charsLeftIndex(string, chars) {
	  var index = -1,
	      length = string.length;
	
	  while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	  return index;
	}
	
	module.exports = charsLeftIndex;


/***/ }),
/* 320 */
/***/ (function(module, exports) {

	/**
	 * Used by `_.trim` and `_.trimRight` to get the index of the last character
	 * of `string` that is not found in `chars`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @param {string} chars The characters to find.
	 * @returns {number} Returns the index of the last character not found in `chars`.
	 */
	function charsRightIndex(string, chars) {
	  var index = string.length;
	
	  while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	  return index;
	}
	
	module.exports = charsRightIndex;


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	var isSpace = __webpack_require__(322);
	
	/**
	 * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the first non-whitespace character.
	 */
	function trimmedLeftIndex(string) {
	  var index = -1,
	      length = string.length;
	
	  while (++index < length && isSpace(string.charCodeAt(index))) {}
	  return index;
	}
	
	module.exports = trimmedLeftIndex;


/***/ }),
/* 322 */
/***/ (function(module, exports) {

	/**
	 * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	 * character code is whitespace.
	 *
	 * @private
	 * @param {number} charCode The character code to inspect.
	 * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	 */
	function isSpace(charCode) {
	  return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	    (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	}
	
	module.exports = isSpace;


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	var isSpace = __webpack_require__(322);
	
	/**
	 * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedRightIndex(string) {
	  var index = string.length;
	
	  while (index-- && isSpace(string.charCodeAt(index))) {}
	  return index;
	}
	
	module.exports = trimmedRightIndex;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(299);
	
	/**
	 * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the snake cased string.
	 * @example
	 *
	 * _.snakeCase('Foo Bar');
	 * // => 'foo_bar'
	 *
	 * _.snakeCase('fooBar');
	 * // => 'foo_bar'
	 *
	 * _.snakeCase('--foo-bar');
	 * // => 'foo_bar'
	 */
	var snakeCase = createCompounder(function(result, word, index) {
	  return result + (index ? '_' : '') + word.toLowerCase();
	});
	
	module.exports = snakeCase;


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(299);
	
	/**
	 * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the start cased string.
	 * @example
	 *
	 * _.startCase('--foo-bar');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('fooBar');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('__foo_bar__');
	 * // => 'Foo Bar'
	 */
	var startCase = createCompounder(function(result, word, index) {
	  return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	});
	
	module.exports = startCase;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;
	
	/**
	 * Checks if `string` starts with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to search.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=0] The position to search from.
	 * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	 * @example
	 *
	 * _.startsWith('abc', 'a');
	 * // => true
	 *
	 * _.startsWith('abc', 'b');
	 * // => false
	 *
	 * _.startsWith('abc', 'b', 1);
	 * // => true
	 */
	function startsWith(string, target, position) {
	  string = baseToString(string);
	  position = position == null
	    ? 0
	    : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
	
	  return string.lastIndexOf(target, position) == position;
	}
	
	module.exports = startsWith;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	var assignOwnDefaults = __webpack_require__(328),
	    assignWith = __webpack_require__(329),
	    attempt = __webpack_require__(330),
	    baseAssign = __webpack_require__(153),
	    baseToString = __webpack_require__(301),
	    baseValues = __webpack_require__(216),
	    escapeStringChar = __webpack_require__(331),
	    isError = __webpack_require__(200),
	    isIterateeCall = __webpack_require__(180),
	    keys = __webpack_require__(155),
	    reInterpolate = __webpack_require__(332),
	    templateSettings = __webpack_require__(333);
	
	/** Used to match empty string literals in compiled template source. */
	var reEmptyStringLeading = /\b__p \+= '';/g,
	    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	/** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	/** Used to ensure capturing order of template delimiters. */
	var reNoMatch = /($^)/;
	
	/** Used to match unescaped characters in compiled string literals. */
	var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	/**
	 * Creates a compiled template function that can interpolate data properties
	 * in "interpolate" delimiters, HTML-escape interpolated data properties in
	 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	 * properties may be accessed as free variables in the template. If a setting
	 * object is provided it takes precedence over `_.templateSettings` values.
	 *
	 * **Note:** In the development build `_.template` utilizes
	 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	 * for easier debugging.
	 *
	 * For more information on precompiling templates see
	 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	 *
	 * For more information on Chrome extension sandboxes see
	 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The template string.
	 * @param {Object} [options] The options object.
	 * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	 * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	 * @param {Object} [options.imports] An object to import into the template as free variables.
	 * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	 * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	 * @param {string} [options.variable] The data object variable name.
	 * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	 * @returns {Function} Returns the compiled template function.
	 * @example
	 *
	 * // using the "interpolate" delimiter to create a compiled template
	 * var compiled = _.template('hello <%= user %>!');
	 * compiled({ 'user': 'fred' });
	 * // => 'hello fred!'
	 *
	 * // using the HTML "escape" delimiter to escape data property values
	 * var compiled = _.template('<b><%- value %></b>');
	 * compiled({ 'value': '<script>' });
	 * // => '<b>&lt;script&gt;</b>'
	 *
	 * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	 * compiled({ 'users': ['fred', 'barney'] });
	 * // => '<li>fred</li><li>barney</li>'
	 *
	 * // using the internal `print` function in "evaluate" delimiters
	 * var compiled = _.template('<% print("hello " + user); %>!');
	 * compiled({ 'user': 'barney' });
	 * // => 'hello barney!'
	 *
	 * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	 * var compiled = _.template('hello ${ user }!');
	 * compiled({ 'user': 'pebbles' });
	 * // => 'hello pebbles!'
	 *
	 * // using custom template delimiters
	 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	 * var compiled = _.template('hello {{ user }}!');
	 * compiled({ 'user': 'mustache' });
	 * // => 'hello mustache!'
	 *
	 * // using backslashes to treat delimiters as plain text
	 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	 * compiled({ 'value': 'ignored' });
	 * // => '<%- value %>'
	 *
	 * // using the `imports` option to import `jQuery` as `jq`
	 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	 * compiled({ 'users': ['fred', 'barney'] });
	 * // => '<li>fred</li><li>barney</li>'
	 *
	 * // using the `sourceURL` option to specify a custom sourceURL for the template
	 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	 * compiled(data);
	 * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	 *
	 * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	 * compiled.source;
	 * // => function(data) {
	 * //   var __t, __p = '';
	 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	 * //   return __p;
	 * // }
	 *
	 * // using the `source` property to inline compiled templates for meaningful
	 * // line numbers in error messages and a stack trace
	 * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	 *   var JST = {\
	 *     "main": ' + _.template(mainText).source + '\
	 *   };\
	 * ');
	 */
	function template(string, options, otherOptions) {
	  // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	  var settings = templateSettings.imports._.templateSettings || templateSettings;
	
	  if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	    options = otherOptions = undefined;
	  }
	  string = baseToString(string);
	  options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);
	
	  var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	      importsKeys = keys(imports),
	      importsValues = baseValues(imports, importsKeys);
	
	  var isEscaping,
	      isEvaluating,
	      index = 0,
	      interpolate = options.interpolate || reNoMatch,
	      source = "__p += '";
	
	  // Compile the regexp to match each delimiter.
	  var reDelimiters = RegExp(
	    (options.escape || reNoMatch).source + '|' +
	    interpolate.source + '|' +
	    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	    (options.evaluate || reNoMatch).source + '|$'
	  , 'g');
	
	  // Use a sourceURL for easier debugging.
	  var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\n' : '';
	
	  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	    interpolateValue || (interpolateValue = esTemplateValue);
	
	    // Escape characters that can't be included in string literals.
	    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	    // Replace delimiters with snippets.
	    if (escapeValue) {
	      isEscaping = true;
	      source += "' +\n__e(" + escapeValue + ") +\n'";
	    }
	    if (evaluateValue) {
	      isEvaluating = true;
	      source += "';\n" + evaluateValue + ";\n__p += '";
	    }
	    if (interpolateValue) {
	      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	    }
	    index = offset + match.length;
	
	    // The JS engine embedded in Adobe products requires returning the `match`
	    // string in order to produce the correct `offset` value.
	    return match;
	  });
	
	  source += "';\n";
	
	  // If `variable` is not specified wrap a with-statement around the generated
	  // code to add the data object to the top of the scope chain.
	  var variable = options.variable;
	  if (!variable) {
	    source = 'with (obj) {\n' + source + '\n}\n';
	  }
	  // Cleanup code by stripping empty strings.
	  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	    .replace(reEmptyStringMiddle, '$1')
	    .replace(reEmptyStringTrailing, '$1;');
	
	  // Frame code as the function body.
	  source = 'function(' + (variable || 'obj') + ') {\n' +
	    (variable
	      ? ''
	      : 'obj || (obj = {});\n'
	    ) +
	    "var __t, __p = ''" +
	    (isEscaping
	       ? ', __e = _.escape'
	       : ''
	    ) +
	    (isEvaluating
	      ? ', __j = Array.prototype.join;\n' +
	        "function print() { __p += __j.call(arguments, '') }\n"
	      : ';\n'
	    ) +
	    source +
	    'return __p\n}';
	
	  var result = attempt(function() {
	    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	  });
	
	  // Provide the compiled function's source by its `toString` method or
	  // the `source` property as a convenience for inlining compiled templates.
	  result.source = source;
	  if (isError(result)) {
	    throw result;
	  }
	  return result;
	}
	
	module.exports = template;


/***/ }),
/* 328 */
/***/ (function(module, exports) {

	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used by `_.template` to customize its `_.assign` use.
	 *
	 * **Note:** This function is like `assignDefaults` except that it ignores
	 * inherited property values when checking if a property is `undefined`.
	 *
	 * @private
	 * @param {*} objectValue The destination object property value.
	 * @param {*} sourceValue The source object property value.
	 * @param {string} key The key associated with the object and source values.
	 * @param {Object} object The destination object.
	 * @returns {*} Returns the value to assign to the destination object.
	 */
	function assignOwnDefaults(objectValue, sourceValue, key, object) {
	  return (objectValue === undefined || !hasOwnProperty.call(object, key))
	    ? sourceValue
	    : objectValue;
	}
	
	module.exports = assignOwnDefaults;


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(155);
	
	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);
	
	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}
	
	module.exports = assignWith;


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var isError = __webpack_require__(200),
	    restParam = __webpack_require__(259);
	
	/**
	 * Attempts to invoke `func`, returning either the result or the caught error
	 * object. Any additional arguments are provided to `func` when it's invoked.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Function} func The function to attempt.
	 * @returns {*} Returns the `func` result or error object.
	 * @example
	 *
	 * // avoid throwing errors for invalid selectors
	 * var elements = _.attempt(function(selector) {
	 *   return document.querySelectorAll(selector);
	 * }, '>_>');
	 *
	 * if (_.isError(elements)) {
	 *   elements = [];
	 * }
	 */
	var attempt = restParam(function(func, args) {
	  try {
	    return func.apply(undefined, args);
	  } catch(e) {
	    return isError(e) ? e : new Error(e);
	  }
	});
	
	module.exports = attempt;


/***/ }),
/* 331 */
/***/ (function(module, exports) {

	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
	  '\\': '\\',
	  "'": "'",
	  '\n': 'n',
	  '\r': 'r',
	  '\u2028': 'u2028',
	  '\u2029': 'u2029'
	};
	
	/**
	 * Used by `_.template` to escape characters for inclusion in compiled string literals.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeStringChar(chr) {
	  return '\\' + stringEscapes[chr];
	}
	
	module.exports = escapeStringChar;


/***/ }),
/* 332 */
/***/ (function(module, exports) {

	/** Used to match template delimiters. */
	var reInterpolate = /<%=([\s\S]+?)%>/g;
	
	module.exports = reInterpolate;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	var escape = __webpack_require__(306),
	    reEscape = __webpack_require__(334),
	    reEvaluate = __webpack_require__(335),
	    reInterpolate = __webpack_require__(332);
	
	/**
	 * By default, the template delimiters used by lodash are like those in
	 * embedded Ruby (ERB). Change the following template settings to use
	 * alternative delimiters.
	 *
	 * @static
	 * @memberOf _
	 * @type Object
	 */
	var templateSettings = {
	
	  /**
	   * Used to detect `data` property values to be HTML-escaped.
	   *
	   * @memberOf _.templateSettings
	   * @type RegExp
	   */
	  'escape': reEscape,
	
	  /**
	   * Used to detect code to be evaluated.
	   *
	   * @memberOf _.templateSettings
	   * @type RegExp
	   */
	  'evaluate': reEvaluate,
	
	  /**
	   * Used to detect `data` property values to inject.
	   *
	   * @memberOf _.templateSettings
	   * @type RegExp
	   */
	  'interpolate': reInterpolate,
	
	  /**
	   * Used to reference the data object in the template text.
	   *
	   * @memberOf _.templateSettings
	   * @type string
	   */
	  'variable': '',
	
	  /**
	   * Used to import variables into the compiled template.
	   *
	   * @memberOf _.templateSettings
	   * @type Object
	   */
	  'imports': {
	
	    /**
	     * A reference to the `lodash` function.
	     *
	     * @memberOf _.templateSettings.imports
	     * @type Function
	     */
	    '_': { 'escape': escape }
	  }
	};
	
	module.exports = templateSettings;


/***/ }),
/* 334 */
/***/ (function(module, exports) {

	/** Used to match template delimiters. */
	var reEscape = /<%-([\s\S]+?)%>/g;
	
	module.exports = reEscape;


/***/ }),
/* 335 */
/***/ (function(module, exports) {

	/** Used to match template delimiters. */
	var reEvaluate = /<%([\s\S]+?)%>/g;
	
	module.exports = reEvaluate;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    charsLeftIndex = __webpack_require__(319),
	    isIterateeCall = __webpack_require__(180),
	    trimmedLeftIndex = __webpack_require__(321);
	
	/**
	 * Removes leading whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trimLeft('  abc  ');
	 * // => 'abc  '
	 *
	 * _.trimLeft('-_-abc-_-', '_-');
	 * // => 'abc-_-'
	 */
	function trimLeft(string, chars, guard) {
	  var value = string;
	  string = baseToString(string);
	  if (!string) {
	    return string;
	  }
	  if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	    return string.slice(trimmedLeftIndex(string));
	  }
	  return string.slice(charsLeftIndex(string, (chars + '')));
	}
	
	module.exports = trimLeft;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    charsRightIndex = __webpack_require__(320),
	    isIterateeCall = __webpack_require__(180),
	    trimmedRightIndex = __webpack_require__(323);
	
	/**
	 * Removes trailing whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trimRight('  abc  ');
	 * // => '  abc'
	 *
	 * _.trimRight('-_-abc-_-', '_-');
	 * // => '-_-abc'
	 */
	function trimRight(string, chars, guard) {
	  var value = string;
	  string = baseToString(string);
	  if (!string) {
	    return string;
	  }
	  if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	    return string.slice(0, trimmedRightIndex(string) + 1);
	  }
	  return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	}
	
	module.exports = trimRight;


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    isIterateeCall = __webpack_require__(180),
	    isObject = __webpack_require__(159),
	    isRegExp = __webpack_require__(210);
	
	/** Used as default options for `_.trunc`. */
	var DEFAULT_TRUNC_LENGTH = 30,
	    DEFAULT_TRUNC_OMISSION = '...';
	
	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;
	
	/**
	 * Truncates `string` if it's longer than the given maximum string length.
	 * The last characters of the truncated string are replaced with the omission
	 * string which defaults to "...".
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to truncate.
	 * @param {Object|number} [options] The options object or maximum string length.
	 * @param {number} [options.length=30] The maximum string length.
	 * @param {string} [options.omission='...'] The string to indicate text is omitted.
	 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {string} Returns the truncated string.
	 * @example
	 *
	 * _.trunc('hi-diddly-ho there, neighborino');
	 * // => 'hi-diddly-ho there, neighbo...'
	 *
	 * _.trunc('hi-diddly-ho there, neighborino', 24);
	 * // => 'hi-diddly-ho there, n...'
	 *
	 * _.trunc('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': ' '
	 * });
	 * // => 'hi-diddly-ho there,...'
	 *
	 * _.trunc('hi-diddly-ho there, neighborino', {
	 *   'length': 24,
	 *   'separator': /,? +/
	 * });
	 * // => 'hi-diddly-ho there...'
	 *
	 * _.trunc('hi-diddly-ho there, neighborino', {
	 *   'omission': ' [...]'
	 * });
	 * // => 'hi-diddly-ho there, neig [...]'
	 */
	function trunc(string, options, guard) {
	  if (guard && isIterateeCall(string, options, guard)) {
	    options = undefined;
	  }
	  var length = DEFAULT_TRUNC_LENGTH,
	      omission = DEFAULT_TRUNC_OMISSION;
	
	  if (options != null) {
	    if (isObject(options)) {
	      var separator = 'separator' in options ? options.separator : separator;
	      length = 'length' in options ? (+options.length || 0) : length;
	      omission = 'omission' in options ? baseToString(options.omission) : omission;
	    } else {
	      length = +options || 0;
	    }
	  }
	  string = baseToString(string);
	  if (length >= string.length) {
	    return string;
	  }
	  var end = length - omission.length;
	  if (end < 1) {
	    return omission;
	  }
	  var result = string.slice(0, end);
	  if (separator == null) {
	    return result + omission;
	  }
	  if (isRegExp(separator)) {
	    if (string.slice(end).search(separator)) {
	      var match,
	          newEnd,
	          substring = string.slice(0, end);
	
	      if (!separator.global) {
	        separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	      }
	      separator.lastIndex = 0;
	      while ((match = separator.exec(substring))) {
	        newEnd = match.index;
	      }
	      result = result.slice(0, newEnd == null ? end : newEnd);
	    }
	  } else if (string.indexOf(separator, end) != end) {
	    var index = result.lastIndexOf(separator);
	    if (index > -1) {
	      result = result.slice(0, index);
	    }
	  }
	  return result + omission;
	}
	
	module.exports = trunc;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    unescapeHtmlChar = __webpack_require__(340);
	
	/** Used to match HTML entities and HTML characters. */
	var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	    reHasEscapedHtml = RegExp(reEscapedHtml.source);
	
	/**
	 * The inverse of `_.escape`; this method converts the HTML entities
	 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	 * corresponding characters.
	 *
	 * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	 * entities use a third-party library like [_he_](https://mths.be/he).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to unescape.
	 * @returns {string} Returns the unescaped string.
	 * @example
	 *
	 * _.unescape('fred, barney, &amp; pebbles');
	 * // => 'fred, barney, & pebbles'
	 */
	function unescape(string) {
	  string = baseToString(string);
	  return (string && reHasEscapedHtml.test(string))
	    ? string.replace(reEscapedHtml, unescapeHtmlChar)
	    : string;
	}
	
	module.exports = unescape;


/***/ }),
/* 340 */
/***/ (function(module, exports) {

	/** Used to map HTML entities to characters. */
	var htmlUnescapes = {
	  '&amp;': '&',
	  '&lt;': '<',
	  '&gt;': '>',
	  '&quot;': '"',
	  '&#39;': "'",
	  '&#96;': '`'
	};
	
	/**
	 * Used by `_.unescape` to convert HTML entities to characters.
	 *
	 * @private
	 * @param {string} chr The matched character to unescape.
	 * @returns {string} Returns the unescaped character.
	 */
	function unescapeHtmlChar(chr) {
	  return htmlUnescapes[chr];
	}
	
	module.exports = unescapeHtmlChar;


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'assign': __webpack_require__(342),
	  'create': __webpack_require__(344),
	  'defaults': __webpack_require__(345),
	  'defaultsDeep': __webpack_require__(348),
	  'extend': __webpack_require__(353),
	  'findKey': __webpack_require__(354),
	  'findLastKey': __webpack_require__(367),
	  'forIn': __webpack_require__(370),
	  'forInRight': __webpack_require__(372),
	  'forOwn': __webpack_require__(373),
	  'forOwnRight': __webpack_require__(375),
	  'functions': __webpack_require__(263),
	  'get': __webpack_require__(376),
	  'has': __webpack_require__(377),
	  'invert': __webpack_require__(378),
	  'keys': __webpack_require__(155),
	  'keysIn': __webpack_require__(169),
	  'mapKeys': __webpack_require__(379),
	  'mapValues': __webpack_require__(381),
	  'merge': __webpack_require__(349),
	  'methods': __webpack_require__(382),
	  'omit': __webpack_require__(383),
	  'pairs': __webpack_require__(206),
	  'pick': __webpack_require__(394),
	  'result': __webpack_require__(395),
	  'set': __webpack_require__(396),
	  'transform': __webpack_require__(397),
	  'values': __webpack_require__(215),
	  'valuesIn': __webpack_require__(398)
	};


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	var assignWith = __webpack_require__(329),
	    baseAssign = __webpack_require__(153),
	    createAssigner = __webpack_require__(343);
	
	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it's invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});
	
	module.exports = assign;


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	var bindCallback = __webpack_require__(178),
	    isIterateeCall = __webpack_require__(180),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;
	
	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}
	
	module.exports = createAssigner;


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssign = __webpack_require__(153),
	    baseCreate = __webpack_require__(234),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates an object that inherits from the given `prototype` object. If a
	 * `properties` object is provided its own enumerable properties are assigned
	 * to the created object.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} prototype The object to inherit from.
	 * @param {Object} [properties] The properties to assign to the object.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * function Shape() {
	 *   this.x = 0;
	 *   this.y = 0;
	 * }
	 *
	 * function Circle() {
	 *   Shape.call(this);
	 * }
	 *
	 * Circle.prototype = _.create(Shape.prototype, {
	 *   'constructor': Circle
	 * });
	 *
	 * var circle = new Circle;
	 * circle instanceof Circle;
	 * // => true
	 *
	 * circle instanceof Shape;
	 * // => true
	 */
	function create(prototype, properties, guard) {
	  var result = baseCreate(prototype);
	  if (guard && isIterateeCall(prototype, properties, guard)) {
	    properties = undefined;
	  }
	  return properties ? baseAssign(result, properties) : result;
	}
	
	module.exports = create;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(342),
	    assignDefaults = __webpack_require__(346),
	    createDefaults = __webpack_require__(347);
	
	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object for all destination properties that resolve to `undefined`. Once a
	 * property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var defaults = createDefaults(assign, assignDefaults);
	
	module.exports = defaults;


/***/ }),
/* 346 */
/***/ (function(module, exports) {

	/**
	 * Used by `_.defaults` to customize its `_.assign` use.
	 *
	 * @private
	 * @param {*} objectValue The destination object property value.
	 * @param {*} sourceValue The source object property value.
	 * @returns {*} Returns the value to assign to the destination object.
	 */
	function assignDefaults(objectValue, sourceValue) {
	  return objectValue === undefined ? sourceValue : objectValue;
	}
	
	module.exports = assignDefaults;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	var restParam = __webpack_require__(259);
	
	/**
	 * Creates a `_.defaults` or `_.defaultsDeep` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Function} Returns the new defaults function.
	 */
	function createDefaults(assigner, customizer) {
	  return restParam(function(args) {
	    var object = args[0];
	    if (object == null) {
	      return object;
	    }
	    args.push(customizer);
	    return assigner.apply(undefined, args);
	  });
	}
	
	module.exports = createDefaults;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	var createDefaults = __webpack_require__(347),
	    merge = __webpack_require__(349),
	    mergeDefaults = __webpack_require__(352);
	
	/**
	 * This method is like `_.defaults` except that it recursively assigns
	 * default properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	 * // => { 'user': { 'name': 'barney', 'age': 36 } }
	 *
	 */
	var defaultsDeep = createDefaults(merge, mergeDefaults);
	
	module.exports = defaultsDeep;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(350),
	    createAssigner = __webpack_require__(343);
	
	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it's invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);
	
	module.exports = merge;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(152),
	    baseMergeDeep = __webpack_require__(351),
	    isArray = __webpack_require__(167),
	    isArrayLike = __webpack_require__(161),
	    isObject = __webpack_require__(159),
	    isObjectLike = __webpack_require__(160),
	    isTypedArray = __webpack_require__(190),
	    keys = __webpack_require__(155);
	
	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);
	
	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;
	
	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}
	
	module.exports = baseMerge;


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(151),
	    isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(167),
	    isArrayLike = __webpack_require__(161),
	    isPlainObject = __webpack_require__(196),
	    isTypedArray = __webpack_require__(190),
	    toPlainObject = __webpack_require__(217);
	
	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];
	
	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;
	
	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);
	
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}
	
	module.exports = baseMergeDeep;


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	var merge = __webpack_require__(349);
	
	/**
	 * Used by `_.defaultsDeep` to customize its `_.merge` use.
	 *
	 * @private
	 * @param {*} objectValue The destination object property value.
	 * @param {*} sourceValue The source object property value.
	 * @returns {*} Returns the value to assign to the destination object.
	 */
	function mergeDefaults(objectValue, sourceValue) {
	  return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	}
	
	module.exports = mergeDefaults;


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(342);


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(170),
	    createFindKey = __webpack_require__(355);
	
	/**
	 * This method is like `_.find` except that it returns the key of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	 * @example
	 *
	 * var users = {
	 *   'barney':  { 'age': 36, 'active': true },
	 *   'fred':    { 'age': 40, 'active': false },
	 *   'pebbles': { 'age': 1,  'active': true }
	 * };
	 *
	 * _.findKey(users, function(chr) {
	 *   return chr.age < 40;
	 * });
	 * // => 'barney' (iteration order is not guaranteed)
	 *
	 * // using the `_.matches` callback shorthand
	 * _.findKey(users, { 'age': 1, 'active': true });
	 * // => 'pebbles'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.findKey(users, 'active', false);
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.findKey(users, 'active');
	 * // => 'barney'
	 */
	var findKey = createFindKey(baseForOwn);
	
	module.exports = findKey;


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseFind = __webpack_require__(366);
	
	/**
	 * Creates a `_.findKey` or `_.findLastKey` function.
	 *
	 * @private
	 * @param {Function} objectFunc The function to iterate over an object.
	 * @returns {Function} Returns the new find function.
	 */
	function createFindKey(objectFunc) {
	  return function(object, predicate, thisArg) {
	    predicate = baseCallback(predicate, thisArg, 3);
	    return baseFind(object, predicate, objectFunc, true);
	  };
	}
	
	module.exports = createFindKey;


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(357),
	    baseMatchesProperty = __webpack_require__(358),
	    bindCallback = __webpack_require__(178),
	    identity = __webpack_require__(179),
	    property = __webpack_require__(364);
	
	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}
	
	module.exports = baseCallback;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(203),
	    getMatchData = __webpack_require__(204),
	    toObject = __webpack_require__(173);
	
	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];
	
	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value && (value !== undefined || (key in toObject(object)));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}
	
	module.exports = baseMatches;


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    baseIsEqual = __webpack_require__(184),
	    baseSlice = __webpack_require__(360),
	    isArray = __webpack_require__(167),
	    isKey = __webpack_require__(361),
	    isStrictComparable = __webpack_require__(205),
	    last = __webpack_require__(362),
	    toObject = __webpack_require__(173),
	    toPath = __webpack_require__(363);
	
	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');
	
	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}
	
	module.exports = baseMatchesProperty;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(173);
	
	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  if (pathKey !== undefined && pathKey in toObject(object)) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}
	
	module.exports = baseGet;


/***/ }),
/* 360 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;
	
	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;
	
	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}
	
	module.exports = baseSlice;


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(167),
	    toObject = __webpack_require__(173);
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}
	
	module.exports = isKey;


/***/ }),
/* 362 */
/***/ (function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}
	
	module.exports = last;


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301),
	    isArray = __webpack_require__(167);
	
	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}
	
	module.exports = toPath;


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(163),
	    basePropertyDeep = __webpack_require__(365),
	    isKey = __webpack_require__(361);
	
	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}
	
	module.exports = property;


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    toPath = __webpack_require__(363);
	
	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}
	
	module.exports = basePropertyDeep;


/***/ }),
/* 366 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	 * without support for callback shorthands and `this` binding, which iterates
	 * over `collection` using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @param {boolean} [retKey] Specify returning the key of the found element
	 *  instead of the element itself.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFind(collection, predicate, eachFunc, retKey) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = retKey ? key : value;
	      return false;
	    }
	  });
	  return result;
	}
	
	module.exports = baseFind;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwnRight = __webpack_require__(368),
	    createFindKey = __webpack_require__(355);
	
	/**
	 * This method is like `_.findKey` except that it iterates over elements of
	 * a collection in the opposite order.
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	 * @example
	 *
	 * var users = {
	 *   'barney':  { 'age': 36, 'active': true },
	 *   'fred':    { 'age': 40, 'active': false },
	 *   'pebbles': { 'age': 1,  'active': true }
	 * };
	 *
	 * _.findLastKey(users, function(chr) {
	 *   return chr.age < 40;
	 * });
	 * // => returns `pebbles` assuming `_.findKey` returns `barney`
	 *
	 * // using the `_.matches` callback shorthand
	 * _.findLastKey(users, { 'age': 36, 'active': true });
	 * // => 'barney'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.findLastKey(users, 'active', false);
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.findLastKey(users, 'active');
	 * // => 'pebbles'
	 */
	var findLastKey = createFindKey(baseForOwnRight);
	
	module.exports = findLastKey;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForRight = __webpack_require__(369),
	    keys = __webpack_require__(155);
	
	/**
	 * The base implementation of `_.forOwnRight` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwnRight(object, iteratee) {
	  return baseForRight(object, iteratee, keys);
	}
	
	module.exports = baseForOwnRight;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(172);
	
	/**
	 * This function is like `baseFor` except that it iterates over properties
	 * in the opposite order.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseForRight = createBaseFor(true);
	
	module.exports = baseForRight;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(171),
	    createForIn = __webpack_require__(371);
	
	/**
	 * Iterates over own and inherited enumerable properties of an object invoking
	 * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	 * with three arguments: (value, key, object). Iteratee functions may exit
	 * iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forIn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	 */
	var forIn = createForIn(baseFor);
	
	module.exports = forIn;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	var bindCallback = __webpack_require__(178),
	    keysIn = __webpack_require__(169);
	
	/**
	 * Creates a function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {Function} objectFunc The function to iterate over an object.
	 * @returns {Function} Returns the new each function.
	 */
	function createForIn(objectFunc) {
	  return function(object, iteratee, thisArg) {
	    if (typeof iteratee != 'function' || thisArg !== undefined) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	    }
	    return objectFunc(object, iteratee, keysIn);
	  };
	}
	
	module.exports = createForIn;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForRight = __webpack_require__(369),
	    createForIn = __webpack_require__(371);
	
	/**
	 * This method is like `_.forIn` except that it iterates over properties of
	 * `object` in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forInRight(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	 */
	var forInRight = createForIn(baseForRight);
	
	module.exports = forInRight;


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(170),
	    createForOwn = __webpack_require__(374);
	
	/**
	 * Iterates over own enumerable properties of an object invoking `iteratee`
	 * for each property. The `iteratee` is bound to `thisArg` and invoked with
	 * three arguments: (value, key, object). Iteratee functions may exit iteration
	 * early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => logs 'a' and 'b' (iteration order is not guaranteed)
	 */
	var forOwn = createForOwn(baseForOwn);
	
	module.exports = forOwn;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	var bindCallback = __webpack_require__(178);
	
	/**
	 * Creates a function for `_.forOwn` or `_.forOwnRight`.
	 *
	 * @private
	 * @param {Function} objectFunc The function to iterate over an object.
	 * @returns {Function} Returns the new each function.
	 */
	function createForOwn(objectFunc) {
	  return function(object, iteratee, thisArg) {
	    if (typeof iteratee != 'function' || thisArg !== undefined) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	    }
	    return objectFunc(object, iteratee);
	  };
	}
	
	module.exports = createForOwn;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwnRight = __webpack_require__(368),
	    createForOwn = __webpack_require__(374);
	
	/**
	 * This method is like `_.forOwn` except that it iterates over properties of
	 * `object` in the opposite order.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwnRight(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	 */
	var forOwnRight = createForOwn(baseForOwnRight);
	
	module.exports = forOwnRight;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    toPath = __webpack_require__(363);
	
	/**
	 * Gets the property value at `path` of `object`. If the resolved value is
	 * `undefined` the `defaultValue` is used in its place.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, toPath(path), (path + ''));
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    baseSlice = __webpack_require__(360),
	    isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(167),
	    isIndex = __webpack_require__(168),
	    isKey = __webpack_require__(361),
	    isLength = __webpack_require__(164),
	    last = __webpack_require__(362),
	    toPath = __webpack_require__(363);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if `path` is a direct property.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': { 'c': 3 } } };
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b.c');
	 * // => true
	 *
	 * _.has(object, ['a', 'b', 'c']);
	 * // => true
	 */
	function has(object, path) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasOwnProperty.call(object, path);
	  if (!result && !isKey(path)) {
	    path = toPath(path);
	    object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    if (object == null) {
	      return false;
	    }
	    path = last(path);
	    result = hasOwnProperty.call(object, path);
	  }
	  return result || (isLength(object.length) && isIndex(path, object.length) &&
	    (isArray(object) || isArguments(object)));
	}
	
	module.exports = has;


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	var isIterateeCall = __webpack_require__(180),
	    keys = __webpack_require__(155);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an object composed of the inverted keys and values of `object`.
	 * If `object` contains duplicate values, subsequent values overwrite property
	 * assignments of previous values unless `multiValue` is `true`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to invert.
	 * @param {boolean} [multiValue] Allow multiple values per key.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Object} Returns the new inverted object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2, 'c': 1 };
	 *
	 * _.invert(object);
	 * // => { '1': 'c', '2': 'b' }
	 *
	 * // with `multiValue`
	 * _.invert(object, true);
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 */
	function invert(object, multiValue, guard) {
	  if (guard && isIterateeCall(object, multiValue, guard)) {
	    multiValue = undefined;
	  }
	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = {};
	
	  while (++index < length) {
	    var key = props[index],
	        value = object[key];
	
	    if (multiValue) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }
	    else {
	      result[value] = key;
	    }
	  }
	  return result;
	}
	
	module.exports = invert;


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	var createObjectMapper = __webpack_require__(380);
	
	/**
	 * The opposite of `_.mapValues`; this method creates an object with the
	 * same values as `object` and keys generated by running each own enumerable
	 * property of `object` through `iteratee`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns the new mapped object.
	 * @example
	 *
	 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   return key + value;
	 * });
	 * // => { 'a1': 1, 'b2': 2 }
	 */
	var mapKeys = createObjectMapper(true);
	
	module.exports = mapKeys;


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseForOwn = __webpack_require__(170);
	
	/**
	 * Creates a function for `_.mapKeys` or `_.mapValues`.
	 *
	 * @private
	 * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	 * @returns {Function} Returns the new map function.
	 */
	function createObjectMapper(isMapKeys) {
	  return function(object, iteratee, thisArg) {
	    var result = {};
	    iteratee = baseCallback(iteratee, thisArg, 3);
	
	    baseForOwn(object, function(value, key, object) {
	      var mapped = iteratee(value, key, object);
	      key = isMapKeys ? mapped : key;
	      value = isMapKeys ? value : mapped;
	      result[key] = value;
	    });
	    return result;
	  };
	}
	
	module.exports = createObjectMapper;


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	var createObjectMapper = __webpack_require__(380);
	
	/**
	 * Creates an object with the same keys as `object` and values generated by
	 * running each own enumerable property of `object` through `iteratee`. The
	 * iteratee function is bound to `thisArg` and invoked with three arguments:
	 * (value, key, object).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns the new mapped object.
	 * @example
	 *
	 * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	 *   return n * 3;
	 * });
	 * // => { 'a': 3, 'b': 6 }
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * // using the `_.property` callback shorthand
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */
	var mapValues = createObjectMapper();
	
	module.exports = mapValues;


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(263);


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(384),
	    baseDifference = __webpack_require__(385),
	    baseFlatten = __webpack_require__(261),
	    bindCallback = __webpack_require__(178),
	    keysIn = __webpack_require__(169),
	    pickByArray = __webpack_require__(392),
	    pickByCallback = __webpack_require__(393),
	    restParam = __webpack_require__(259);
	
	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable properties of `object` that are not omitted.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to omit, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.omit(object, 'age');
	 * // => { 'user': 'fred' }
	 *
	 * _.omit(object, _.isNumber);
	 * // => { 'user': 'fred' }
	 */
	var omit = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  if (typeof props[0] != 'function') {
	    var props = arrayMap(baseFlatten(props), String);
	    return pickByArray(object, baseDifference(keysIn(object), props));
	  }
	  var predicate = bindCallback(props[0], props[1], 3);
	  return pickByCallback(object, function(value, key, object) {
	    return !predicate(value, key, object);
	  });
	});
	
	module.exports = omit;


/***/ }),
/* 384 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	
	module.exports = arrayMap;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(386),
	    cacheIndexOf = __webpack_require__(388),
	    createCache = __webpack_require__(389);
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/**
	 * The base implementation of `_.difference` which accepts a single array
	 * of values to exclude.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values) {
	  var length = array ? array.length : 0,
	      result = [];
	
	  if (!length) {
	    return result;
	  }
	  var index = -1,
	      indexOf = baseIndexOf,
	      isCommon = true,
	      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	      valuesLength = values.length;
	
	  if (cache) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	    values = cache;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index];
	
	    if (isCommon && value === value) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === value) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (indexOf(values, value, 0) < 0) {
	      result.push(value);
	    }
	  }
	  return result;
	}
	
	module.exports = baseDifference;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	var indexOfNaN = __webpack_require__(387);
	
	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;
	
	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = baseIndexOf;


/***/ }),
/* 387 */
/***/ (function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);
	
	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = indexOfNaN;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];
	
	  return result ? 0 : -1;
	}
	
	module.exports = cacheIndexOf;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(390),
	    getNative = __webpack_require__(156);
	
	/** Native method references. */
	var Set = getNative(global, 'Set');
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');
	
	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}
	
	module.exports = createCache;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(391),
	    getNative = __webpack_require__(156);
	
	/** Native method references. */
	var Set = getNative(global, 'Set');
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');
	
	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;
	
	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}
	
	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;
	
	module.exports = SetCache;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(159);
	
	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}
	
	module.exports = cachePush;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(173);
	
	/**
	 * A specialized version of `_.pick` which picks `object` properties specified
	 * by `props`.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property names to pick.
	 * @returns {Object} Returns the new object.
	 */
	function pickByArray(object, props) {
	  object = toObject(object);
	
	  var index = -1,
	      length = props.length,
	      result = {};
	
	  while (++index < length) {
	    var key = props[index];
	    if (key in object) {
	      result[key] = object[key];
	    }
	  }
	  return result;
	}
	
	module.exports = pickByArray;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(197);
	
	/**
	 * A specialized version of `_.pick` which picks `object` properties `predicate`
	 * returns truthy for.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Object} Returns the new object.
	 */
	function pickByCallback(object, predicate) {
	  var result = {};
	  baseForIn(object, function(value, key, object) {
	    if (predicate(value, key, object)) {
	      result[key] = value;
	    }
	  });
	  return result;
	}
	
	module.exports = pickByCallback;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261),
	    bindCallback = __webpack_require__(178),
	    pickByArray = __webpack_require__(392),
	    pickByCallback = __webpack_require__(393),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates an object composed of the picked `object` properties. Property
	 * names may be specified as individual arguments or as arrays of property
	 * names. If `predicate` is provided it's invoked for each property of `object`
	 * picking the properties `predicate` returns truthy for. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to pick, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.pick(object, 'user');
	 * // => { 'user': 'fred' }
	 *
	 * _.pick(object, _.isString);
	 * // => { 'user': 'fred' }
	 */
	var pick = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  return typeof props[0] == 'function'
	    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	    : pickByArray(object, baseFlatten(props));
	});
	
	module.exports = pick;


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    baseSlice = __webpack_require__(360),
	    isFunction = __webpack_require__(158),
	    isKey = __webpack_require__(361),
	    last = __webpack_require__(362),
	    toPath = __webpack_require__(363);
	
	/**
	 * This method is like `_.get` except that if the resolved value is a function
	 * it's invoked with the `this` binding of its parent object and its result
	 * is returned.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to resolve.
	 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	 *
	 * _.result(object, 'a[0].b.c1');
	 * // => 3
	 *
	 * _.result(object, 'a[0].b.c2');
	 * // => 4
	 *
	 * _.result(object, 'a.b.c', 'default');
	 * // => 'default'
	 *
	 * _.result(object, 'a.b.c', _.constant('default'));
	 * // => 'default'
	 */
	function result(object, path, defaultValue) {
	  var result = object == null ? undefined : object[path];
	  if (result === undefined) {
	    if (object != null && !isKey(path, object)) {
	      path = toPath(path);
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      result = object == null ? undefined : object[last(path)];
	    }
	    result = result === undefined ? defaultValue : result;
	  }
	  return isFunction(result) ? result.call(object) : result;
	}
	
	module.exports = result;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	var isIndex = __webpack_require__(168),
	    isKey = __webpack_require__(361),
	    isObject = __webpack_require__(159),
	    toPath = __webpack_require__(363);
	
	/**
	 * Sets the property value of `path` on `object`. If a portion of `path`
	 * does not exist it's created.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to augment.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.set(object, 'a[0].b.c', 4);
	 * console.log(object.a[0].b.c);
	 * // => 4
	 *
	 * _.set(object, 'x[0].y.z', 5);
	 * console.log(object.x[0].y.z);
	 * // => 5
	 */
	function set(object, path, value) {
	  if (object == null) {
	    return object;
	  }
	  var pathKey = (path + '');
	  path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);
	
	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;
	
	  while (nested != null && ++index < length) {
	    var key = path[index];
	    if (isObject(nested)) {
	      if (index == lastIndex) {
	        nested[key] = value;
	      } else if (nested[key] == null) {
	        nested[key] = isIndex(path[index + 1]) ? [] : {};
	      }
	    }
	    nested = nested[key];
	  }
	  return object;
	}
	
	module.exports = set;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(152),
	    baseCallback = __webpack_require__(356),
	    baseCreate = __webpack_require__(234),
	    baseForOwn = __webpack_require__(170),
	    isArray = __webpack_require__(167),
	    isFunction = __webpack_require__(158),
	    isObject = __webpack_require__(159),
	    isTypedArray = __webpack_require__(190);
	
	/**
	 * An alternative to `_.reduce`; this method transforms `object` to a new
	 * `accumulator` object which is the result of running each of its own enumerable
	 * properties through `iteratee`, with each invocation potentially mutating
	 * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	 * with four arguments: (accumulator, value, key, object). Iteratee functions
	 * may exit iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Array|Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The custom accumulator value.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.transform([2, 3, 4], function(result, n) {
	 *   result.push(n *= n);
	 *   return n % 2 == 0;
	 * });
	 * // => [4, 9]
	 *
	 * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	 *   result[key] = n * 3;
	 * });
	 * // => { 'a': 3, 'b': 6 }
	 */
	function transform(object, iteratee, accumulator, thisArg) {
	  var isArr = isArray(object) || isTypedArray(object);
	  iteratee = baseCallback(iteratee, thisArg, 4);
	
	  if (accumulator == null) {
	    if (isArr || isObject(object)) {
	      var Ctor = object.constructor;
	      if (isArr) {
	        accumulator = isArray(object) ? new Ctor : [];
	      } else {
	        accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	      }
	    } else {
	      accumulator = {};
	    }
	  }
	  (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	    return iteratee(accumulator, value, index, object);
	  });
	  return accumulator;
	}
	
	module.exports = transform;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(216),
	    keysIn = __webpack_require__(169);
	
	/**
	 * Creates an array of the own and inherited enumerable property values
	 * of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.valuesIn(new Foo);
	 * // => [1, 2, 3] (iteration order is not guaranteed)
	 */
	function valuesIn(object) {
	  return baseValues(object, keysIn(object));
	}
	
	module.exports = valuesIn;


/***/ }),
/* 399 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_399__;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _translation = __webpack_require__(142);
	
	var _uuid = __webpack_require__(401);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Dropdown = function (_Component) {
	    _inherits(Dropdown, _Component);
	
	    function Dropdown(props) {
	        _classCallCheck(this, Dropdown);
	
	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }
	
	    /**
	     * Component will mount
	     */
	
	
	    Dropdown.prototype.componentWillMount = function componentWillMount() {
	        this._htmlId = _uuid2.default.v4();
	    };
	
	    /**
	     * Called when component is mounted.
	     */
	
	
	    Dropdown.prototype.componentDidMount = function componentDidMount() {
	        if (0 !== this.props.operationList.length && _reactDom2.default.findDOMNode(this.refs.dropdown)) {
	            componentHandler.upgradeElement(_reactDom2.default.findDOMNode(this.refs.dropdown));
	        }
	    };
	
	    /**
	     * Component will receive props.
	     * @param {Object} nextProps the next props
	     */
	
	
	    Dropdown.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (0 !== nextProps.operationList.length && _reactDom2.default.findDOMNode(this.refs.dropdown)) {
	            componentHandler.upgradeElement(_reactDom2.default.findDOMNode(this.refs.dropdown));
	        }
	    };
	
	    /**
	     * Called before component is unmounted.
	     */
	
	
	    Dropdown.prototype.componentWillUnmount = function componentWillUnmount() {
	        if (0 !== this.props.operationList.length && _reactDom2.default.findDOMNode(this.refs.dropdown)) {
	            componentHandler.downgradeElements(_reactDom2.default.findDOMNode(this.refs.dropdown));
	        }
	    };
	
	    /**
	     * Render the component.
	     * @returns  {XML} Htm code.
	     */
	
	
	    Dropdown.prototype.render = function render() {
	        var _props = this.props,
	            iconProps = _props.iconProps,
	            operationList = _props.operationList,
	            position = _props.position,
	            shape = _props.shape;
	
	        var id = this._htmlId;
	        if (0 === operationList.length) {
	            return null;
	        }
	        return _react2.default.createElement(ActionMenu, { id: id, iconProps: iconProps, operationList: operationList, position: position, shape: shape });
	    };
	
	    return Dropdown;
	}(_react.Component);
	
	var ActionMenu = function (_React$Component) {
	    _inherits(ActionMenu, _React$Component);
	
	    /**
	     * Handle action on selected item.
	     * @param {function} action Action to call
	     * @returns {function} Function called when item is selected.
	     * @private
	     */
	
	    function ActionMenu(props) {
	        _classCallCheck(this, ActionMenu);
	
	        var _this2 = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	        _this2.state = {
	            menuVisible: false
	        };
	        return _this2;
	    }
	
	    ActionMenu.prototype._handleAction = function _handleAction(action) {
	        var _this3 = this;
	
	        return function () {
	            if (_this3.props.operationParam) {
	                action(_this3.props.operationParam);
	            } else {
	                action();
	            }
	        };
	    };
	
	    ActionMenu.prototype._handleButtonClick = function _handleButtonClick() {
	        this.setState({ menuVisible: !this.state.menuVisible });
	    };
	
	    ActionMenu.prototype.renderMenuItems = function renderMenuItems(menuVisible, operationList) {
	        var _this4 = this;
	
	        operationList.map(function (operation, idx) {
	
	            return _react2.default.createElement(
	                'li',
	                { className: 'mdl-menu__item ' + operation.style, key: idx,
	                    onClick: _this4._handleAction(operation.action) },
	                (0, _translation.translate)(operation.label)
	            );
	        });
	    };
	
	    ActionMenu.prototype.render = function render() {
	        var _this5 = this;
	
	        var menuVisible = this.state.menuVisible;
	        var _props2 = this.props,
	            id = _props2.id,
	            iconProps = _props2.iconProps,
	            operationList = _props2.operationList,
	            position = _props2.position,
	            shape = _props2.shape;
	
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(_button2.default, { icon: iconProps.name, id: id, isJs: true, shape: shape,
	                handleOnClick: this._handleButtonClick.bind(this) }),
	            _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'ul',
	                    { className: 'mdl-menu mdl-menu--bottom-' + position + ' mdl-js-menu mdl-js-ripple-effect',
	                        htmlFor: id,
	                        ref: 'dropdown' },
	                    operationList.map(function (operation, idx) {
	
	                        return _react2.default.createElement(
	                            'li',
	                            { className: 'mdl-menu__item ' + operation.style, key: idx,
	                                onClick: _this5._handleAction(operation.action) },
	                            (0, _translation.translate)(operation.label)
	                        );
	                    })
	                )
	            )
	        );
	    };
	
	    return ActionMenu;
	}(_react2.default.Component);
	
	Dropdown.displayName = 'Dropdown';
	Dropdown.defaultProps = {
	    position: 'right',
	    iconProps: {
	        name: 'more_vert'
	    },
	    shape: 'icon',
	    operationList: []
	};
	Dropdown.propTypes = {
	    position: _react.PropTypes.string,
	    iconProps: _react.PropTypes.object,
	    operationList: _react.PropTypes.array,
	    shape: _react.PropTypes.string
	};
	exports.default = Dropdown;
	module.exports = exports['default'];

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php
	
	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required
	var _rng = __webpack_require__(402);
	
	// Maps for number <-> hex string conversion
	var _byteToHex = [];
	var _hexToByte = {};
	for (var i = 0; i < 256; i++) {
	  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	  _hexToByte[_byteToHex[i]] = i;
	}
	
	// **`parse()` - Parse a UUID into it's component bytes**
	function parse(s, buf, offset) {
	  var i = (buf && offset) || 0, ii = 0;
	
	  buf = buf || [];
	  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	    if (ii < 16) { // Don't overflow!
	      buf[i + ii++] = _hexToByte[oct];
	    }
	  });
	
	  // Zero out remaining bytes if string was short
	  while (ii < 16) {
	    buf[i + ii++] = 0;
	  }
	
	  return buf;
	}
	
	// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	function unparse(buf, offset) {
	  var i = offset || 0, bth = _byteToHex;
	  return  bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]];
	}
	
	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html
	
	// random #'s we need to init node and clockseq
	var _seedBytes = _rng();
	
	// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId = [
	  _seedBytes[0] | 0x01,
	  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	];
	
	// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
	
	// Previous uuid creation time
	var _lastMSecs = 0, _lastNSecs = 0;
	
	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];
	
	  options = options || {};
	
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
	
	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
	
	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
	
	  // Time since last uuid creation (in msecs)
	  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
	
	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }
	
	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }
	
	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }
	
	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;
	
	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;
	
	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;
	
	  // `time_mid`
	  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;
	
	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;
	
	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;
	
	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;
	
	  // `node`
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; n++) {
	    b[i + n] = node[n];
	  }
	
	  return buf ? buf : unparse(b);
	}
	
	// **`v4()` - Generate random UUID**
	
	// See https://github.com/broofa/node-uuid for API details
	function v4(options, buf, offset) {
	  // Deprecated - 'format' argument, as supported in v1.2
	  var i = buf && offset || 0;
	
	  if (typeof(options) == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};
	
	  var rnds = options.random || (options.rng || _rng)();
	
	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;
	
	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ii++) {
	      buf[i + ii] = rnds[ii];
	    }
	  }
	
	  return buf || unparse(rnds);
	}
	
	// Export public API
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	uuid.parse = parse;
	uuid.unparse = unparse;
	
	module.exports = uuid;


/***/ }),
/* 402 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	var rng;
	
	var crypto = global.crypto || global.msCrypto; // for IE 11
	if (crypto && crypto.getRandomValues) {
	  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	  // Moderately fast, high quality
	  var _rnds8 = new Uint8Array(16);
	  rng = function whatwgRNG() {
	    crypto.getRandomValues(_rnds8);
	    return _rnds8;
	  };
	}
	
	if (!rng) {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var  _rnds = new Array(16);
	  rng = function() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }
	
	    return _rnds;
	  };
	}
	
	module.exports = rng;
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _iconDropdown = __webpack_require__(405);
	
	var _iconDropdown2 = _interopRequireDefault(_iconDropdown);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	/**
	* HeaderActions component.
	*/
	var HeaderActions = function (_Component) {
	    _inherits(HeaderActions, _Component);
	
	    function HeaderActions(props) {
	        _classCallCheck(this, HeaderActions);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._getStateFromStore = function () {
	            return { actions: _builtInStore2.default.getActions() || { primary: [], secondary: [] } };
	        };
	
	        _this._handleComponentChange = function () {
	            _this.setState(_this._getStateFromStore());
	        };
	
	        _this.state = _this._getStateFromStore();
	        return _this;
	    }
	
	    /** @inheriteddoc */
	
	
	    HeaderActions.prototype.componentWillMount = function componentWillMount() {
	        _builtInStore2.default.addActionsChangeListener(this._handleComponentChange);
	    };
	
	    /** @inheriteddoc */
	
	
	    HeaderActions.prototype.componentWillUnmount = function componentWillUnmount() {
	        _builtInStore2.default.removeActionsChangeListener(this._handleComponentChange);
	    };
	
	    /**
	    * Get state from store
	    * @return {Object} actions extracted from the store
	    */
	
	
	    /**
	    * Component change handler
	    */
	
	
	    /** @inheriteddoc */
	    HeaderActions.prototype.render = function render() {
	        var otherProps = _objectWithoutProperties(this.props, []);
	
	        var actions = this.state.actions;
	
	        return _react2.default.createElement(
	            'div',
	            _extends({ 'data-focus': 'header-actions' }, otherProps),
	            actions.primary.map(function (primary, index) {
	                var action = primary.action,
	                    className = primary.className,
	                    icon = primary.icon,
	                    iconLibrary = primary.iconLibrary,
	                    label = primary.label,
	                    otherProps = _objectWithoutProperties(primary, ['action', 'className', 'icon', 'iconLibrary', 'label']);
	
	                return _react2.default.createElement(_button2.default, _extends({ key: 'header-action-' + label, className: className, handleOnClick: action, icon: icon, iconLibrary: iconLibrary, label: label, shape: 'fab', type: 'button' }, otherProps));
	            }),
	            actions.secondary && actions.secondary.length > 0 && _react2.default.createElement(_iconDropdown2.default, { operationList: actions.secondary })
	        );
	    };
	
	    return HeaderActions;
	}(_react.Component);
	
	//Static props.
	
	
	HeaderActions.displayName = 'HeaderActions';
	//HeaderActions.defaultProps = defaultProps;
	//HeaderActions.propTypes = propTypes;
	
	exports.default = HeaderActions;
	module.exports = exports['default'];

/***/ }),
/* 404 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_404__;

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var _require = __webpack_require__(406),
	    uniqueId = _require.uniqueId;
	
	function isDescendant(parent, child) {
	    var node = child.parentNode;
	    while (node != null) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}
	
	var Dropdown = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(Dropdown, _Component);
	
	    function Dropdown() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, Dropdown);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            visible: false
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    Dropdown.prototype.componentWillMount = function componentWillMount() {
	        this._htmlId = uniqueId('focus-dropdown');
	    };
	
	    Dropdown.prototype.componentDidMount = function componentDidMount() {
	        document.addEventListener('click', this._handleDocumentClick.bind(this));
	    };
	
	    Dropdown.prototype.componentWillUnmount = function componentWillUnmount() {
	        document.removeEventListener('click', this._handleDocumentClick);
	    };
	
	    Dropdown.prototype._handleDocumentClick = function _handleDocumentClick(_ref) {
	        var target = _ref.target;
	        var visible = this.state.visible;
	
	        if (visible) {
	            var dropdownElement = _reactDom2.default.findDOMNode(this.refs.parent);
	            if (!isDescendant(dropdownElement, target)) {
	                this.setState({ visible: false });
	            }
	        }
	    };
	
	    Dropdown.prototype._handleIconClick = function _handleIconClick() {
	        this.setState({ visible: !this.state.visible });
	    };
	
	    Dropdown.prototype._operationActionWrapper = function _operationActionWrapper(action) {
	        var _this2 = this;
	
	        return function () {
	            action();
	            _this2.setState({ visible: false });
	        };
	    };
	
	    Dropdown.prototype.render = function render() {
	        var _this3 = this;
	
	        var _props = this.props,
	            _props$iconProps = _props.iconProps,
	            name = _props$iconProps.name,
	            iconLibrary = _props$iconProps.iconLibrary,
	            operationList = _props.operationList,
	            shape = _props.shape,
	            openDirection = _props.openDirection,
	            buttonType = _props.buttonType;
	        var visible = this.state.visible;
	
	        var id = this._htmlId;
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'icon-dropdown', ref: 'parent' },
	            _react2.default.createElement(_button2.default, {
	                id: id,
	                shape: shape,
	                icon: name,
	                iconLibrary: iconLibrary,
	                handleOnClick: this._handleIconClick.bind(this),
	                type: buttonType
	            }),
	            visible && _react2.default.createElement(
	                'div',
	                { 'data-focus': 'dropdown-menu', 'data-position': openDirection, ref: 'dropdown' },
	                operationList.map(function (_ref2, idx) {
	                    var label = _ref2.label,
	                        action = _ref2.action;
	                    return _react2.default.createElement(
	                        'div',
	                        { key: idx, 'data-role': 'dropdown-item', onClick: _this3._operationActionWrapper(action) },
	                        _this3.i18n(label)
	                    );
	                })
	            )
	        );
	    };
	
	    return Dropdown;
	}(_react.Component)) || _class;
	
	Dropdown.propTypes = {
	    openDirection: _react.PropTypes.oneOf(['bottom-left', 'bottom-right', 'top-left', 'top-right'])
	};
	Dropdown.defaultProps = {
	    openDirection: 'bottom-left',
	    iconProps: {
	        name: 'more_vert',
	        iconLibrary: 'material'
	    },
	    shape: 'fab',
	    operationList: [],
	    buttonType: 'submit'
	};
	exports.default = Dropdown;
	module.exports = exports['default'];

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'attempt': __webpack_require__(330),
	  'callback': __webpack_require__(407),
	  'constant': __webpack_require__(409),
	  'identity': __webpack_require__(179),
	  'iteratee': __webpack_require__(410),
	  'matches': __webpack_require__(408),
	  'matchesProperty': __webpack_require__(411),
	  'method': __webpack_require__(412),
	  'methodOf': __webpack_require__(414),
	  'mixin': __webpack_require__(415),
	  'noop': __webpack_require__(242),
	  'property': __webpack_require__(364),
	  'propertyOf': __webpack_require__(416),
	  'range': __webpack_require__(417),
	  'times': __webpack_require__(418),
	  'uniqueId': __webpack_require__(419)
	};


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    isIterateeCall = __webpack_require__(180),
	    isObjectLike = __webpack_require__(160),
	    matches = __webpack_require__(408);
	
	/**
	 * Creates a function that invokes `func` with the `this` binding of `thisArg`
	 * and arguments of the created function. If `func` is a property name the
	 * created callback returns the property value for a given element. If `func`
	 * is an object the created callback returns `true` for elements that contain
	 * the equivalent object properties, otherwise it returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias iteratee
	 * @category Utility
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Function} Returns the callback.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 }
	 * ];
	 *
	 * // wrap to create custom callback shorthands
	 * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	 *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	 *   if (!match) {
	 *     return callback(func, thisArg);
	 *   }
	 *   return function(object) {
	 *     return match[2] == 'gt'
	 *       ? object[match[1]] > match[3]
	 *       : object[match[1]] < match[3];
	 *   };
	 * });
	 *
	 * _.filter(users, 'age__gt36');
	 * // => [{ 'user': 'fred', 'age': 40 }]
	 */
	function callback(func, thisArg, guard) {
	  if (guard && isIterateeCall(func, thisArg, guard)) {
	    thisArg = undefined;
	  }
	  return isObjectLike(func)
	    ? matches(func)
	    : baseCallback(func, thisArg);
	}
	
	module.exports = callback;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(150),
	    baseMatches = __webpack_require__(357);
	
	/**
	 * Creates a function that performs a deep comparison between a given object
	 * and `source`, returning `true` if the given object has equivalent property
	 * values, else `false`.
	 *
	 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	 * numbers, `Object` objects, regexes, and strings. Objects are compared by
	 * their own, not inherited, enumerable properties. For comparing a single
	 * own or inherited property value see `_.matchesProperty`.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	 * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	 */
	function matches(source) {
	  return baseMatches(baseClone(source, true));
	}
	
	module.exports = matches;


/***/ }),
/* 409 */
/***/ (function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var getter = _.constant(object);
	 *
	 * getter() === object;
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}
	
	module.exports = constant;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(407);


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(150),
	    baseMatchesProperty = __webpack_require__(358);
	
	/**
	 * Creates a function that compares the property value of `path` on a given
	 * object to `value`.
	 *
	 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	 * numbers, `Object` objects, regexes, and strings. Objects are compared by
	 * their own, not inherited, enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * _.find(users, _.matchesProperty('user', 'fred'));
	 * // => { 'user': 'fred' }
	 */
	function matchesProperty(path, srcValue) {
	  return baseMatchesProperty(path, baseClone(srcValue, true));
	}
	
	module.exports = matchesProperty;


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	var invokePath = __webpack_require__(413),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates a function that invokes the method at `path` on a given object.
	 * Any additional arguments are provided to the invoked method.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': _.constant(2) } } },
	 *   { 'a': { 'b': { 'c': _.constant(1) } } }
	 * ];
	 *
	 * _.map(objects, _.method('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	var method = restParam(function(path, args) {
	  return function(object) {
	    return invokePath(object, path, args);
	  };
	});
	
	module.exports = method;


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    baseSlice = __webpack_require__(360),
	    isKey = __webpack_require__(361),
	    last = __webpack_require__(362),
	    toPath = __webpack_require__(363);
	
	/**
	 * Invokes the method at `path` on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {Array} args The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 */
	function invokePath(object, path, args) {
	  if (object != null && !isKey(path, object)) {
	    path = toPath(path);
	    object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    path = last(path);
	  }
	  var func = object == null ? object : object[path];
	  return func == null ? undefined : func.apply(object, args);
	}
	
	module.exports = invokePath;


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	var invokePath = __webpack_require__(413),
	    restParam = __webpack_require__(259);
	
	/**
	 * The opposite of `_.method`; this method creates a function that invokes
	 * the method at a given path on `object`. Any additional arguments are
	 * provided to the invoked method.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Object} object The object to query.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var array = _.times(3, _.constant),
	 *     object = { 'a': array, 'b': array, 'c': array };
	 *
	 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	 * // => [2, 0]
	 *
	 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	 * // => [2, 0]
	 */
	var methodOf = restParam(function(object, args) {
	  return function(path) {
	    return invokePath(object, path, args);
	  };
	});
	
	module.exports = methodOf;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(151),
	    arrayPush = __webpack_require__(262),
	    baseFunctions = __webpack_require__(264),
	    isFunction = __webpack_require__(158),
	    isObject = __webpack_require__(159),
	    keys = __webpack_require__(155);
	
	/**
	 * Adds all own enumerable function properties of a source object to the
	 * destination object. If `object` is a function then methods are added to
	 * its prototype as well.
	 *
	 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	 * avoid conflicts caused by modifying the original.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Function|Object} [object=lodash] The destination object.
	 * @param {Object} source The object of functions to add.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.chain=true] Specify whether the functions added
	 *  are chainable.
	 * @returns {Function|Object} Returns `object`.
	 * @example
	 *
	 * function vowels(string) {
	 *   return _.filter(string, function(v) {
	 *     return /[aeiou]/i.test(v);
	 *   });
	 * }
	 *
	 * _.mixin({ 'vowels': vowels });
	 * _.vowels('fred');
	 * // => ['e']
	 *
	 * _('fred').vowels().value();
	 * // => ['e']
	 *
	 * _.mixin({ 'vowels': vowels }, { 'chain': false });
	 * _('fred').vowels();
	 * // => ['e']
	 */
	function mixin(object, source, options) {
	  var methodNames = baseFunctions(source, keys(source));
	
	  var chain = true,
	      index = -1,
	      isFunc = isFunction(object),
	      length = methodNames.length;
	
	  if (options === false) {
	    chain = false;
	  } else if (isObject(options) && 'chain' in options) {
	    chain = options.chain;
	  }
	  while (++index < length) {
	    var methodName = methodNames[index],
	        func = source[methodName];
	
	    object[methodName] = func;
	    if (isFunc) {
	      object.prototype[methodName] = (function(func) {
	        return function() {
	          var chainAll = this.__chain__;
	          if (chain || chainAll) {
	            var result = object(this.__wrapped__),
	                actions = result.__actions__ = arrayCopy(this.__actions__);
	
	            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	            result.__chain__ = chainAll;
	            return result;
	          }
	          return func.apply(object, arrayPush([this.value()], arguments));
	        };
	      }(func));
	    }
	  }
	  return object;
	}
	
	module.exports = mixin;


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(359),
	    toPath = __webpack_require__(363);
	
	/**
	 * The opposite of `_.property`; this method creates a function that returns
	 * the property value at a given path on `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var array = [0, 1, 2],
	 *     object = { 'a': array, 'b': array, 'c': array };
	 *
	 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	 * // => [2, 0]
	 *
	 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	 * // => [2, 0]
	 */
	function propertyOf(object) {
	  return function(path) {
	    return baseGet(object, toPath(path), (path + ''));
	  };
	}
	
	module.exports = propertyOf;


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	var isIterateeCall = __webpack_require__(180);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeMax = Math.max;
	
	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. If `end` is not specified it's
	 * set to `start` with `start` then set to `0`. If `end` is less than `start`
	 * a zero-length range is created unless a negative `step` is specified.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the new array of numbers.
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */
	function range(start, end, step) {
	  if (step && isIterateeCall(start, end, step)) {
	    end = step = undefined;
	  }
	  start = +start || 0;
	  step = step == null ? 1 : (+step || 0);
	
	  if (end == null) {
	    end = start;
	    start = 0;
	  } else {
	    end = +end || 0;
	  }
	  // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	  // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	  var index = -1,
	      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = start;
	    start += step;
	  }
	  return result;
	}
	
	module.exports = range;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var bindCallback = __webpack_require__(178);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeFloor = Math.floor,
	    nativeIsFinite = global.isFinite,
	    nativeMin = Math.min;
	
	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;
	
	/**
	 * Invokes the iteratee function `n` times, returning an array of the results
	 * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	 * one argument; (index).
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the array of results.
	 * @example
	 *
	 * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	 * // => [3, 6, 4]
	 *
	 * _.times(3, function(n) {
	 *   mage.castSpell(n);
	 * });
	 * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	 *
	 * _.times(3, function(n) {
	 *   this.cast(n);
	 * }, mage);
	 * // => also invokes `mage.castSpell(n)` three times
	 */
	function times(n, iteratee, thisArg) {
	  n = nativeFloor(n);
	
	  // Exit early to avoid a JSC JIT bug in Safari 8
	  // where `Array(0)` is treated as `Array(1)`.
	  if (n < 1 || !nativeIsFinite(n)) {
	    return [];
	  }
	  var index = -1,
	      result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
	
	  iteratee = bindCallback(iteratee, thisArg, 1);
	  while (++index < n) {
	    if (index < MAX_ARRAY_LENGTH) {
	      result[index] = iteratee(index);
	    } else {
	      iteratee(index);
	    }
	  }
	  return result;
	}
	
	module.exports = times;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(301);
	
	/** Used to generate unique IDs. */
	var idCounter = 0;
	
	/**
	 * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {string} [prefix] The value to prefix the ID with.
	 * @returns {string} Returns the unique ID.
	 * @example
	 *
	 * _.uniqueId('contact_');
	 * // => 'contact_104'
	 *
	 * _.uniqueId();
	 * // => '105'
	 */
	function uniqueId(prefix) {
	  var id = ++idCounter;
	  return baseToString(prefix) + id;
	}
	
	module.exports = uniqueId;


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	/**
	* HeaderContent component.
	*/
	var HeaderContent = function (_Component) {
	    _inherits(HeaderContent, _Component);
	
	    function HeaderContent(props) {
	        _classCallCheck(this, HeaderContent);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._getStateFromStore = function () {
	            return { cartridgeComponent: _builtInStore2.default.getCartridgeComponent() || { component: 'div', props: {} } };
	        };
	
	        _this._handleComponentChange = function () {
	            _this.setState(_this._getStateFromStore());
	        };
	
	        _this.state = _this._getStateFromStore();
	        return _this;
	    }
	
	    /** @inheriteddoc */
	
	
	    HeaderContent.prototype.componentWillMount = function componentWillMount() {
	        _builtInStore2.default.addCartridgeComponentChangeListener(this._handleComponentChange);
	    };
	
	    /** @inheriteddoc */
	
	
	    HeaderContent.prototype.componentWillUnmount = function componentWillUnmount() {
	        _builtInStore2.default.removeCartridgeComponentChangeListener(this._handleComponentChange);
	    };
	
	    /**
	    * Read the component state from the connected stores.
	    * @return {object} - The new state.
	    */
	
	
	    /**
	    * Handle the component change cb.
	    */
	
	
	    /** @inheriteddoc */
	    HeaderContent.prototype.render = function render() {
	        var cartridgeComponent = this.state.cartridgeComponent;
	        var Component = cartridgeComponent.component,
	            props = cartridgeComponent.props;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'header-content' },
	            _react2.default.createElement(Component, props)
	        );
	    };
	
	    return HeaderContent;
	}(_react.Component);
	
	//Static props.
	
	
	HeaderContent.displayName = 'HeaderContent';
	//HeaderContent.defaultProps = defaultProps;
	//HeaderContent.propTypes = propTypes;
	
	exports.default = HeaderContent;
	module.exports = exports['default'];

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _headerScrolling = __webpack_require__(422);
	
	var _headerScrolling2 = _interopRequireDefault(_headerScrolling);
	
	var _headerTopRow = __webpack_require__(424);
	
	var _headerTopRow2 = _interopRequireDefault(_headerTopRow);
	
	var _headerContent = __webpack_require__(420);
	
	var _headerContent2 = _interopRequireDefault(_headerContent);
	
	var _headerActions = __webpack_require__(403);
	
	var _headerActions2 = _interopRequireDefault(_headerActions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } //Needed components
	
	
	/**
	 * Application header
	 */
	var AppHeader = function (_Component) {
	    _inherits(AppHeader, _Component);
	
	    function AppHeader() {
	        _classCallCheck(this, AppHeader);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    AppHeader.prototype.render = function render() {
	        return _react2.default.createElement(
	            _headerScrolling2.default,
	            null,
	            _react2.default.createElement(_headerTopRow2.default, null),
	            _react2.default.createElement(_headerContent2.default, null),
	            _react2.default.createElement(_headerActions2.default, null)
	        );
	    };
	
	    return AppHeader;
	}(_react.Component);
	// static props
	
	
	AppHeader.displayName = 'AppHeader';
	
	module.exports = AppHeader;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	var _scroll = __webpack_require__(423);
	
	var _scroll2 = _interopRequireDefault(_scroll);
	
	var _connect = __webpack_require__(296);
	
	var _connect2 = _interopRequireDefault(_connect);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// Component default props.
	var defaultProps = {
	    canDeploy: true, // Determines if the header can be deployed (revealing the cartridge component) or not.
	    notifySizeChange: undefined, // A handler to notify other elements that the header has added/removed the cartridge.
	    scrollTargetSelector: undefined // Selector for the domNode on which the scroll is attached.
	};
	
	// Component props definition.
	var propTypes = {
	    canDeploy: _react.PropTypes.bool,
	    notifySizeChange: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.object]),
	    scrollTargetSelector: _react.PropTypes.string
	};
	
	// getState function.
	function getState() {
	    var processMode = _builtInStore2.default.getMode();
	    var mode = 'consult';
	
	    if (processMode && processMode.edit && processMode.edit > 0) {
	        mode = 'edit';
	    }
	
	    return {
	        mode: mode,
	        route: _builtInStore2.default.getRoute(),
	        canDeploy: _builtInStore2.default.getCanDeploy()
	    };
	}
	
	/**
	* HeaderScrolling component.
	*/
	var HeaderScrolling = (_dec = (0, _connect2.default)([{ store: _builtInStore2.default, properties: ['mode', 'route', 'canDeploy'] }], getState), _dec(_class = (0, _scroll2.default)(_class = function (_Component) {
	    _inherits(HeaderScrolling, _Component);
	
	    function HeaderScrolling(props) {
	        _classCallCheck(this, HeaderScrolling);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._notifySizeChange = function () {
	            var notifySizeChange = _this.props.notifySizeChange;
	            var isDeployed = _this.state.isDeployed;
	
	            if (notifySizeChange) {
	                notifySizeChange(isDeployed);
	            }
	        };
	
	        _this.handleScroll = function (event, canDeploy) {
	            var _this$state = _this.state,
	                deployThreshold = _this$state.deployThreshold,
	                placeholderHeight = _this$state.placeholderHeight;
	
	
	            if (_this.state.isDeployed) {
	                var content = _this.refs ? _this.refs.header : undefined;
	                deployThreshold = content ? content.clientHeight - 60 : 1000; // 1000 is arbitrary, but a value high enough is required by default.
	                placeholderHeight = content ? content.clientHeight : 1000;
	                _this.setState({ deployThreshold: deployThreshold, placeholderHeight: placeholderHeight });
	            }
	
	            var _this$scrollPosition = _this.scrollPosition(),
	                top = _this$scrollPosition.top;
	
	            var isDeployed = (canDeploy !== undefined ? canDeploy : _this.props.canDeploy) ? top <= deployThreshold : false;
	
	            if (isDeployed !== _this.state.isDeployed) {
	                _this.setState({ isDeployed: isDeployed }, _this._notifySizeChange);
	            }
	        };
	
	        _this.state = _extends({}, getState(), { isDeployed: true });
	        return _this;
	    }
	
	    /** @inheriteddoc */
	
	
	    HeaderScrolling.prototype.componentWillMount = function componentWillMount() {
	        this.handleScroll();
	        var scrollTargetSelector = this.props.scrollTargetSelector;
	
	        this.scrollTargetNode = scrollTargetSelector && scrollTargetSelector !== '' ? document.querySelector(scrollTargetSelector) : window;
	    };
	
	    /** @inheriteddoc */
	
	
	    HeaderScrolling.prototype.componentDidMount = function componentDidMount() {
	        this.scrollTargetNode.addEventListener('scroll', this.handleScroll);
	        this.scrollTargetNode.addEventListener('resize', this.handleScroll);
	    };
	
	    /** @inheriteddoc */
	
	
	    HeaderScrolling.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	        var _this2 = this;
	
	        var canDeploy = _ref.canDeploy;
	
	        this.setState({ isDeployed: true }, function () {
	            return _this2.handleScroll(null, canDeploy);
	        });
	    };
	
	    /** @inheriteddoc */
	
	
	    HeaderScrolling.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.scrollTargetNode.removeEventListener('scroll', this.handleScroll);
	        this.scrollTargetNode.removeEventListener('resize', this.handleScroll);
	    };
	
	    /**
	     * Notify other elements that the header has added/removed the cartridge.
	     */
	
	
	    /**
	     * Handle the scroll event in order to show/hide the cartridge.
	     * @param {object} event [description]
	     */
	
	
	    /** @inheriteddoc */
	    HeaderScrolling.prototype.render = function render() {
	        var _state = this.state,
	            isDeployed = _state.isDeployed,
	            placeholderHeight = _state.placeholderHeight;
	        var _props = this.props,
	            children = _props.children,
	            canDeploy = _props.canDeploy,
	            mode = _props.mode,
	            route = _props.route;
	
	        return _react2.default.createElement(
	            'header',
	            { ref: 'header', 'data-focus': 'header-scrolling', 'data-mode': mode, 'data-route': route, 'data-deployed': isDeployed },
	            children,
	            !isDeployed ? _react2.default.createElement('div', { style: { height: canDeploy ? placeholderHeight : 60, width: '100%' } }) : ''
	        );
	    };
	
	    return HeaderScrolling;
	}(_react.Component)) || _class) || _class);
	
	// Static props.
	
	HeaderScrolling.displayName = 'HeaderScrolling';
	HeaderScrolling.defaultProps = defaultProps;
	HeaderScrolling.propTypes = propTypes;
	
	exports.default = HeaderScrolling;
	module.exports = exports['default'];

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _lang = __webpack_require__(148);
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Scroll = function Scroll(Component) {
	    return function (_Component) {
	        _inherits(ScrollComponent, _Component);
	
	        function ScrollComponent(props) {
	            _classCallCheck(this, ScrollComponent);
	
	            return _possibleConstructorReturn(this, _Component.call(this, props));
	        }
	
	        /**
	        * Get the scroll position from the top of the screen.
	        *
	        * https://developer.mozilla.org/fr/docs/Web/API/Element/getBoundingClientRect
	        *
	        * @param {object} domNode domNoe to get the position from
	        * @returns {int} - The position in pixel from the top of the scroll container.
	        */
	
	
	        ScrollComponent.prototype.scrollPosition = function scrollPosition(domNode) {
	            var y = window.pageYOffset || document.documentElement.scrollTop;
	            var x = window.pageXOffset || document.documentElement.scrollLeft;
	            if ((0, _lang.isUndefined)(domNode)) {
	                return { top: y, left: x };
	            }
	            var nodeRect = domNode.getBoundingClientRect();
	            return { left: nodeRect.left + x, top: nodeRect.top + y };
	        };
	
	        ScrollComponent.prototype.isAtPageBottom = function isAtPageBottom(domNode) {
	            return this.scrollPosition().top >= this._getScrollingElement().scrollHeight - window.innerHeight;
	        };
	
	        ScrollComponent.prototype._getScrollingElement = function _getScrollingElement() {
	            if (document.scrollingElement) {
	                return document.scrollingElement;
	            } else if (document.documentElement) {
	                return document.documentElement;
	            }
	            return document.querySelector('body');
	        };
	
	        /**
	        * Set scrollbar position with smooth animation.
	        * http://www.w3schools.com/jsref/prop_win_pagexoffset.asp
	        *
	        * @param {object} element  element parent for the scroll
	        * @param {number} to       position of the scroll
	        * @param {number} duration duration of animation
	        */
	
	
	        ScrollComponent.prototype.scrollTo = function scrollTo(element, to) {
	            var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
	
	            if ((0, _lang.isUndefined)(element)) {
	                window.scrollTo(0, to);
	                return;
	            }
	            element.scrollTop = to;
	        };
	
	        return ScrollComponent;
	    }(Component);
	};
	
	exports.default = Scroll;
	module.exports = exports['default'];

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	/**
	* HeaderTopRow component.
	*/
	var HeaderTopRow = function (_Component) {
	    _inherits(HeaderTopRow, _Component);
	
	    function HeaderTopRow(props) {
	        _classCallCheck(this, HeaderTopRow);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._handleComponentChange = function () {
	            _this.setState(_this._getStateFromStore());
	        };
	
	        _this.state = _this._getStateFromStore();
	        return _this;
	    }
	
	    /** @inheriteddoc */
	
	
	    HeaderTopRow.prototype.componentWillMount = function componentWillMount() {
	        _builtInStore2.default.addSummaryComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.addBarContentLeftComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.addBarContentRightComponentChangeListener(this._handleComponentChange);
	    };
	
	    /** @inheriteddoc */
	
	
	    HeaderTopRow.prototype.componentWillUnmount = function componentWillUnmount() {
	        _builtInStore2.default.removeSummaryComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.removeBarContentLeftComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.removeBarContentRightComponentChangeListener(this._handleComponentChange);
	    };
	
	    HeaderTopRow.prototype._getStateFromStore = function _getStateFromStore() {
	        return {
	            summaryComponent: _builtInStore2.default.getSummaryComponent(),
	            barContentLeftComponent: _builtInStore2.default.getBarContentLeftComponent(),
	            barContentRightComponent: _builtInStore2.default.getBarContentRightComponent()
	        };
	    };
	
	    /**
	    * Component change handler.
	    */
	
	
	    /**
	    * Render the component
	    * @return {HTML} Rendered component
	    */
	    HeaderTopRow.prototype.render = function render() {
	        var _state = this.state,
	            barContentLeftComponent = _state.barContentLeftComponent,
	            barContentRightComponent = _state.barContentRightComponent,
	            summaryComponent = _state.summaryComponent;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'header-top-row' },
	            _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'header-top-row-left' },
	                    barContentLeftComponent && _react2.default.createElement(barContentLeftComponent.component, barContentLeftComponent.props)
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'header-top-row-right' },
	                    barContentRightComponent && _react2.default.createElement(barContentRightComponent.component, barContentRightComponent.props)
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'header-top-row-middle' },
	                    summaryComponent && _react2.default.createElement(summaryComponent.component, summaryComponent.props)
	                )
	            )
	        );
	    };
	
	    return HeaderTopRow;
	}(_react.Component);
	
	//Static props.
	
	
	HeaderTopRow.displayName = 'HeaderTopRow';
	//HeaderTopRow.defaultProps = defaultProps;
	//HeaderTopRow.propTypes = propTypes;
	
	exports.default = HeaderTopRow;
	module.exports = exports['default'];

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _field = __webpack_require__(426);
	
	var _field2 = _interopRequireDefault(_field);
	
	var _field3 = __webpack_require__(431);
	
	var _field4 = _interopRequireDefault(_field3);
	
	var _checkbox = __webpack_require__(434);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _withError = __webpack_require__(435);
	
	var _withError2 = _interopRequireDefault(_withError);
	
	var _date = __webpack_require__(436);
	
	var _date2 = _interopRequireDefault(_date);
	
	var _select = __webpack_require__(451);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _selectCheckbox = __webpack_require__(508);
	
	var _selectCheckbox2 = _interopRequireDefault(_selectCheckbox);
	
	var _selectRadio = __webpack_require__(509);
	
	var _selectRadio2 = _interopRequireDefault(_selectRadio);
	
	var _text = __webpack_require__(438);
	
	var _text2 = _interopRequireDefault(_text);
	
	var _textarea = __webpack_require__(512);
	
	var _textarea2 = _interopRequireDefault(_textarea);
	
	var _consult = __webpack_require__(513);
	
	var _consult2 = _interopRequireDefault(_consult);
	
	var _toggle = __webpack_require__(514);
	
	var _toggle2 = _interopRequireDefault(_toggle);
	
	var _radio = __webpack_require__(510);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    AutocompleteSelect: _field2.default,
	    AutocompleteText: _field4.default,
	    Checkbox: _checkbox2.default,
	    CheckboxWithError: _withError2.default,
	    Date: _date2.default,
	    Select: _select2.default,
	    Text: _text2.default,
	    Toggle: _toggle2.default,
	    Textarea: _textarea2.default,
	    DisplayTextArea: _consult2.default,
	    SelectCheckbox: _selectCheckbox2.default,
	    SelectRadio: _selectRadio2.default,
	    Radio: _radio2.default
	};
	module.exports = exports['default'];

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _edit = __webpack_require__(427);
	
	var _edit2 = _interopRequireDefault(_edit);
	
	var _consult = __webpack_require__(430);
	
	var _consult2 = _interopRequireDefault(_consult);
	
	var _translation = __webpack_require__(142);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var AutocompleteSelectField = function (_Component) {
	    _inherits(AutocompleteSelectField, _Component);
	
	    function AutocompleteSelectField() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, AutocompleteSelectField);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {}, _this.getValue = function () {
	            var _this$props = _this.props,
	                isEdit = _this$props.isEdit,
	                value = _this$props.value;
	
	            if (isEdit) {
	                return _this.refs.autocomplete.getValue();
	            } else {
	                return value;
	            }
	        }, _this._handleAutocompleteBadInput = function (value) {
	            _this.setState({ customError: _translation2.default.translate('autocomplete.error.badInput', { value: value }) });
	        }, _this._handleAutocompleteChange = function (value) {
	            var onChange = _this.props.onChange;
	
	            _this.setState({ customError: null }, function () {
	                if (onChange) onChange(value);
	            });
	        }, _this._renderEdit = function () {
	            var customError = _this.state.customError;
	
	            return _react2.default.createElement(_edit2.default, _extends({
	                customError: customError,
	                onBadInput: _this._handleAutocompleteBadInput,
	                onChange: _this._handleAutocompleteChange,
	                ref: 'autocomplete'
	            }, _this.props));
	        }, _this._renderConsult = function () {
	            return _react2.default.createElement(_consult2.default, _this.props);
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    AutocompleteSelectField.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	        var error = _ref.error;
	
	        this.setState({ customError: error });
	    };
	
	    AutocompleteSelectField.prototype.render = function render() {
	        var isEdit = this.props.isEdit;
	
	        return isEdit ? this._renderEdit() : this._renderConsult();
	    };
	
	    return AutocompleteSelectField;
	}(_react.Component);
	
	AutocompleteSelectField.propTypes = {
	    isEdit: _react.PropTypes.bool.isRequired,
	    keyResolver: _react.PropTypes.func.isRequired,
	    onChange: _react.PropTypes.func.isRequired,
	    querySearcher: _react.PropTypes.func.isRequired
	};
	exports.default = AutocompleteSelectField;
	module.exports = exports['default'];

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _dec, _dec2, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	var _closest = __webpack_require__(428);
	
	var _closest2 = _interopRequireDefault(_closest);
	
	var _debounce = __webpack_require__(270);
	
	var _debounce2 = _interopRequireDefault(_debounce);
	
	var _uniqueId = __webpack_require__(419);
	
	var _uniqueId2 = _interopRequireDefault(_uniqueId);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var ENTER_KEY_CODE = 13;
	var TAB_KEY_CODE = 27;
	var UP_ARROW_KEY_CODE = 38;
	var DOWN_ARROW_KEY_CODE = 40;
	
	var propTypes = {
	    customError: _react.PropTypes.string,
	    inputTimeout: _react.PropTypes.number.isRequired,
	    keyName: _react.PropTypes.string.isRequired,
	    keyResolver: _react.PropTypes.func.isRequired,
	    labelName: _react.PropTypes.string.isRequired,
	    onBadInput: _react.PropTypes.func,
	    onChange: _react.PropTypes.func.isRequired,
	    placeholder: _react.PropTypes.string,
	    querySearcher: _react.PropTypes.func.isRequired,
	    renderOptions: _react.PropTypes.func,
	    value: _react.PropTypes.string
	};
	
	var defaultProps = {
	    keyName: 'key',
	    labelName: 'label',
	    inputTimeout: 200
	};
	
	var Autocomplete = (_dec = (0, _material2.default)('loader'), _dec2 = (0, _material2.default)('inputText'), _dec(_class = _dec2(_class = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(Autocomplete, _Component);
	
	    function Autocomplete(props) {
	        _classCallCheck(this, Autocomplete);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._handleDocumentClick = function (_ref) {
	            var target = _ref.target;
	            var _this$state = _this.state,
	                focus = _this$state.focus,
	                inputValue = _this$state.inputValue;
	            var onBadInput = _this.props.onBadInput;
	
	            if (focus) {
	                var closestACParent = (0, _closest2.default)(target, '[data-id=\'' + _this.autocompleteId + '\']', true);
	                if (closestACParent === undefined) {
	                    _this.setState({ focus: false }, function () {
	                        if (onBadInput && _this.getValue() === null && inputValue !== '') {
	                            onBadInput(inputValue);
	                        }
	                    });
	                }
	            }
	        };
	
	        _this._handleQueryChange = function (_ref2) {
	            var value = _ref2.target.value;
	
	            if (value === '') {
	                // the user cleared the input, don't call the querySearcher
	                var onChange = _this.props.onChange;
	
	                _this.setState({ inputValue: value, fromKeyResolver: false });
	                if (onChange) onChange(null);
	            } else {
	                _this.setState({ inputValue: value, fromKeyResolver: false, isLoading: true });
	                _this._debouncedQuerySearcher(value);
	            }
	        };
	
	        _this._querySearcher = function (value) {
	            var _this$props = _this.props,
	                querySearcher = _this$props.querySearcher,
	                keyName = _this$props.keyName,
	                labelName = _this$props.labelName;
	
	            querySearcher(value).then(function (_ref3) {
	                var data = _ref3.data,
	                    totalCount = _ref3.totalCount;
	
	                // TODO handle the incomplete option list case
	                var options = new Map();
	                data.forEach(function (item) {
	                    options.set(item[keyName], item[labelName]);
	                });
	                _this.setState({ options: options, isLoading: false, totalCount: totalCount });
	            }).catch(function (error) {
	                return _this.setState({ customError: error.message });
	            });
	        };
	
	        _this._handleQueryFocus = function () {
	            _this.refs.options.scrollTop = 0;
	            if (_this.props.onFocus) {
	                _this.props.onFocus.call(_this);
	            }
	            _this.setState({ active: '', focus: true });
	        };
	
	        _this._handleQueryKeyDown = function (event) {
	            event.stopPropagation();
	            var which = event.which;
	            var _this$state2 = _this.state,
	                active = _this$state2.active,
	                options = _this$state2.options;
	
	            if (which === ENTER_KEY_CODE && active) _this._select(active);
	            if (which === TAB_KEY_CODE) _this.setState({ focus: false }, function () {
	                return _this.refs.htmlInput.blur();
	            });
	            if ([DOWN_ARROW_KEY_CODE, UP_ARROW_KEY_CODE].indexOf(which) !== -1) {
	                // the user pressed on an arrow key, change the active key
	                var optionKeys = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;
	
	                try {
	                    for (var _iterator = options.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var key = _step.value;
	
	                        optionKeys.push(key);
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	
	                var currentIndex = optionKeys.indexOf(active);
	                var newIndex = currentIndex + (which === DOWN_ARROW_KEY_CODE ? 1 : -1);
	                if (newIndex >= options.size) {
	                    newIndex -= options.size;
	                }
	                if (newIndex < 0) {
	                    newIndex += options.size;
	                }
	                _this.setState({ active: optionKeys[newIndex] });
	            }
	        };
	
	        _this._handleSuggestionHover = function (key) {
	            _this.setState({ active: key });
	        };
	
	        _this._renderOptions = function () {
	            var _this$state3 = _this.state,
	                active = _this$state3.active,
	                options = _this$state3.options,
	                focus = _this$state3.focus;
	
	            var renderedOptions = [];
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;
	
	            try {
	                for (var _iterator2 = options[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _step2$value = _slicedToArray(_step2.value, 2),
	                        key = _step2$value[0],
	                        value = _step2$value[1];
	
	                    var isActive = active === key;
	                    renderedOptions.push(_react2.default.createElement(
	                        'li',
	                        {
	                            'data-active': isActive,
	                            'data-focus': 'option',
	                            key: key,
	                            onClick: _this._select.bind(_this, key),
	                            onMouseOver: _this._handleSuggestionHover.bind(_this, key)
	                        },
	                        _this.i18n(value)
	                    ));
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	
	            return _react2.default.createElement(
	                'ul',
	                { 'data-focus': 'options', ref: 'options', 'data-focussed': focus },
	                renderedOptions
	            );
	        };
	
	        var state = {
	            focus: false,
	            inputValue: _this.props.value,
	            options: new Map(),
	            active: null,
	            selected: _this.props.value,
	            fromKeyResolver: false,
	            isLoading: false,
	            customError: _this.props.customError,
	            totalCount: 0
	        };
	        _this.state = state;
	        _this.autocompleteId = (0, _uniqueId2.default)('autocomplete-text-');
	        return _this;
	    }
	
	    Autocomplete.prototype.componentDidMount = function componentDidMount() {
	        var _this2 = this;
	
	        var _props = this.props,
	            value = _props.value,
	            keyResolver = _props.keyResolver,
	            inputTimeout = _props.inputTimeout;
	
	        if (value !== undefined && value !== null) {
	            // value is defined, call the keyResolver to get the associated label
	            keyResolver(value).then(function (inputValue) {
	                _this2.setState({ inputValue: inputValue, fromKeyResolver: true });
	            }).catch(function (error) {
	                return _this2.setState({ customError: error.message });
	            });
	        }
	        document.addEventListener('click', this._handleDocumentClick);
	        this._debouncedQuerySearcher = (0, _debounce2.default)(this._querySearcher, inputTimeout);
	    };
	
	    Autocomplete.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref4) {
	        var _this3 = this;
	
	        var value = _ref4.value,
	            customError = _ref4.customError,
	            error = _ref4.error;
	        var keyResolver = this.props.keyResolver;
	
	        if (value !== this.props.value && value !== undefined && value !== null) {
	            // value is defined, call the keyResolver to get the associated label
	            this.setState({ inputValue: value, customError: customError }, function () {
	                return keyResolver(value).then(function (inputValue) {
	                    _this3.setState({ inputValue: inputValue, fromKeyResolver: true });
	                }).catch(function (error) {
	                    return _this3.setState({ customError: error.message });
	                });
	            });
	        } else if (customError !== this.props.customError) {
	            this.setState({ customError: customError });
	        }
	        if (error) {
	            this.setState({ customError: error });
	        }
	    };
	
	    Autocomplete.prototype.componentDidUpdate = function componentDidUpdate() {
	        if (this.props.customError) {
	            this.refs.inputText.classList.add('is-invalid');
	        } else {
	            this.refs.inputText.classList.remove('is-invalid');
	        }
	    };
	
	    Autocomplete.prototype.componentWillUnmount = function componentWillUnmount() {
	        document.removeEventListener('click', this._handleDocumentClick);
	    };
	
	    Autocomplete.prototype.getValue = function getValue() {
	        var _props2 = this.props,
	            labelName = _props2.labelName,
	            keyName = _props2.keyName,
	            value = _props2.value;
	        var _state = this.state,
	            inputValue = _state.inputValue,
	            selected = _state.selected,
	            options = _state.options,
	            fromKeyResolver = _state.fromKeyResolver;
	
	        var resolvedLabel = options.get(selected);
	        if (inputValue === '') {
	            // The user cleared the field, return a null
	            return null;
	        } else if (fromKeyResolver) {
	            // Value was received from the keyResolver, give it firectly
	            return value;
	        } else if (resolvedLabel !== inputValue && selected !== inputValue) {
	            // The user typed something without selecting any option, return a null
	            return null;
	        } else {
	            // The user selected an option (or no value was provided), return it
	            return selected || null;
	        }
	    };
	
	    Autocomplete.prototype._select = function _select(key) {
	        var options = this.state.options;
	        var _props3 = this.props,
	            onChange = _props3.onChange,
	            keyName = _props3.keyName,
	            labelName = _props3.labelName;
	
	        var resolvedLabel = options.get(key) || '';
	        this.refs.htmlInput.blur();
	        this.setState({ inputValue: this.i18n(resolvedLabel), selected: key, focus: false }, function () {
	            if (onChange) onChange(key);
	        });
	    };
	
	    Autocomplete.prototype.render = function render() {
	        var _inputProps;
	
	        var _props4 = this.props,
	            autoFocus = _props4.autoFocus,
	            onBlur = _props4.onBlur,
	            disabled = _props4.disabled,
	            onKeyPress = _props4.onKeyPress,
	            maxLength = _props4.maxLength,
	            onFocus = _props4.onFocus,
	            onClick = _props4.onClick,
	            customError = _props4.customError,
	            placeholder = _props4.placeholder,
	            renderOptions = _props4.renderOptions,
	            otherProps = _objectWithoutProperties(_props4, ['autoFocus', 'onBlur', 'disabled', 'onKeyPress', 'maxLength', 'onFocus', 'onClick', 'customError', 'placeholder', 'renderOptions']);
	
	        var _state2 = this.state,
	            inputValue = _state2.inputValue,
	            isLoading = _state2.isLoading;
	        var _handleQueryFocus = this._handleQueryFocus,
	            _handleQueryKeyDown = this._handleQueryKeyDown,
	            _handleQueryChange = this._handleQueryChange;
	
	        var inputProps = (_inputProps = {
	            autoFocus: autoFocus, disabled: disabled, onKeyPress: onKeyPress, maxLength: maxLength, onFocus: onFocus, onClick: onClick,
	            onChange: _handleQueryChange }, _defineProperty(_inputProps, 'onFocus', _handleQueryFocus), _defineProperty(_inputProps, 'onKeyDown', _handleQueryKeyDown), _defineProperty(_inputProps, 'onBlur', onBlur), _defineProperty(_inputProps, 'value', !inputValue ? '' : inputValue), _inputProps);
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'autocomplete', 'data-id': this.autocompleteId },
	            _react2.default.createElement(
	                'div',
	                { className: 'mdl-textfield mdl-js-textfield' + (customError ? ' is-invalid' : ''), 'data-focus': 'input-text', ref: 'inputText' },
	                _react2.default.createElement('div', { 'data-focus': 'loading', 'data-loading': isLoading, className: 'mdl-progress mdl-js-progress mdl-progress__indeterminate', ref: 'loader' }),
	                _react2.default.createElement('input', _extends({
	                    className: 'mdl-textfield__input'
	                }, inputProps, {
	                    ref: 'htmlInput',
	                    type: 'text'
	                })),
	                _react2.default.createElement(
	                    'label',
	                    { className: 'mdl-textfield__label' },
	                    this.i18n(placeholder)
	                ),
	                _react2.default.createElement(
	                    'span',
	                    { className: 'mdl-textfield__error' },
	                    this.i18n(customError)
	                )
	            ),
	            renderOptions ? renderOptions.call(this) : this._renderOptions()
	        );
	    };
	
	    return Autocomplete;
	}(_react.Component)) || _class) || _class) || _class);
	
	
	Autocomplete.displayName = 'Autocomplete';
	Autocomplete.defaultProps = defaultProps;
	Autocomplete.propTypes = propTypes;
	
	exports.default = Autocomplete;
	module.exports = exports['default'];

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	var matches = __webpack_require__(429)
	
	module.exports = function (element, selector, checkYoSelf) {
	  var parent = checkYoSelf ? element : element.parentNode
	
	  while (parent && parent !== document) {
	    if (matches(parent, selector)) return parent;
	    parent = parent.parentNode
	  }
	}


/***/ }),
/* 429 */
/***/ (function(module, exports) {

	
	/**
	 * Element prototype.
	 */
	
	var proto = Element.prototype;
	
	/**
	 * Vendor function.
	 */
	
	var vendor = proto.matchesSelector
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;
	
	/**
	 * Expose `match()`.
	 */
	
	module.exports = match;
	
	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */
	
	function match(el, selector) {
	  if (vendor) return vendor.call(el, selector);
	  var nodes = el.parentNode.querySelectorAll(selector);
	  for (var i = 0; i < nodes.length; ++i) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var AutocompleteSelectConsult = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(AutocompleteSelectConsult, _Component);
	
	    function AutocompleteSelectConsult() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, AutocompleteSelectConsult);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {}, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    AutocompleteSelectConsult.prototype.componentDidMount = function componentDidMount() {
	        this._callKeyResolver(this.props.value);
	    };
	
	    AutocompleteSelectConsult.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	        var value = _ref.value;
	
	        if (value !== this.props.value) this._callKeyResolver(value);
	    };
	
	    AutocompleteSelectConsult.prototype._callKeyResolver = function _callKeyResolver(value) {
	        var _this2 = this;
	
	        var keyResolver = this.props.keyResolver;
	
	        keyResolver(value).then(function (label) {
	            _this2.setState({ resolvedLabel: label });
	        }).catch(function (err) {
	            console.error(err.message);
	        });
	    };
	
	    AutocompleteSelectConsult.prototype.render = function render() {
	        var _props = this.props,
	            label = _props.label,
	            name = _props.name,
	            type = _props.type,
	            value = _props.value;
	        var _state$resolvedLabel = this.state.resolvedLabel,
	            resolvedLabel = _state$resolvedLabel === undefined ? value : _state$resolvedLabel;
	
	        return _react2.default.createElement(
	            'div',
	            {
	                label: label,
	                name: name,
	                type: type
	            },
	            this.i18n(resolvedLabel)
	        );
	    };
	
	    return AutocompleteSelectConsult;
	}(_react.Component)) || _class;
	
	exports.default = AutocompleteSelectConsult;
	module.exports = exports['default'];

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _edit = __webpack_require__(432);
	
	var _edit2 = _interopRequireDefault(_edit);
	
	var _consult = __webpack_require__(433);
	
	var _consult2 = _interopRequireDefault(_consult);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var AutocompleteTextField = function (_Component) {
	    _inherits(AutocompleteTextField, _Component);
	
	    function AutocompleteTextField() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, AutocompleteTextField);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {}, _this.getValue = function () {
	            var _this$props = _this.props,
	                isEdit = _this$props.isEdit,
	                value = _this$props.value;
	
	            if (isEdit) {
	                return _this.refs.autocomplete.getValue();
	            } else {
	                return value;
	            }
	        }, _this._handleAutocompleteChange = function (value) {
	            var onChange = _this.props.onChange;
	
	            if (onChange) onChange(value);
	        }, _this._renderEdit = function () {
	            return _react2.default.createElement(_edit2.default, _extends({
	                onChange: _this._handleAutocompleteChange,
	                ref: 'autocomplete'
	            }, _this.props));
	        }, _this._renderConsult = function () {
	            return _react2.default.createElement(_consult2.default, _this.props);
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    AutocompleteTextField.prototype.render = function render() {
	        var isEdit = this.props.isEdit;
	
	        return isEdit ? this._renderEdit() : this._renderConsult();
	    };
	
	    return AutocompleteTextField;
	}(_react.Component);
	
	AutocompleteTextField.propTypes = {
	    isEdit: _react.PropTypes.bool.isRequired,
	    onChange: _react.PropTypes.func,
	    querySearcher: _react.PropTypes.func.isRequired
	};
	exports.default = AutocompleteTextField;
	module.exports = exports['default'];

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _dec2, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	var _debounce = __webpack_require__(270);
	
	var _debounce2 = _interopRequireDefault(_debounce);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var AutocompleteTextEdit = (_dec = (0, _material2.default)('materialInput'), _dec2 = (0, _material2.default)('loader'), _dec(_class = _dec2(_class = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(AutocompleteTextEdit, _Component);
	
	    function AutocompleteTextEdit() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, AutocompleteTextEdit);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            inputValue: _this.props.value,
	            suggestions: [],
	            hasSuggestions: false,
	            error: _this.props.error,
	            hasFocus: false,
	            isLoading: false
	        }, _this.getValue = function () {
	            var inputValue = _this.state.inputValue;
	
	            if (inputValue !== undefined) {
	                return inputValue;
	            } else {
	                return null;
	            }
	        }, _this._querySearcher = function (value) {
	            var querySearcher = _this.props.querySearcher;
	            var hasSuggestions = _this.state.hasSuggestions;
	
	
	            querySearcher(value).then(function (_ref) {
	                var data = _ref.data,
	                    totalCount = _ref.totalCount;
	
	                if (totalCount > 0) {
	                    _this.setState({ hasSuggestions: true, suggestions: data, error: '' });
	                }
	                _this.refs.loader.classList.remove('mdl-progress__indeterminate');
	                _this.setState({ isLoading: false });
	            }).catch(function (err) {
	                _this.refs.loader.classList.remove('mdl-progress__indeterminate');
	                _this.setState({ error: JSON.stringify(err), isLoading: false });
	                _this.refs.materialInput.classList.add('is-invalid');
	            });
	        }, _this.onQueryChange = function (_ref2) {
	            var value = _ref2.target.value;
	
	            _this.setState({ inputValue: value });
	            if (value.trim() == '') {
	                _this.setState({ hasSuggestions: false });
	            } else {
	                _this.refs.loader.classList.add('mdl-progress__indeterminate');
	                _this.setState({ isLoading: true });
	                _this._debouncedQuerySearcher(value);
	                // this._querySearcher(value);
	            }
	        }, _this.renderSuggestions = function () {
	            var suggestions = _this.state.suggestions;
	
	            var allSuggestions = suggestions.map(function (_ref3) {
	                var key = _ref3.key,
	                    label = _ref3.label;
	                return _react2.default.createElement(
	                    'li',
	                    { key: key, onMouseDown: function onMouseDown(e) {
	                            _this.onResultClick(label);e.preventDefault();
	                        }, 'data-focus': 'option' },
	                    label
	                );
	            });
	            return _react2.default.createElement(
	                'ul',
	                { ref: 'suggestions', 'data-focus': 'options' },
	                allSuggestions
	            );
	        }, _this.toggleHasFocus = function (e) {
	            var _this$state = _this.state,
	                hasSuggestions = _this$state.hasSuggestions,
	                hasFocus = _this$state.hasFocus;
	            var _this$props = _this.props,
	                showAtFocus = _this$props.showAtFocus,
	                emptyShowAll = _this$props.emptyShowAll;
	
	            _this.setState({ hasFocus: !_this.state.hasFocus });
	            if (hasSuggestions && !showAtFocus && hasFocus === false) {
	                _this.setState({ hasSuggestions: false });
	            }
	            if (!hasSuggestions && e.target.value.trim() === '' && emptyShowAll && hasFocus === false) {
	                // Doing a global search here
	                _this._querySearcher('');
	            }
	            return true;
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    AutocompleteTextEdit.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref4) {
	        var error = _ref4.error;
	
	        if (error) {
	            this.setState({ error: error });
	        }
	    };
	
	    AutocompleteTextEdit.prototype.componentDidMount = function componentDidMount() {
	        var inputTimeout = this.props.inputTimeout;
	
	        this._debouncedQuerySearcher = (0, _debounce2.default)(this._querySearcher, inputTimeout);
	    };
	
	    // Returns the state's inputValue
	
	
	    // Gets the defined props' querySearch and returns the object given by the promise
	    // Sets the hasSuggestions' state if the given object has a none empty array
	
	
	    // Sets the state's inputValue when the user is typing
	
	
	    // Sets the value input with the selected suggestion and hides the dropdown
	    AutocompleteTextEdit.prototype.onResultClick = function onResultClick(value) {
	        this.refs.inputText.value = value;
	        this.setState({ inputValue: value, hasSuggestions: false, suggestions: [] });
	        return value;
	    };
	
	    // Returns an html list whith the Suggestions
	
	
	    // Behaviour when onFocus and onBlur are triggered
	
	
	    // Maybe give the option for the floating label
	    AutocompleteTextEdit.prototype.render = function render() {
	        var _state = this.state,
	            inputValue = _state.inputValue,
	            hasSuggestions = _state.hasSuggestions,
	            hasFocus = _state.hasFocus,
	            isLoading = _state.isLoading,
	            otherProps = _objectWithoutProperties(_state, ['inputValue', 'hasSuggestions', 'hasFocus', 'isLoading']);
	
	        var _props = this.props,
	            placeholder = _props.placeholder,
	            inputTimeout = _props.inputTimeout,
	            showAtFocus = _props.showAtFocus,
	            emptyShowAll = _props.emptyShowAll,
	            error = _props.error;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'autocompleteText' },
	            _react2.default.createElement(
	                'div',
	                { className: 'mdl-textfield mdl-js-textfield' + (error ? ' is-invalid' : ''), ref: 'materialInput' },
	                _react2.default.createElement('div', { 'data-focus': 'loading', 'data-loading': isLoading, className: 'mdl-progress mdl-js-progress', ref: 'loader' }),
	                _react2.default.createElement('input', _extends({ onFocus: this.toggleHasFocus, onBlur: this.toggleHasFocus, className: 'mdl-textfield__input', type: 'text', value: !inputValue ? '' : inputValue, ref: 'inputText', onChange: this.onQueryChange.bind(this), showAtFocus: showAtFocus, emptyShowAll: emptyShowAll }, otherProps)),
	                _react2.default.createElement(
	                    'label',
	                    { className: 'mdl-textfield__label' },
	                    this.i18n(placeholder)
	                ),
	                _react2.default.createElement(
	                    'span',
	                    { className: 'mdl-textfield__error', ref: 'errorMessage' },
	                    this.i18n(error)
	                )
	            ),
	            hasSuggestions && hasFocus && this.renderSuggestions()
	        );
	    };
	
	    return AutocompleteTextEdit;
	}(_react.Component)) || _class) || _class) || _class);
	AutocompleteTextEdit.defaultProps = {
	    placeholder: 'Search here...',
	    showAtFocus: false,
	    emptyShowAll: false,
	    inputTimeout: 200
	};
	AutocompleteTextEdit.propTypes = {
	    /**
	    * Returns a promise which is connected to the web service.
	    * @type {Function}
	    */
	    querySearcher: _react.PropTypes.func.isRequired,
	
	    /**
	    * Field value.
	    * @type {String}
	    */
	    value: _react.PropTypes.string,
	
	    /**
	    * Launches the querySearcher.
	    * @type {Function}
	    */
	    onChange: _react.PropTypes.func,
	
	    /**
	    * Error showed message.
	    * @type {String}
	    */
	    error: _react.PropTypes.string,
	
	    /**
	    * Placeholder field.
	    * @type {String}
	    */
	    placeholder: _react.PropTypes.string,
	
	    /**
	    * Defines it shows suggestions on focus.
	    * @type {Boolean}
	    */
	    showAtFocus: _react.PropTypes.bool,
	
	    /**
	    * Defines if it shows suggestions on focus when the input is empty.
	    * @type {Boolean}
	    */
	    emptyShowAll: _react.PropTypes.bool,
	
	    /**
	     * [inputTimeout description]
	     * @type {number}
	     */
	    inputTimeout: _react.PropTypes.number.isRequired
	};
	exports.default = AutocompleteTextEdit;
	
	/*
	EXAMPLE
	const _querySearcher = query => {
	    let data = [
	        {
	            key: 'JL',
	            label: 'Joh Lickeur'
	        },
	        {
	            key: 'GK',
	            label: 'Guénolé Kikabou'
	        },
	        {
	            key: 'YL',
	            label: 'Yannick Lounivis'
	        }
	    ];
	    return new Promise((resolve, reject) => {
	        setTimeout(() => {
	            resolve({
	                data,
	                totalCount: data.length
	            });
	        }, 500);
	    });
	};

	<AutocompleteText
	    isEdit={isEdit}
	    querySearcher={_querySearcher}
	    placeholder={'Your search...'}
	    error{Something wrong happend. Retry please...}
	/>
	*/

	module.exports = exports['default'];

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function AutocompleteTextConsult(_ref) {
	    var label = _ref.label,
	        name = _ref.name,
	        type = _ref.type,
	        value = _ref.value;
	
	    return _react2.default.createElement(
	        'div',
	        { label: label, name: name, type: type },
	        value
	    );
	}
	
	exports.default = AutocompleteTextConsult;
	module.exports = exports['default'];

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    label: _react.PropTypes.string,
	    disabled: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func.isRequired,
	    value: _react.PropTypes.bool.isRequired
	};
	
	var defaultProps = {
	    value: false,
	    disabled: false
	};
	
	var displayName = 'InputCheckBox';
	
	var InputCheckBox = (_dec = (0, _material2.default)('mdlHolder'), (0, _translation2.default)(_class = _dec(_class = function (_Component) {
	    _inherits(InputCheckBox, _Component);
	
	    function InputCheckBox() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, InputCheckBox);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getValue = function () {
	            var domElement = _reactDom2.default.findDOMNode(_this.refs.checkbox);
	            return domElement.checked;
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    InputCheckBox.prototype.componentDidUpdate = function componentDidUpdate() {
	        var value = this.props.value;
	
	        var method = value ? 'add' : 'remove';
	        var node = _reactDom2.default.findDOMNode(this.refs.mdlHolder);
	        if (node) {
	            node.classList[method]('is-checked');
	        }
	    };
	
	    InputCheckBox.prototype.handleOnChange = function handleOnChange(_ref) {
	        var checked = _ref.target.checked;
	        var onChange = this.props.onChange;
	
	        onChange(checked);
	    };
	
	    InputCheckBox.prototype.render = function render() {
	        var _props = this.props,
	            label = _props.label,
	            value = _props.value,
	            disabled = _props.disabled;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'input-checkbox-container' },
	            _react2.default.createElement(
	                'label',
	                { className: 'mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect', 'data-focus': 'input-checkbox', ref: 'mdlHolder' },
	                _react2.default.createElement('input', { checked: value, className: 'mdl-checkbox__input', disabled: disabled, onChange: this.handleOnChange.bind(this), ref: 'checkbox', type: 'checkbox' }),
	                label && _react2.default.createElement(
	                    'span',
	                    { className: 'mdl-checkbox__label' },
	                    this.i18n(label)
	                )
	            )
	        );
	    };
	
	    return InputCheckBox;
	}(_react.Component)) || _class) || _class);
	
	
	InputCheckBox.propTypes = propTypes;
	InputCheckBox.defaultProps = defaultProps;
	InputCheckBox.displayName = displayName;
	
	exports.default = InputCheckBox;
	module.exports = exports['default'];

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    label: _react.PropTypes.string,
	    onChange: _react.PropTypes.func.isRequired,
	    value: _react.PropTypes.bool.isRequired,
	    disabled: _react.PropTypes.bool,
	    error: _react.PropTypes.string
	};
	
	var defaultProps = {
	    value: false,
	    disabled: false
	};
	
	var InputCheckBoxWithError = (_dec = (0, _material2.default)('mdlHolder'), (0, _translation2.default)(_class = _dec(_class = function (_Component) {
	    _inherits(InputCheckBoxWithError, _Component);
	
	    function InputCheckBoxWithError() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, InputCheckBoxWithError);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getValue = function () {
	            var domElement = _reactDom2.default.findDOMNode(_this.refs.checkbox);
	            return domElement.checked;
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    InputCheckBoxWithError.prototype.componentDidUpdate = function componentDidUpdate() {
	        var value = this.props.value;
	
	        var method = value ? 'add' : 'remove';
	        var node = _reactDom2.default.findDOMNode(this.refs.mdlHolder);
	        if (node) {
	            node.classList[method]('is-checked');
	        }
	    };
	
	    InputCheckBoxWithError.prototype.handleOnChange = function handleOnChange(_ref) {
	        var checked = _ref.target.checked;
	        var onChange = this.props.onChange;
	
	        onChange(checked);
	    };
	
	    InputCheckBoxWithError.prototype.render = function render() {
	        var _props = this.props,
	            label = _props.label,
	            value = _props.value,
	            error = _props.error,
	            disabled = _props.disabled;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-error': !!error, 'data-focus': 'input-checkbox-with-error-container' },
	            _react2.default.createElement(
	                'label',
	                { className: 'mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect', 'data-focus': 'input-checkbox', ref: 'mdlHolder' },
	                _react2.default.createElement('input', { checked: value, className: 'mdl-checkbox__input', disabled: disabled, onChange: this.handleOnChange.bind(this), ref: 'checkbox', type: 'checkbox' }),
	                label && _react2.default.createElement(
	                    'span',
	                    { className: 'mdl-checkbox__label' },
	                    this.i18n(label)
	                ),
	                error && _react2.default.createElement(
	                    'span',
	                    { className: 'input-checkbox__error' },
	                    this.i18n(error)
	                )
	            )
	        );
	    };
	
	    return InputCheckBoxWithError;
	}(_react.Component)) || _class) || _class);
	
	
	InputCheckBoxWithError.displayName = 'InputCheckBoxWithError';
	InputCheckBoxWithError.propTypes = propTypes;
	InputCheckBoxWithError.defaultProps = defaultProps;
	exports.default = InputCheckBoxWithError;
	module.exports = exports['default'];

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class; // Dependencies
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _moment = __webpack_require__(437);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _text = __webpack_require__(438);
	
	var _text2 = _interopRequireDefault(_text);
	
	var _reactDatePicker = __webpack_require__(439);
	
	var _reactDatePicker2 = _interopRequireDefault(_reactDatePicker);
	
	var _compose = __webpack_require__(266);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _isArray = __webpack_require__(167);
	
	var _isArray2 = _interopRequireDefault(_isArray);
	
	var _uniqueId = __webpack_require__(419);
	
	var _uniqueId2 = _interopRequireDefault(_uniqueId);
	
	var _closest = __webpack_require__(428);
	
	var _closest2 = _interopRequireDefault(_closest);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var isISOString = function isISOString(value) {
	    return _moment2.default.utc(value, _moment2.default.ISO_8601).isValid();
	};
	
	var propTypes = {
	    drops: _react.PropTypes.oneOf(['up', 'down']).isRequired,
	    error: _react.PropTypes.string,
	    locale: _react.PropTypes.string.isRequired,
	    name: _react.PropTypes.string.isRequired,
	    onChange: _react.PropTypes.func.isRequired,
	    beforeValueGetter: _react.PropTypes.func.isRequired,
	    placeholder: _react.PropTypes.string,
	    showDropdowns: _react.PropTypes.bool.isRequired,
	    validate: _react.PropTypes.func,
	    value: function value(props, propName, componentName) {
	        var prop = props[propName];
	        if (prop && !isISOString(prop)) {
	            throw new Error('The date ' + prop + ' provided to the component ' + componentName + ' is not an ISO date. Please provide a valid date string.');
	        }
	    },
	    minDate: _react.PropTypes.string,
	    maxDate: _react.PropTypes.string
	};
	
	var defaultProps = {
	    drops: 'down',
	    locale: 'en',
	    format: 'MM/DD/YYYY',
	    beforeValueGetter: function beforeValueGetter(value) {
	        return value;
	    },
	    /**
	    * Default onChange prop, that will log an error.
	    */
	    onChange: function onChange() {
	        console.error('You did not give an onChange method to an input date, please check your code.');
	    },
	
	    showDropdowns: true,
	    validate: isISOString
	};
	
	var InputDate = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(InputDate, _Component);
	
	    function InputDate(props) {
	        _classCallCheck(this, InputDate);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _initialiseProps.call(_this);
	
	        var value = props.value;
	
	        var state = {
	            dropDownDate: isISOString(value) ? _moment2.default.utc(value, _moment2.default.ISO_8601) : _moment2.default.utc(),
	            inputDate: _this._formatDate(value),
	            displayPicker: false
	        };
	        _this.state = state;
	        _this._inputDateId = (0, _uniqueId2.default)('input-date-');
	        return _this;
	    }
	
	    InputDate.prototype.componentWillMount = function componentWillMount() {
	        // moment.locale(this.props.locale);
	        document.addEventListener('click', this._onDocumentClick);
	    };
	
	    InputDate.prototype.componentDidMount = function componentDidMount() {
	        var _props = this.props,
	            drops = _props.drops,
	            showDropdowns = _props.showDropdowns;
	        var startDate = this.state.inputDate;
	    };
	
	    InputDate.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	        var value = _ref.value;
	
	        this.setState({
	            dropDownDate: isISOString(value) ? _moment2.default.utc(value, _moment2.default.ISO_8601) : _moment2.default.utc(),
	            inputDate: this._formatDate(value)
	        });
	    };
	
	    InputDate.prototype.componentWillUnmount = function componentWillUnmount() {
	        document.removeEventListener('click', this._onDocumentClick);
	    };
	
	    InputDate.prototype.render = function render() {
	        var _props2 = this.props,
	            error = _props2.error,
	            locale = _props2.locale,
	            name = _props2.name,
	            placeholder = _props2.placeholder,
	            disabled = _props2.disabled,
	            minDate = _props2.minDate,
	            maxDate = _props2.maxDate;
	        var _state = this.state,
	            dropDownDate = _state.dropDownDate,
	            inputDate = _state.inputDate,
	            displayPicker = _state.displayPicker;
	        var _onInputBlur = this._onInputBlur,
	            _onInputChange = this._onInputChange,
	            _onInputFocus = this._onInputFocus,
	            _onDropDownChange = this._onDropDownChange,
	            _onPickerCloserClick = this._onPickerCloserClick,
	            _handleKeyDown = this._handleKeyDown;
	
	        var inputProps = { disabled: disabled };
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'input-date', 'data-id': this._inputDateId },
	            _react2.default.createElement(_text2.default, _extends({ error: error, name: name, onChange: _onInputChange, onKeyDown: _handleKeyDown, onFocus: _onInputFocus, placeholder: placeholder, ref: 'input', value: inputDate }, inputProps)),
	            displayPicker && _react2.default.createElement(
	                'div',
	                { 'data-focus': 'picker-zone' },
	                _react2.default.createElement(_reactDatePicker2.default, {
	                    date: dropDownDate,
	                    hideFooter: true,
	                    locale: locale,
	                    onChange: _onDropDownChange,
	                    ref: 'picker',
	                    minDate: minDate,
	                    maxDate: maxDate
	                })
	            )
	        );
	    };
	
	    return InputDate;
	}(_react.Component)) || _class;
	
	var _initialiseProps = function _initialiseProps() {
	    var _this2 = this;
	
	    this._isInputFormatCorrect = function (value) {
	        return _this2._parseInputDate(value).isValid();
	    };
	
	    this._parseInputDate = function (inputDate) {
	        var format = _this2.props.format;
	
	        return _moment2.default.utc(inputDate, format);
	    };
	
	    this._formatDate = function (isoDate) {
	        var format = _this2.props.format;
	
	        if (isISOString(isoDate)) {
	            if ((0, _isArray2.default)(format)) {
	                format = format[0];
	            }
	            return _moment2.default.utc(isoDate, _moment2.default.ISO_8601).format(format);
	        } else {
	            return isoDate;
	        }
	    };
	
	    this._onInputChange = function (inputDate, fromBlur) {
	        if (_this2._isInputFormatCorrect(inputDate)) {
	            var dropDownDate = _this2._parseInputDate(inputDate);
	            _this2.setState({ dropDownDate: dropDownDate, inputDate: inputDate });
	        } else {
	            _this2.setState({ inputDate: inputDate });
	        }
	        if (fromBlur !== true) {
	            _this2.props.onChange(inputDate);
	        }
	    };
	
	    this._onInputBlur = function () {
	        var inputDate = _this2.state.inputDate;
	
	        _this2._onInputChange(inputDate, true);
	    };
	
	    this._onDropDownChange = function (text, date) {
	        if (date._isValid) {
	            _this2.setState({ displayPicker: false }, function () {
	                var correctedDate = _moment2.default.utc(date).add((0, _moment2.default)(date).utcOffset(), 'minutes').toISOString(); // Add UTC offset to get right ISO string
	                _this2.props.onChange(correctedDate);
	                _this2._onInputChange(_this2._formatDate(correctedDate), true);
	            });
	        }
	    };
	
	    this._onInputFocus = function () {
	        _this2.setState({ displayPicker: true });
	    };
	
	    this._onDocumentClick = function (_ref2) {
	        var target = _ref2.target;
	
	        var targetClassAttr = target.getAttribute('class');
	        var isTriggeredFromPicker = targetClassAttr ? targetClassAttr.includes('dp-cell') : false; //this is the only way to check the target comes from picker cause at this stage, month and year div are unmounted by React.
	        if (!isTriggeredFromPicker) {
	            //if target was not triggered inside the date picker, we check it was not triggered by the input
	            if ((0, _closest2.default)(target, '[data-id=\'' + _this2._inputDateId + '\']', true) === undefined) {
	                _this2.setState({ displayPicker: false }, function () {
	                    return _this2._onInputBlur();
	                });
	            }
	        }
	    };
	
	    this._handleKeyDown = function (_ref3) {
	        var key = _ref3.key;
	
	        if (key === 'Tab' || key === 'Enter') {
	            _this2.setState({ displayPicker: false }, function () {
	                return _this2._onInputBlur();
	            });
	        }
	    };
	
	    this.getValue = function () {
	        var inputDate = _this2.state.inputDate;
	
	        var rawValue = _this2._isInputFormatCorrect(inputDate) ? _this2._parseInputDate(inputDate).toISOString() : null;
	        return _this2.props.beforeValueGetter(rawValue);
	    };
	
	    this.validate = function () {
	        var inputDate = _this2.state.inputDate;
	        var isRequired = _this2.props.isRequired;
	
	        if ('' === inputDate || !inputDate) {
	            return {
	                isValid: !isRequired,
	                message: 'field.required'
	            };
	        } else {
	            return {
	                isValid: _this2._isInputFormatCorrect(inputDate),
	                message: _this2.i18n('input.date.invalid', { date: inputDate })
	            };
	        }
	    };
	};
	
	InputDate.propTypes = propTypes;
	InputDate.defaultProps = defaultProps;
	InputDate.displayName = 'InputDate';
	
	exports.default = InputDate;
	module.exports = exports['default'];

/***/ }),
/* 437 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_437__;

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _class; //dependencies
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _utility = __webpack_require__(406);
	
	var _uuid = __webpack_require__(401);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var MODE = { isEdit: true };
	
	var propTypes = {
	    disabled: _react.PropTypes.bool,
	    error: _react.PropTypes.string,
	    name: _react.PropTypes.string.isRequired,
	    onChange: _react.PropTypes.func.isRequired,
	    onKeyPress: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    unformatter: _react.PropTypes.func,
	    formatter: _react.PropTypes.func,
	    type: _react.PropTypes.string,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
	};
	
	var defaultProps = {
	    disabled: false,
	    formatter: _utility.identity,
	    unformatter: _utility.identity,
	    type: 'text'
	};
	
	/**
	 * Component standing for an HTML input.
	 */
	var InputText = (_dec = (0, _material2.default)('inputText'), _dec(_class = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(InputText, _Component);
	
	    function InputText() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, InputText);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getValue = function () {
	            var unformatter = _this.props.unformatter;
	
	            var domEl = _reactDom2.default.findDOMNode(_this.refs.htmlInput);
	            return unformatter(domEl.value, MODE);
	        }, _this._handleInputChange = function (evt) {
	            var _this$props = _this.props,
	                unformatter = _this$props.unformatter,
	                onChange = _this$props.onChange;
	            var value = evt.target.value;
	
	            return onChange(unformatter(value, MODE));
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    /**
	     * Get the dom value of the component.
	     * @return {object} - The unformated dom value.
	     */
	
	
	    InputText.prototype.componentDidUpdate = function componentDidUpdate() {
	        var error = this.props.error;
	
	        if (!error) {
	            // Make sure that the main div does not hold a is-invalid class when there's no error
	            // MDL keeps the class even if React removes it
	            this.refs.inputText.classList.remove('is-invalid');
	        }
	    };
	    /**
	     * Handle the change on the input text, it only propagate the value.
	     * @param  {object} evt - The react DOM event.
	     * @return {object} - The function onChannge from the props, called.
	     */
	
	
	    /**
	     * @inheritdoc
	     * @override
	    */
	    InputText.prototype.render = function render() {
	        var _props = this.props,
	            autoFocus = _props.autoFocus,
	            onBlur = _props.onBlur,
	            disabled = _props.disabled,
	            formatter = _props.formatter,
	            unformatter = _props.unformatter,
	            maxLength = _props.maxLength,
	            onFocus = _props.onFocus,
	            onClick = _props.onClick,
	            onKeyDown = _props.onKeyDown,
	            onKeyPress = _props.onKeyPress,
	            error = _props.error,
	            name = _props.name,
	            placeholder = _props.placeholder,
	            style = _props.style,
	            rawValue = _props.value,
	            size = _props.size,
	            type = _props.type,
	            isRequired = _props.isRequired;
	
	        var value = formatter(rawValue, MODE);
	        var pattern = error ? 'hasError' : null; //add pattern to overide mdl error style when displaying an focus error.
	        var inputProps = { autoFocus: autoFocus, disabled: disabled, onKeyDown: onKeyDown, onKeyPress: onKeyPress, onBlur: onBlur, maxLength: maxLength, onFocus: onFocus, onClick: onClick, id: name, onChange: this._handleInputChange, pattern: pattern, size: size, type: type, value: !value ? '' : value };
	        if (isRequired) {
	            inputProps.required = true;
	        }
	        var errorId = null;
	        if (error) {
	            inputProps['aria-invalid'] = true;
	            errorId = _uuid2.default.v4();
	            inputProps['aria-describedby'] = errorId;
	        }
	        var cssClass = 'mdl-textfield mdl-js-textfield' + (error ? ' is-invalid' : '');
	        return _react2.default.createElement(
	            'div',
	            { className: cssClass, 'data-focus': 'input-text', ref: 'inputText', style: style },
	            _react2.default.createElement('input', _extends({ className: 'mdl-textfield__input', ref: 'htmlInput' }, inputProps)),
	            placeholder && _react2.default.createElement(
	                'label',
	                { className: 'mdl-textfield__label', htmlFor: name },
	                this.i18n(placeholder)
	            ),
	            error && _react2.default.createElement(
	                'span',
	                { className: 'mdl-textfield__error', id: errorId },
	                this.i18n(error)
	            )
	        );
	    };
	
	    return InputText;
	}(_react.Component)) || _class) || _class);
	
	//Static props.
	
	InputText.displayName = 'InputText';
	InputText.defaultProps = defaultProps;
	InputText.propTypes = propTypes;
	
	exports.default = InputText;
	module.exports = exports['default'];

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var React = __webpack_require__(146);
	
	var moment = __webpack_require__(437);
	var assign = __webpack_require__(440);
	var asConfig = __webpack_require__(441);
	
	var MonthView = __webpack_require__(444);
	var YearView = __webpack_require__(448);
	var DecadeView = __webpack_require__(449);
	var Header = __webpack_require__(450);
	
	var toMoment = __webpack_require__(446);
	
	var hasOwn = function hasOwn(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	};
	
	var onEnter = __webpack_require__(447);
	
	var Views = {
	    month: MonthView,
	    year: YearView,
	    decade: DecadeView
	};
	
	function emptyFn() {}
	
	var DatePicker = React.createClass({
	
	    displayName: 'DatePicker',
	
	    propTypes: {
	        todayText: React.PropTypes.string,
	        gotoSelectedText: React.PropTypes.string,
	
	        renderFooter: React.PropTypes.func,
	        onChange: React.PropTypes.func,
	
	        date: React.PropTypes.any,
	        viewDate: React.PropTypes.any
	    },
	
	    getViewOrder: function getViewOrder() {
	        return this.props.viewOrder || ['month', 'year', 'decade'];
	    },
	
	    getDefaultProps: function getDefaultProps() {
	        var props = assign({}, asConfig(), {
	            isDatePicker: true,
	            navOnDateClick: true,
	            defaultStyle: {
	                boxSizing: 'border-box'
	            }
	        });
	
	        delete props.viewDate;
	        delete props.date;
	
	        return props;
	    },
	
	    getInitialState: function getInitialState() {
	        return {
	            view: this.props.defaultView,
	            viewDate: this.props.defaultViewDate,
	            defaultDate: this.props.defaultDate
	        };
	    },
	
	    getViewName: function getViewName() {
	        var view = this.props.view != null ? this.props.view : this.state.view;
	
	        return view || 'month';
	    },
	
	    addViewIndex: function addViewIndex(amount) {
	        var viewName = this.getViewName();
	
	        var order = this.getViewOrder();
	        var index = order.indexOf(viewName);
	
	        index += amount;
	
	        return index % order.length;
	    },
	
	    getNextViewName: function getNextViewName() {
	        return this.getViewOrder()[this.addViewIndex(1)];
	    },
	
	    getPrevViewName: function getPrevViewName() {
	        return this.getViewOrder()[this.addViewIndex(-1)];
	    },
	
	    getView: function getView() {
	        var views = this.props.views || Views;
	        return views[this.getViewName()] || views.month;
	    },
	
	    getViewFactory: function getViewFactory() {
	        var view = this.getView();
	
	        if (React.createFactory && view && view.prototype && typeof view.prototype.render == 'function') {
	            view.__factory = view.__factory || React.createFactory(view);
	            view = view.__factory;
	        }
	
	        return view;
	    },
	
	    getViewDate: function getViewDate() {
	        var date = hasOwn(this.props, 'viewDate') ? this.props.viewDate : this.state.viewDate;
	
	        date = date || this.viewMoment || this.getDate() || new Date();
	
	        if (moment.isMoment(date)) {
	            //in order to strip the locale - the date picker may have had its locale changed
	            //between two render calls. If we don't strip this, moment(mom) returns a new moment
	            //with the locale of mom, which is not what we want
	            date = +date;
	        }
	
	        date = this.toMoment(date);
	
	        return date;
	    },
	
	    getDate: function getDate() {
	        var date;
	
	        if (hasOwn(this.props, 'date')) {
	            date = this.props.date;
	        } else {
	            date = this.state.defaultDate;
	        }
	
	        return date ? this.toMoment(date) : null;
	    },
	
	    render: function render() {
	
	        var props = assign({}, this.props);
	
	        this.toMoment = function (value, dateFormat) {
	            return toMoment(value, dateFormat || props.dateFormat, { locale: props.locale });
	        };
	
	        var view = this.getViewFactory();
	
	        props.date = this.getDate();
	
	        var dateString = props.date == null ? '' : props.date.format(this.props.dateFormat);
	
	        props.viewDate = this.viewMoment = this.getViewDate();
	        props.locale = this.props.locale;
	        props.localeData = moment.localeData(props.locale);
	
	        props.renderDay = this.props.renderDay;
	        props.onRenderDay = this.props.onRenderDay;
	
	        // props.onChange  = this.handleChange
	        // props.onSelect  = this.handleSelect
	
	        var className = (this.props.className || '') + ' date-picker';
	
	        props.style = this.prepareStyle(props);
	
	        var viewProps = props;
	        var viewProps = asConfig(props);
	
	        viewProps.dateString = dateString;
	        viewProps.localeData = props.localeData;
	        viewProps.onSelect = this.handleSelect;
	        viewProps.onChange = this.handleChange;
	
	        return React.createElement(
	            'div',
	            _extends({}, this.props, { className: className, style: props.style }),
	            this.renderHeader(view, props),
	            React.createElement(
	                'div',
	                { className: 'dp-body', style: { flex: 1 } },
	                view(viewProps)
	            ),
	            this.renderFooter(props)
	        );
	    },
	
	    prepareStyle: function prepareStyle(props) {
	        return assign({}, props.defaultStyle, props.style);
	    },
	
	    renderFooter: function renderFooter(props) {
	        if (this.props.hideFooter) {
	            return;
	        }
	
	        if (this.props.today) {
	            console.warn('Please use "todayText" prop instead of "today"!');
	        }
	        if (this.props.gotoSelected) {
	            console.warn('Please use "gotoSelectedText" prop instead of "gotoSelected"!');
	        }
	
	        var todayText = this.props.todayText || 'Today';
	        var gotoSelectedText = this.props.gotoSelectedText || 'Go to selected';
	
	        var footerProps = {
	            todayText: todayText,
	            gotoSelectedText: gotoSelectedText,
	            gotoToday: this.gotoNow,
	            gotoSelected: this.gotoSelected.bind(this, props),
	            date: props.date,
	            viewDate: props.viewDate
	        };
	
	        var result;
	        if (typeof this.props.footerFactory == 'function') {
	            result = this.props.footerFactory(footerProps);
	        }
	
	        if (result !== undefined) {
	            return result;
	        }
	
	        return React.createElement(
	            'div',
	            { className: 'dp-footer' },
	            React.createElement(
	                'div',
	                {
	                    tabIndex: '1',
	                    role: 'link',
	                    className: 'dp-footer-today',
	                    onClick: footerProps.gotoToday,
	                    onKeyUp: onEnter(footerProps.gotoToday)
	                },
	                todayText
	            ),
	            React.createElement(
	                'div',
	                {
	                    tabIndex: '1',
	                    role: 'link',
	                    className: 'dp-footer-selected',
	                    onClick: footerProps.gotoSelected,
	                    onKeyUp: onEnter(footerProps.gotoSelected)
	                },
	                gotoSelectedText
	            )
	        );
	    },
	
	    gotoNow: function gotoNow() {
	        this.gotoDate(+new Date());
	    },
	
	    gotoSelected: function gotoSelected(props) {
	        this.gotoDate(props.date || +new Date());
	    },
	
	    gotoDate: function gotoDate(value) {
	
	        this.setView('month');
	
	        this.setViewDate(value);
	    },
	
	    getViewColspan: function getViewColspan() {
	        var map = {
	            month: 5,
	            year: 2,
	            decade: 2
	        };
	
	        return map[this.getViewName()];
	    },
	
	    renderHeader: function renderHeader(view, props) {
	
	        if (this.props.hideHeader) {
	            return;
	        }
	
	        props = props || this.props;
	
	        var viewDate = this.getViewDate();
	        var headerText = this.getView().getHeaderText(viewDate, props);
	
	        var colspan = this.getViewColspan();
	        var prev = this.props.navPrev;
	        var next = this.props.navNext;
	
	        return React.createElement(
	            Header,
	            {
	                prevText: prev,
	                nextText: next,
	                colspan: colspan,
	                onPrev: this.handleNavPrev,
	                onNext: this.handleNavNext,
	                onChange: this.handleViewChange
	            },
	            headerText
	        );
	    },
	
	    handleRenderDay: function handleRenderDay(date) {
	        return (this.props.renderDay || emptyFn)(date) || [];
	    },
	
	    handleViewChange: function handleViewChange() {
	        this.setView(this.getNextViewName());
	    },
	
	    /**
	     * Use this method to set the view.
	     *
	     * @param {String} view 'month'/'year'/'decade'
	     *
	     * It calls onViewChange, and if the view is uncontrolled, also sets it is state,
	     * so the datepicker gets re-rendered view the new view
	     *
	     */
	    setView: function setView(view) {
	
	        if (typeof this.props.onViewChange == 'function') {
	            this.props.onViewChange(view);
	        }
	
	        if (this.props.view == null) {
	            this.setState({
	                view: view
	            });
	        }
	    },
	
	    setViewDate: function setViewDate(moment) {
	
	        moment = this.toMoment(moment);
	
	        var fn = this.props.onViewDateChange;
	
	        if (typeof fn == 'function') {
	
	            var text = moment.format(this.props.dateFormat);
	            var view = this.getViewName();
	
	            fn(text, moment, view);
	        }
	
	        if (!hasOwn(this.props, 'viewDate')) {
	            this.setState({
	                viewDate: moment
	            });
	        }
	    },
	
	    getNext: function getNext() {
	        var current = this.getViewDate();
	        var toMoment = this.toMoment;
	
	        return ({
	            month: function month() {
	                return toMoment(current).add(1, 'month');
	            },
	            year: function year() {
	                return toMoment(current).add(1, 'year');
	            },
	            decade: function decade() {
	                return toMoment(current).add(10, 'year');
	            }
	        })[this.getViewName()]();
	    },
	
	    getPrev: function getPrev() {
	        var current = this.getViewDate();
	        var toMoment = this.toMoment;
	
	        return ({
	            month: function month() {
	                return toMoment(current).add(-1, 'month');
	            },
	            year: function year() {
	                return toMoment(current).add(-1, 'year');
	            },
	            decade: function decade() {
	                return toMoment(current).add(-10, 'year');
	            }
	        })[this.getViewName()]();
	    },
	
	    handleNavigation: function handleNavigation(direction, event) {
	        var viewMoment = direction == -1 ? this.getPrev() : this.getNext();
	
	        this.setViewDate(viewMoment);
	
	        if (typeof this.props.onNav === 'function') {
	            var text = viewMoment.format(this.props.dateFormat);
	            var view = this.getViewName();
	
	            this.props.onNav(text, viewMoment, view, direction, event);
	        }
	    },
	
	    handleNavPrev: function handleNavPrev(event) {
	        this.handleNavigation(-1, event);
	    },
	
	    handleNavNext: function handleNavNext(event) {
	        this.handleNavigation(1, event);
	    },
	
	    handleChange: function handleChange(date, event) {
	        date = this.toMoment(date);
	
	        if (this.props.navOnDateClick) {
	            var viewDate = this.toMoment(this.getViewDate());
	
	            //it's not enough to compare months, since the year can change as well
	            //
	            //also it's ok to hardcode the format here
	            var viewMonth = viewDate.format('YYYY-MM');
	            var dateMonth = date.format('YYYY-MM');
	
	            if (dateMonth > viewMonth) {
	                this.handleNavNext(event);
	            } else if (dateMonth < viewMonth) {
	                this.handleNavPrev(event);
	            }
	        }
	
	        var text = date.format(this.props.dateFormat);
	
	        if (!hasOwn(this.props, 'date')) {
	            this.setState({
	                defaultDate: text
	            });
	        }
	
	        ;(this.props.onChange || emptyFn)(text, date, event);
	    },
	
	    handleSelect: function handleSelect(date, event) {
	        var viewName = this.getViewName();
	
	        var property = ({
	            decade: 'year',
	            year: 'month'
	        })[viewName];
	
	        var value = date.get(property);
	        var viewMoment = this.toMoment(this.getViewDate()).set(property, value);
	        var view = this.getPrevViewName();
	
	        this.setViewDate(viewMoment);
	
	        this.setView(view);
	
	        if (typeof this.props.onSelect === 'function') {
	            var text = viewMoment.format(this.props.dateFormat);
	            this.props.onSelect(text, viewMoment, view, event);
	        }
	    }
	
	});
	
	DatePicker.views = Views;
	
	var PT = React.PropTypes;
	
	DatePicker.propTypes = {
	
	    /**
	     * Function to be called when user selects a date.
	     *
	     * Called with the following params:
	     *
	     * @param {String} dateText Date formatted as string
	     * @param {Moment} moment Moment.js instance
	     * @param {Event} event
	     *
	     * @type {Function}
	     */
	    onChange: PT.func,
	
	    /**
	     * Function to be called when the user navigates to the next/prev month/year/decade
	     *
	     * Called with the following params:
	     *
	     * @param {String} dateText Date formatted as string
	     * @param {Moment} moment Moment.js instance
	     * @param {String} view The name of the current view (eg: "month")
	     * @param {Number} direction 1 or -1. 1 if the right arrow, to nav to next period was pressed. -1 if the left arrow, to nav to the prev period was pressed.
	     * @param {Event} event
	     *
	     * @type {Function}
	     */
	    onNav: PT.func,
	
	    /**
	     * Function to be called when the user selects a year/month.
	     *
	     * Called with the following params:
	     *
	     * @param {String} dateText Date formatted as string
	     * @param {Moment} moment Moment.js instance
	     * @param {String} view The name of the view displayed after following the selection. For now, either "year" or "month"
	     *
	     * @type {Function}
	     */
	    onSelect: PT.func,
	
	    /**
	     * A function that should return a React DOM for the day cell. The first param is the props object.
	     * You can use this to have full control over what gets rendered for a day.
	     *
	     * @param {Object} dayProps The props object passed to day rendering
	     *
	     * @type {Function}
	     */
	    renderDay: PT.func,
	
	    /**
	     * A function that can manipulate the props object for a day, and SHOULD return a props object (a new one, or the same).
	     * Use this for CUSTOM DAY STYLING.
	     * You can use this to take full control over the styles/css classes/attributes applied to the day cell in the month view.
	     *
	     * @param {Object} dayProps
	     * @return {Object} dayProps
	     *
	     * @type {Function}
	     */
	    onRenderDay: PT.func,
	
	    /******************************************/
	    /********** VIEW-related props ************/
	    /******************************************/
	
	    /**
	     * The default view to show in the picker. This is an uncontrolled prop.
	     * If none specified, the default view will be "month"
	     *
	     * @type {String}
	     */
	    defaultView: PT.string,
	
	    /**
	     * The view to show in the picker. This is a CONTROLLED prop!
	     *
	     * When using this controlled prop, make sure you update it when `onViewChange` function is called
	     * if you want to navigate to another view, as expected.
	     *
	     * @type {String}
	     */
	    view: PT.string,
	
	    /**
	     * A function to be called when navigating to another view date.
	     *
	     * Called with the following params:
	     *
	     * @param {String} dateText Date formatted as string
	     * @param {Moment} moment Moment.js instance
	     * @param {String} view the name of the view displayed after the navigation occurs.
	     *
	     * @type {Function}
	     */
	    onViewDateChange: PT.func,
	
	    /**
	     * A function to be called when the view is changed.
	     * If you're using the controlled `view` prop, make sure you update the `view` prop in this function if you want to navigate to another view, as expected.
	     *
	     * @param {String} nextView One of "month", "year", "decade"
	     *
	     * @type {Function}
	     */
	    onViewChange: PT.func,
	
	    /**
	     * Defaults to true. If specified as false, will not navigate to the date that was clicked, even if that date is in the prev/next month
	     * @type {Boolean}
	     */
	    navOnDateClick: PT.bool
	};
	
	module.exports = DatePicker;

/***/ }),
/* 440 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assign = __webpack_require__(440);
	
	var CONFIG = __webpack_require__(442);
	var KEYS = Object.keys(CONFIG);
	
	function copyList(src, target, list) {
	    if (src) {
	        list.forEach(function (key) {
	            target[key] = src[key];
	        });
	    }
	
	    return target;
	}
	
	/**
	 * Returns an object that copies from given source object
	 * on the resulting object only the properties also found in cfg.
	 *
	 * If no cfg specified, CONFIG is assumed
	 *
	 * @param  {object} source
	 * @param  {Object} [cfg] If not specied, CONFIG will be used
	 *
	 * @return {Object}
	 */
	module.exports = function asConfig(source, cfg) {
	
	    var keys = KEYS;
	
	    if (cfg) {
	        keys = Object.keys(cfg);
	    }
	
	    cfg = cfg || CONFIG;
	
	    if (!source) {
	        return assign({}, cfg);
	    }
	
	    return copyList(source, assign({}, cfg), keys);
	};

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getWeekDayNames = __webpack_require__(443);
	
	// console.log(getWeekDayNames())
	
	module.exports = {
	
	    //the names of week days to be displayed in month view - first should be sunday
	    weekDayNames: getWeekDayNames,
	
	    //the day to display as first day of week. defaults to 0, which is sunday
	    weekStartDay: null,
	
	    locale: null,
	
	    //the format in which days should be displayed in month view
	    dayFormat: 'D',
	
	    //the format in which months should be displayed in year view
	    monthFormat: 'MMMM',
	
	    //the format in which years should be displayed in decade view
	    yearFormat: 'YYYY',
	
	    //text for navigating to prev period
	    navPrev: '‹',
	
	    //text for navigating to next period
	    navNext: '›',
	
	    //the view to render initially. Possible values are: 'month', 'year', 'decade'
	    view: null,
	
	    //the date to mark as selected in the date picker.
	    //Can be a Date object, a moment object or a string.
	    //If it's a string, it will be parsed using dateFormat
	    date: null,
	
	    minDate: null,
	
	    maxDate: null,
	
	    //the date where to open the picker. defaults to today if no date and no viewDate specified
	    viewDate: null,
	
	    //if the date property is given as string, it will be parsed using this format
	    dateFormat: 'YYYY-MM-DD',
	
	    onRenderDay: null,
	    renderDay: null,
	
	    alwaysShowPrevWeek: false
	};

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var moment = __webpack_require__(437);
	
	var DEFAULT_WEEK_START_DAY = moment().startOf('week').format('d') * 1;
	
	module.exports = function getWeekDayNames(startDay, locale) {
	
		var weekDays;
	
		if (locale) {
			var data = moment.localeData(locale);
	
			weekDays = data && data._weekdaysShort ? data._weekdaysShort : weekDays;
		}
	
		weekDays = (weekDays || moment.weekdaysShort()).concat();
	
		var names = weekDays;
		var index = startDay == null ? DEFAULT_WEEK_START_DAY : startDay;
	
		while (index > 0) {
			names.push(names.shift());
			index--;
		}
	
		return names;
	};

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var React = __webpack_require__(146);
	var moment = __webpack_require__(437);
	var assign = __webpack_require__(440);
	
	var FORMAT = __webpack_require__(445);
	var asConfig = __webpack_require__(441);
	var onEnter = __webpack_require__(447);
	var toMoment = __webpack_require__(446);
	
	var TODAY;
	
	function emptyFn() {}
	
	var MonthView = React.createClass({
	
	  displayName: 'MonthView',
	
	  /**
	   * Formats the given date in the specified format.
	   * @method format
	   *
	   * @param  {Date/String/Moment} value
	   * @param  {String} [format] If none specified, #dateFormat will be used
	   *
	   * @return {String}
	   */
	
	  formatAsDay: function formatAsDay(moment, dayDisplayFormat) {
	    return moment.format(dayDisplayFormat || 'D');
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return asConfig();
	  },
	
	  getWeekStartMoment: function getWeekStartMoment(value) {
	    var weekStartDay = this.weekStartDay;
	    var clone = this.toMoment(value).day(weekStartDay);
	
	    return clone;
	  },
	
	  /**
	   * Returns all the days in the specified month.
	   *
	   * @param  {Moment/Date/Number} value
	   * @return {Moment[]}
	   */
	  getDaysInMonth: function getDaysInMonth(value) {
	    var first = this.toMoment(value).startOf('month');
	    var beforeFirst = this.toMoment(value).startOf('month').add(-1, 'days');
	    var start = this.getWeekStartMoment(first);
	    var result = [];
	    var i = 0;
	
	    if (beforeFirst.isBefore(start)
	    // and it doen't start with a full week before and the week has at least 1 day from current month (default)
	     && (this.props.alwaysShowPrevWeek || !start.isSame(first))) {
	      start.add(-1, 'weeks');
	    }
	
	    for (; i < 42; i++) {
	      result.push(this.toMoment(start));
	      start.add(1, 'days');
	    }
	
	    return result;
	  },
	
	  render: function render() {
	
	    var props = assign({}, this.props);
	
	    this.toMoment = function (value, dateFormat) {
	      return toMoment(value, dateFormat || props.dateFormat, { locale: props.locale });
	    };
	
	    TODAY = +this.toMoment().startOf('day');
	
	    var dateFormat = props.dateFormat;
	    var viewMoment = props.viewMoment = this.toMoment(props.viewDate, dateFormat);
	
	    var weekStartDay = props.weekStartDay;
	
	    if (weekStartDay == null) {
	      weekStartDay = props.localeData._week ? props.localeData._week.dow : null;
	    }
	
	    this.weekStartDay = props.weekStartDay = weekStartDay;
	
	    if (props.minDate && moment.isMoment(props.minDate)) {
	      props.minDate.startOf('day');
	    }
	
	    props.minDate && (props.minDate = +this.toMoment(props.minDate, dateFormat));
	    props.maxDate && (props.maxDate = +this.toMoment(props.maxDate, dateFormat));
	
	    this.monthFirst = this.toMoment(viewMoment).startOf('month');
	    this.monthLast = this.toMoment(viewMoment).endOf('month');
	
	    if (props.date) {
	      props.moment = this.toMoment(props.date).startOf('day');
	    }
	
	    var daysInView = this.getDaysInMonth(viewMoment);
	
	    return React.createElement(
	      'div',
	      { className: 'dp-table dp-month-view' },
	      this.renderWeekDayNames(),
	      this.renderDays(props, daysInView)
	    );
	  },
	
	  /**
	   * Render the given array of days
	   * @param  {Moment[]} days
	   * @return {React.DOM}
	   */
	  renderDays: function renderDays(props, days) {
	    var nodes = days.map(function (date) {
	      return this.renderDay(props, date);
	    }, this);
	
	    var len = days.length;
	    var buckets = [];
	    var bucketsLen = Math.ceil(len / 7);
	
	    var i = 0;
	
	    for (; i < bucketsLen; i++) {
	      buckets.push(nodes.slice(i * 7, (i + 1) * 7));
	    }
	
	    return buckets.map(function (bucket, i) {
	      return React.createElement(
	        'div',
	        { key: "row" + i, className: 'dp-week dp-row' },
	        bucket
	      );
	    });
	  },
	
	  renderDay: function renderDay(props, date) {
	    var dayText = FORMAT.day(date, props.dayFormat);
	    var classes = ["dp-cell dp-day"];
	
	    var dateTimestamp = +date;
	
	    if (dateTimestamp == TODAY) {
	      classes.push('dp-current');
	    } else if (dateTimestamp < this.monthFirst) {
	      classes.push('dp-prev');
	    } else if (dateTimestamp > this.monthLast) {
	      classes.push('dp-next');
	    }
	
	    var beforeMinDate;
	
	    if (props.minDate && date < props.minDate) {
	      classes.push('dp-disabled dp-before-min');
	      beforeMinDate = true;
	    }
	
	    var afterMaxDate;
	    if (props.maxDate && date > props.maxDate) {
	      classes.push('dp-disabled dp-after-max');
	      afterMaxDate = true;
	    }
	
	    if (dateTimestamp == props.moment) {
	      classes.push('dp-value');
	    }
	
	    var mom = this.toMoment(date);
	    var onClick = this.handleClick.bind(this, props, date, dateTimestamp);
	
	    var renderDayProps = {
	      role: 'link',
	      tabIndex: 1,
	      key: dayText,
	      text: dayText,
	      date: mom,
	      moment: mom,
	      className: classes.join(' '),
	      style: {},
	      onClick: onClick,
	      onKeyUp: onEnter(onClick),
	      children: dayText
	    };
	
	    if (beforeMinDate) {
	      renderDayProps.isDisabled = true;
	      renderDayProps.beforeMinDate = true;
	    }
	    if (afterMaxDate) {
	      renderDayProps.isDisabled = true;
	      renderDayProps.afterMaxDate = true;
	    }
	
	    if (typeof props.onRenderDay === 'function') {
	      renderDayProps = props.onRenderDay(renderDayProps);
	    }
	
	    var defaultRenderFunction = React.DOM.div;
	    var renderFunction = props.renderDay || defaultRenderFunction;
	
	    var result = renderFunction(renderDayProps);
	
	    if (result === undefined) {
	      result = defaultRenderFunction(renderDayProps);
	    }
	
	    return result;
	  },
	
	  getWeekDayNames: function getWeekDayNames(props) {
	    props = props || this.props;
	
	    var names = props.weekDayNames;
	    var weekStartDay = this.weekStartDay;
	
	    if (typeof names == 'function') {
	      names = names(weekStartDay, props.locale);
	    } else if (Array.isArray(names)) {
	
	      names = [].concat(names);
	
	      var index = weekStartDay;
	
	      while (index > 0) {
	        names.push(names.shift());
	        index--;
	      }
	    }
	
	    return names;
	  },
	
	  renderWeekDayNames: function renderWeekDayNames() {
	    var names = this.getWeekDayNames();
	
	    return React.createElement(
	      'div',
	      { className: 'dp-row dp-week-day-names' },
	      names.map(function (name, index) {
	        return React.createElement(
	          'div',
	          { key: index, className: 'dp-cell dp-week-day-name' },
	          name
	        );
	      })
	    );
	  },
	
	  handleClick: function handleClick(props, date, timestamp, event) {
	    if (props.minDate && timestamp < props.minDate) {
	      return;
	    }
	    if (props.maxDate && timestamp > props.maxDate) {
	      return;
	    }
	
	    event.target.value = date;(props.onChange || emptyFn)(date, event);
	  }
	});
	
	MonthView.getHeaderText = function (moment, props) {
	  return toMoment(moment, null, { locale: props.locale }).format('MMMM YYYY');
	};
	
	exports['default'] = MonthView;
	module.exports = exports['default'];

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var CONFIG = __webpack_require__(442);
	var toMoment = __webpack_require__(446);
	
	function f(mom, format) {
	    return toMoment(mom).format(format);
	}
	
	module.exports = {
	    day: function day(mom, format) {
	        return f(mom, format || CONFIG.dayFormat);
	    },
	
	    month: function month(mom, format) {
	        return f(mom, format || CONFIG.monthFormat);
	    },
	
	    year: function year(mom, format) {
	        return f(mom, format || CONFIG.yearFormat);
	    }
	};

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var moment = __webpack_require__(437);
	var CONFIG = __webpack_require__(442);
	
	/**
	 * This function will be used to convert a date to a moment.
	 *
	 * It accepts input as sring, date or moment
	 *
	 * @param  {String/Date/Moment} value
	 * @param  {String} [dateFormat] if value is string, it will be parsed to a moment using this format
	 * @param  {Object} [config]
	 * @param  {Boolean} [config.strict] whether to perform strict parsing on strings
	 * @return {Moment}
	 */
	module.exports = function (value, dateFormat, config) {
	    var strict = !!(config && config.strict);
	    var locale = config && config.locale;
	
	    dateFormat = dateFormat || CONFIG.dateFormat;
	
	    if (typeof value == 'string') {
	        return moment(value, dateFormat, locale, strict);
	    }
	
	    // return moment.isMoment(value)?
	    // 			value:
	    return moment(value == null ? new Date() : value, undefined, locale, strict);
	};

/***/ }),
/* 447 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function onKeyUp(fn) {
	  return function (event) {
	    if (event.key == 'Enter') {
	      fn(event);
	    }
	  };
	};

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(146);
	var moment = __webpack_require__(437);
	
	var FORMAT = __webpack_require__(445);
	var asConfig = __webpack_require__(441);
	var toMoment = __webpack_require__(446);
	var onEnter = __webpack_require__(447);
	var assign = __webpack_require__(440);
	
	var TODAY;
	
	function emptyFn() {}
	
	var YearView = React.createClass({
	
	    displayName: 'YearView',
	
	    getDefaultProps: function getDefaultProps() {
	
	        return asConfig();
	    },
	
	    /**
	     * Returns all the days in the specified month.
	     *
	     * @param  {Moment/Date/Number} value
	     * @return {Moment[]}
	     */
	    getMonthsInYear: function getMonthsInYear(value) {
	        var start = moment(value).startOf('year');
	        var result = [];
	        var i = 0;
	
	        for (; i < 12; i++) {
	            result.push(moment(start));
	            start.add(1, 'month');
	        }
	
	        return result;
	    },
	
	    render: function render() {
	
	        TODAY = +moment().startOf('day');
	
	        var props = assign({}, this.props);
	
	        var viewMoment = props.viewMoment = moment(this.props.viewDate);
	
	        if (props.date) {
	            props.moment = moment(props.date).startOf('month');
	        }
	
	        var monthsInView = this.getMonthsInYear(viewMoment);
	
	        return React.createElement(
	            'div',
	            { className: 'dp-table dp-year-view' },
	            this.renderMonths(props, monthsInView)
	        );
	    },
	
	    /**
	     * Render the given array of days
	     * @param  {Moment[]} days
	     * @return {React.DOM}
	     */
	    renderMonths: function renderMonths(props, days) {
	        var nodes = days.map(function (date) {
	            return this.renderMonth(props, date);
	        }, this);
	        var len = days.length;
	        var buckets = [];
	        var bucketsLen = Math.ceil(len / 4);
	
	        var i = 0;
	
	        for (; i < bucketsLen; i++) {
	            buckets.push(nodes.slice(i * 4, (i + 1) * 4));
	        }
	
	        return buckets.map(function (bucket, i) {
	            return React.createElement(
	                'div',
	                { key: "row" + i, className: 'dp-row' },
	                bucket
	            );
	        });
	    },
	
	    renderMonth: function renderMonth(props, date) {
	        var monthText = FORMAT.month(date, props.monthFormat);
	        var classes = ["dp-cell dp-month"];
	
	        var dateTimestamp = +date;
	
	        if (dateTimestamp == props.moment) {
	            classes.push('dp-value');
	        }
	
	        var onClick = this.handleClick.bind(this, props, date);
	
	        return React.createElement(
	            'div',
	            {
	                tabIndex: '1',
	                role: 'link',
	                key: monthText,
	                className: classes.join(' '),
	                onClick: onClick,
	                onKeyUp: onEnter(onClick)
	            },
	            monthText
	        );
	    },
	
	    handleClick: function handleClick(props, date, event) {
	        event.target.value = date;(props.onSelect || emptyFn)(date, event);
	    }
	});
	
	YearView.getHeaderText = function (moment, props) {
	    return toMoment(moment, null, { locale: props.locale }).format('YYYY');
	};
	
	module.exports = YearView;

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(146);
	var moment = __webpack_require__(437);
	var assign = __webpack_require__(440);
	
	var FORMAT = __webpack_require__(445);
	var asConfig = __webpack_require__(441);
	var toMoment = __webpack_require__(446);
	var onEnter = __webpack_require__(447);
	var assign = __webpack_require__(440);
	
	var TODAY;
	
	function emptyFn() {}
	
	var DecadeView = React.createClass({
	
	    displayName: 'DecadeView',
	
	    getDefaultProps: function getDefaultProps() {
	        return asConfig();
	    },
	
	    /**
	     * Returns all the years in the decade of the given value
	     *
	     * @param  {Moment/Date/Number} value
	     * @return {Moment[]}
	     */
	    getYearsInDecade: function getYearsInDecade(value) {
	        var year = moment(value).get('year');
	        var offset = year % 10;
	
	        year = year - offset - 1;
	
	        var result = [];
	        var i = 0;
	
	        var start = moment(year, 'YYYY').startOf('year');
	
	        for (; i < 12; i++) {
	            result.push(moment(start));
	            start.add(1, 'year');
	        }
	
	        return result;
	    },
	
	    render: function render() {
	
	        TODAY = +moment().startOf('day');
	
	        var props = assign({}, this.props);
	
	        var viewMoment = props.viewMoment = moment(this.props.viewDate);
	
	        if (props.date) {
	            props.moment = moment(props.date).startOf('year');
	        }
	
	        var yearsInView = this.getYearsInDecade(viewMoment);
	
	        return React.createElement(
	            'div',
	            { className: 'dp-table dp-decade-view' },
	            this.renderYears(props, yearsInView)
	        );
	    },
	
	    /**
	     * Render the given array of days
	     * @param  {Moment[]} days
	     * @return {React.DOM}
	     */
	    renderYears: function renderYears(props, days) {
	        var nodes = days.map(function (date, index, arr) {
	            return this.renderYear(props, date, index, arr);
	        }, this);
	        var len = days.length;
	        var buckets = [];
	        var bucketsLen = Math.ceil(len / 4);
	
	        var i = 0;
	
	        for (; i < bucketsLen; i++) {
	            buckets.push(nodes.slice(i * 4, (i + 1) * 4));
	        }
	
	        return buckets.map(function (bucket, i) {
	            return React.createElement(
	                'div',
	                { key: "row" + i, className: 'dp-row' },
	                bucket
	            );
	        });
	    },
	
	    renderYear: function renderYear(props, date, index, arr) {
	        var yearText = FORMAT.year(date, props.yearFormat);
	        var classes = ["dp-cell dp-year"];
	
	        var dateTimestamp = +date;
	
	        if (dateTimestamp == props.moment) {
	            classes.push('dp-value');
	        }
	
	        if (!index) {
	            classes.push('dp-prev');
	        }
	
	        if (index == arr.length - 1) {
	            classes.push('dp-next');
	        }
	
	        var onClick = this.handleClick.bind(this, props, date);
	
	        return React.createElement(
	            'div',
	            {
	                role: 'link',
	                tabIndex: '1',
	                key: yearText,
	                className: classes.join(' '),
	                onClick: onClick,
	                onKeyUp: onEnter(onClick)
	            },
	            yearText
	        );
	    },
	
	    handleClick: function handleClick(props, date, event) {
	        event.target.value = date;(props.onSelect || emptyFn)(date, event);
	    }
	});
	
	DecadeView.getHeaderText = function (value, props) {
	    var year = moment(value).get('year');
	    var offset = year % 10;
	
	    year = year - offset - 1;
	
	    return year + ' - ' + (year + 11);
	};
	
	module.exports = DecadeView;

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(146);
	var P = React.PropTypes;
	var onEnter = __webpack_require__(447);
	
	module.exports = React.createClass({
	
	  displayName: 'DatePickerHeader',
	
	  propTypes: {
	    onChange: P.func,
	    onPrev: P.func,
	    onNext: P.func,
	    colspan: P.number,
	    children: P.node
	  },
	
	  render: function render() {
	
	    var props = this.props;
	
	    return React.createElement(
	      'div',
	      { className: 'dp-header' },
	      React.createElement(
	        'div',
	        { className: 'dp-nav-table' },
	        React.createElement(
	          'div',
	          { className: 'dp-row' },
	          React.createElement(
	            'div',
	            {
	              tabIndex: '1',
	              role: 'link',
	              className: 'dp-prev-nav dp-nav-cell dp-cell',
	              onClick: props.onPrev,
	              onKeyUp: onEnter(props.onPrev)
	            },
	            props.prevText
	          ),
	          React.createElement(
	            'div',
	            {
	              tabIndex: '1',
	              role: 'link',
	              className: 'dp-nav-view dp-cell',
	              colSpan: props.colspan,
	              onClick: props.onChange,
	              onKeyUp: onEnter(props.onChange)
	            },
	            props.children
	          ),
	          React.createElement(
	            'div',
	            {
	              tabIndex: '1',
	              role: 'link',
	              className: 'dp-next-nav dp-nav-cell dp-cell',
	              onClick: props.onNext,
	              onKeyUp: onEnter(props.onNext)
	            },
	            props.nextText
	          )
	        )
	      )
	    );
	  }
	
	});

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class; //dependencies
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _lang = __webpack_require__(148);
	
	var _array = __webpack_require__(452);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var UNSELECTED_KEY = 'UNSELECTED_KEY';
	/**
	* Parse the value.
	* @param  {string | number} propsValue - The value given as props to read the type.
	* @param  {string} rawValue   - The raw string value.
	* @return {strint | number}  - The parsed value.
	*/
	function _valueParser(propsValue, rawValue) {
	    if (UNSELECTED_KEY === rawValue) {
	        return undefined;
	    }
	    var type = this.props.type;
	
	    return type === 'number' ? +rawValue : rawValue;
	}
	var propTypes = {
	    disabled: _react.PropTypes.bool,
	    error: _react.PropTypes.string,
	    hasUndefined: _react.PropTypes.bool,
	    isActiveProperty: _react.PropTypes.string,
	    isRequired: _react.PropTypes.bool,
	    labelKey: _react.PropTypes.string,
	    multiple: _react.PropTypes.bool,
	    name: _react.PropTypes.string.isRequired,
	    onChange: _react.PropTypes.func.isRequired,
	    placeholder: _react.PropTypes.string,
	    unSelectedLabel: _react.PropTypes.string,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
	    valueKey: _react.PropTypes.string,
	    values: _react.PropTypes.array.isRequired
	};
	
	var defaultProps = {
	    disabled: false,
	    hasUndefined: true,
	    isActiveProperty: 'isActive',
	    isRequired: false,
	    labelKey: 'label',
	    multiple: false,
	    unSelectedLabel: 'select.unSelected',
	    values: [],
	    valueKey: 'code',
	    valueParser: _valueParser
	};
	
	/**
	* Component standing for an HTML input.
	*/
	
	var Select = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(Select, _Component);
	
	    function Select() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, Select);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getValue = function () {
	            var _this$props = _this.props,
	                type = _this$props.type,
	                value = _this$props.value;
	
	            if ((0, _lang.isNull)(value) || (0, _lang.isUndefined)(value) || UNSELECTED_KEY === value) return null;
	            return type === 'number' ? +value : value;
	        }, _this._handleSelectChange = function (evt) {
	            var _this$props2 = _this.props,
	                onChange = _this$props2.onChange,
	                valueParser = _this$props2.valueParser,
	                propsValue = _this$props2.value;
	            var value = evt.target.value;
	
	            return onChange(valueParser.call(_this, propsValue, value));
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    /**
	    * Get the dom value of the component.
	    * @return {object} - The unformated dom value.
	    */
	
	
	    /**
	    * Handle the change on the select, it only propagates the value.
	    * @param  {object} evt - The react DOM event.
	    * @return {object} - The function onChange from the props, called.
	    */
	
	
	    /** inheritdoc */
	    Select.prototype._renderOptions = function _renderOptions(_ref) {
	        var _this2 = this;
	
	        var hasUndefined = _ref.hasUndefined,
	            labelKey = _ref.labelKey,
	            isRequired = _ref.isRequired,
	            value = _ref.value,
	            _ref$values = _ref.values,
	            values = _ref$values === undefined ? [] : _ref$values,
	            valueKey = _ref.valueKey,
	            isActiveProperty = _ref.isActiveProperty,
	            unSelectedLabel = _ref.unSelectedLabel;
	
	        var isRequiredAndNoValue = isRequired && ((0, _lang.isUndefined)(value) || (0, _lang.isNull)(value));
	        if (hasUndefined || isRequiredAndNoValue) {
	            var _ref2;
	
	            values = (0, _array.union)([(_ref2 = {}, _defineProperty(_ref2, labelKey, this.i18n(unSelectedLabel)), _defineProperty(_ref2, valueKey, UNSELECTED_KEY), _ref2)], values);
	        }
	        return values.filter(function (v) {
	            return (0, _lang.isUndefined)(v[isActiveProperty]) || v[isActiveProperty] === true;
	        }) // Filter on the
	        .map(function (val, idx) {
	            var optVal = '' + val[valueKey];
	            var elementValue = val[labelKey];
	            var optLabel = (0, _lang.isUndefined)(elementValue) || (0, _lang.isNull)(elementValue) ? _this2.i18n('select.noLabel') : elementValue;
	            return _react2.default.createElement(
	                'option',
	                { key: idx, value: optVal },
	                optLabel
	            );
	        });
	    };
	
	    /**
	    * @inheritdoc
	    * @override
	    */
	
	
	    Select.prototype.render = function render() {
	        var _props = this.props,
	            autoFocus = _props.autoFocus,
	            error = _props.error,
	            multiple = _props.multiple,
	            name = _props.name,
	            placeholder = _props.placeholder,
	            style = _props.style,
	            value = _props.value,
	            values = _props.values,
	            disabled = _props.disabled,
	            onChange = _props.onChange,
	            size = _props.size;
	
	        var selectProps = { autoFocus: autoFocus, disabled: disabled, multiple: multiple, size: size };
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'select', ref: 'select', 'data-valid': !error, style: style },
	            _react2.default.createElement(
	                'select',
	                _extends({ name: name, onChange: this._handleSelectChange, ref: 'htmlSelect', value: value }, selectProps),
	                this._renderOptions(this.props)
	            ),
	            error && _react2.default.createElement(
	                'div',
	                { className: 'label-error', ref: 'error' },
	                error
	            )
	        );
	    };
	
	    return Select;
	}(_react.Component)) || _class;
	
	//Static props.
	
	
	Select.displayName = 'Select';
	Select.defaultProps = defaultProps;
	Select.propTypes = propTypes;
	
	exports.default = Select;
	module.exports = exports['default'];

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'chunk': __webpack_require__(453),
	  'compact': __webpack_require__(454),
	  'difference': __webpack_require__(455),
	  'drop': __webpack_require__(456),
	  'dropRight': __webpack_require__(457),
	  'dropRightWhile': __webpack_require__(458),
	  'dropWhile': __webpack_require__(460),
	  'fill': __webpack_require__(461),
	  'findIndex': __webpack_require__(463),
	  'findLastIndex': __webpack_require__(466),
	  'first': __webpack_require__(467),
	  'flatten': __webpack_require__(468),
	  'flattenDeep': __webpack_require__(469),
	  'head': __webpack_require__(470),
	  'indexOf': __webpack_require__(471),
	  'initial': __webpack_require__(474),
	  'intersection': __webpack_require__(475),
	  'last': __webpack_require__(362),
	  'lastIndexOf': __webpack_require__(476),
	  'object': __webpack_require__(477),
	  'pull': __webpack_require__(479),
	  'pullAt': __webpack_require__(480),
	  'remove': __webpack_require__(484),
	  'rest': __webpack_require__(485),
	  'slice': __webpack_require__(486),
	  'sortedIndex': __webpack_require__(487),
	  'sortedLastIndex': __webpack_require__(489),
	  'tail': __webpack_require__(490),
	  'take': __webpack_require__(491),
	  'takeRight': __webpack_require__(492),
	  'takeRightWhile': __webpack_require__(493),
	  'takeWhile': __webpack_require__(494),
	  'union': __webpack_require__(495),
	  'uniq': __webpack_require__(497),
	  'unique': __webpack_require__(499),
	  'unzip': __webpack_require__(500),
	  'unzipWith': __webpack_require__(502),
	  'without': __webpack_require__(504),
	  'xor': __webpack_require__(505),
	  'zip': __webpack_require__(506),
	  'zipObject': __webpack_require__(478),
	  'zipWith': __webpack_require__(507)
	};


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360),
	    isIterateeCall = __webpack_require__(180);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeFloor = Math.floor,
	    nativeMax = Math.max;
	
	/**
	 * Creates an array of elements split into groups the length of `size`.
	 * If `collection` can't be split evenly, the final chunk will be the remaining
	 * elements.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to process.
	 * @param {number} [size=1] The length of each chunk.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the new array containing chunks.
	 * @example
	 *
	 * _.chunk(['a', 'b', 'c', 'd'], 2);
	 * // => [['a', 'b'], ['c', 'd']]
	 *
	 * _.chunk(['a', 'b', 'c', 'd'], 3);
	 * // => [['a', 'b', 'c'], ['d']]
	 */
	function chunk(array, size, guard) {
	  if (guard ? isIterateeCall(array, size, guard) : size == null) {
	    size = 1;
	  } else {
	    size = nativeMax(nativeFloor(size) || 1, 1);
	  }
	  var index = 0,
	      length = array ? array.length : 0,
	      resIndex = -1,
	      result = Array(nativeCeil(length / size));
	
	  while (index < length) {
	    result[++resIndex] = baseSlice(array, index, (index += size));
	  }
	  return result;
	}
	
	module.exports = chunk;


/***/ }),
/* 454 */
/***/ (function(module, exports) {

	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */
	function compact(array) {
	  var index = -1,
	      length = array ? array.length : 0,
	      resIndex = -1,
	      result = [];
	
	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = compact;


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	var baseDifference = __webpack_require__(385),
	    baseFlatten = __webpack_require__(261),
	    isArrayLike = __webpack_require__(161),
	    isObjectLike = __webpack_require__(160),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates an array of unique `array` values not included in the other
	 * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The arrays of values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.difference([1, 2, 3], [4, 2]);
	 * // => [1, 3]
	 */
	var difference = restParam(function(array, values) {
	  return (isObjectLike(array) && isArrayLike(array))
	    ? baseDifference(array, baseFlatten(values, false, true))
	    : [];
	});
	
	module.exports = difference;


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a slice of `array` with `n` elements dropped from the beginning.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to drop.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.drop([1, 2, 3]);
	 * // => [2, 3]
	 *
	 * _.drop([1, 2, 3], 2);
	 * // => [3]
	 *
	 * _.drop([1, 2, 3], 5);
	 * // => []
	 *
	 * _.drop([1, 2, 3], 0);
	 * // => [1, 2, 3]
	 */
	function drop(array, n, guard) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (guard ? isIterateeCall(array, n, guard) : n == null) {
	    n = 1;
	  }
	  return baseSlice(array, n < 0 ? 0 : n);
	}
	
	module.exports = drop;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a slice of `array` with `n` elements dropped from the end.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to drop.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.dropRight([1, 2, 3]);
	 * // => [1, 2]
	 *
	 * _.dropRight([1, 2, 3], 2);
	 * // => [1]
	 *
	 * _.dropRight([1, 2, 3], 5);
	 * // => []
	 *
	 * _.dropRight([1, 2, 3], 0);
	 * // => [1, 2, 3]
	 */
	function dropRight(array, n, guard) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (guard ? isIterateeCall(array, n, guard) : n == null) {
	    n = 1;
	  }
	  n = length - (+n || 0);
	  return baseSlice(array, 0, n < 0 ? 0 : n);
	}
	
	module.exports = dropRight;


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseWhile = __webpack_require__(459);
	
	/**
	 * Creates a slice of `array` excluding elements dropped from the end.
	 * Elements are dropped until `predicate` returns falsey. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, index, array).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that match the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.dropRightWhile([1, 2, 3], function(n) {
	 *   return n > 1;
	 * });
	 * // => [1]
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': true },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	 * // => ['barney', 'fred']
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	 * // => ['barney']
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	 * // => ['barney', 'fred', 'pebbles']
	 */
	function dropRightWhile(array, predicate, thisArg) {
	  return (array && array.length)
	    ? baseWhile(array, baseCallback(predicate, thisArg, 3), true, true)
	    : [];
	}
	
	module.exports = dropRightWhile;


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360);
	
	/**
	 * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	 * and `_.takeWhile` without support for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseWhile(array, predicate, isDrop, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;
	
	  while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	  return isDrop
	    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	}
	
	module.exports = baseWhile;


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseWhile = __webpack_require__(459);
	
	/**
	 * Creates a slice of `array` excluding elements dropped from the beginning.
	 * Elements are dropped until `predicate` returns falsey. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, index, array).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.dropWhile([1, 2, 3], function(n) {
	 *   return n < 3;
	 * });
	 * // => [3]
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	 * // => ['fred', 'pebbles']
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.pluck(_.dropWhile(users, 'active', false), 'user');
	 * // => ['pebbles']
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.dropWhile(users, 'active'), 'user');
	 * // => ['barney', 'fred', 'pebbles']
	 */
	function dropWhile(array, predicate, thisArg) {
	  return (array && array.length)
	    ? baseWhile(array, baseCallback(predicate, thisArg, 3), true)
	    : [];
	}
	
	module.exports = dropWhile;


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFill = __webpack_require__(462),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Fills elements of `array` with `value` from `start` up to, but not
	 * including, `end`.
	 *
	 * **Note:** This method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to fill.
	 * @param {*} value The value to fill `array` with.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3];
	 *
	 * _.fill(array, 'a');
	 * console.log(array);
	 * // => ['a', 'a', 'a']
	 *
	 * _.fill(Array(3), 2);
	 * // => [2, 2, 2]
	 *
	 * _.fill([4, 6, 8], '*', 1, 2);
	 * // => [4, '*', 8]
	 */
	function fill(array, value, start, end) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	    start = 0;
	    end = length;
	  }
	  return baseFill(array, value, start, end);
	}
	
	module.exports = fill;


/***/ }),
/* 462 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.fill` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to fill.
	 * @param {*} value The value to fill `array` with.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns `array`.
	 */
	function baseFill(array, value, start, end) {
	  var length = array.length;
	
	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : (end >>> 0);
	  start >>>= 0;
	
	  while (start < length) {
	    array[start++] = value;
	  }
	  return array;
	}
	
	module.exports = baseFill;


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	var createFindIndex = __webpack_require__(464);
	
	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(chr) {
	 *   return chr.user == 'barney';
	 * });
	 * // => 0
	 *
	 * // using the `_.matches` callback shorthand
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.findIndex(users, 'active', false);
	 * // => 0
	 *
	 * // using the `_.property` callback shorthand
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	var findIndex = createFindIndex();
	
	module.exports = findIndex;


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseFindIndex = __webpack_require__(465);
	
	/**
	 * Creates a `_.findIndex` or `_.findLastIndex` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFindIndex(fromRight) {
	  return function(array, predicate, thisArg) {
	    if (!(array && array.length)) {
	      return -1;
	    }
	    predicate = baseCallback(predicate, thisArg, 3);
	    return baseFindIndex(array, predicate, fromRight);
	  };
	}
	
	module.exports = createFindIndex;


/***/ }),
/* 465 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;
	
	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = baseFindIndex;


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	var createFindIndex = __webpack_require__(464);
	
	/**
	 * This method is like `_.findIndex` except that it iterates over elements
	 * of `collection` from right to left.
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': true },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': false }
	 * ];
	 *
	 * _.findLastIndex(users, function(chr) {
	 *   return chr.user == 'pebbles';
	 * });
	 * // => 2
	 *
	 * // using the `_.matches` callback shorthand
	 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	 * // => 0
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.findLastIndex(users, 'active', false);
	 * // => 2
	 *
	 * // using the `_.property` callback shorthand
	 * _.findLastIndex(users, 'active');
	 * // => 0
	 */
	var findLastIndex = createFindIndex(true);
	
	module.exports = findLastIndex;


/***/ }),
/* 467 */
/***/ (function(module, exports) {

	/**
	 * Gets the first element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @alias head
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the first element of `array`.
	 * @example
	 *
	 * _.first([1, 2, 3]);
	 * // => 1
	 *
	 * _.first([]);
	 * // => undefined
	 */
	function first(array) {
	  return array ? array[0] : undefined;
	}
	
	module.exports = first;


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Flattens a nested array. If `isDeep` is `true` the array is recursively
	 * flattened, otherwise it's only flattened a single level.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, 3, [4]]]);
	 * // => [1, 2, 3, [4]]
	 *
	 * // using `isDeep`
	 * _.flatten([1, [2, 3, [4]]], true);
	 * // => [1, 2, 3, 4]
	 */
	function flatten(array, isDeep, guard) {
	  var length = array ? array.length : 0;
	  if (guard && isIterateeCall(array, isDeep, guard)) {
	    isDeep = false;
	  }
	  return length ? baseFlatten(array, isDeep) : [];
	}
	
	module.exports = flatten;


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261);
	
	/**
	 * Recursively flattens a nested array.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to recursively flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flattenDeep([1, [2, 3, [4]]]);
	 * // => [1, 2, 3, 4]
	 */
	function flattenDeep(array) {
	  var length = array ? array.length : 0;
	  return length ? baseFlatten(array, true) : [];
	}
	
	module.exports = flattenDeep;


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(467);


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(386),
	    binaryIndex = __webpack_require__(472);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Gets the index at which the first occurrence of `value` is found in `array`
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	 * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	 * performs a faster binary search.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	 *  to perform a binary search on a sorted array.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.indexOf([1, 2, 1, 2], 2);
	 * // => 1
	 *
	 * // using `fromIndex`
	 * _.indexOf([1, 2, 1, 2], 2, 2);
	 * // => 3
	 *
	 * // performing a binary search
	 * _.indexOf([1, 1, 2, 2], 2, true);
	 * // => 2
	 */
	function indexOf(array, value, fromIndex) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return -1;
	  }
	  if (typeof fromIndex == 'number') {
	    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	  } else if (fromIndex) {
	    var index = binaryIndex(array, value);
	    if (index < length &&
	        (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	      return index;
	    }
	    return -1;
	  }
	  return baseIndexOf(array, value, fromIndex || 0);
	}
	
	module.exports = indexOf;


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	var binaryIndexBy = __webpack_require__(473),
	    identity = __webpack_require__(179);
	
	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295,
	    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	/**
	 * Performs a binary search of `array` to determine the index at which `value`
	 * should be inserted into `array` in order to maintain its sort order.
	 *
	 * @private
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {boolean} [retHighest] Specify returning the highest qualified index.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 */
	function binaryIndex(array, value, retHighest) {
	  var low = 0,
	      high = array ? array.length : low;
	
	  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	    while (low < high) {
	      var mid = (low + high) >>> 1,
	          computed = array[mid];
	
	      if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	        low = mid + 1;
	      } else {
	        high = mid;
	      }
	    }
	    return high;
	  }
	  return binaryIndexBy(array, value, identity, retHighest);
	}
	
	module.exports = binaryIndex;


/***/ }),
/* 473 */
/***/ (function(module, exports) {

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeFloor = Math.floor,
	    nativeMin = Math.min;
	
	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295,
	    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;
	
	/**
	 * This function is like `binaryIndex` except that it invokes `iteratee` for
	 * `value` and each element of `array` to compute their sort ranking. The
	 * iteratee is invoked with one argument; (value).
	 *
	 * @private
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {boolean} [retHighest] Specify returning the highest qualified index.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 */
	function binaryIndexBy(array, value, iteratee, retHighest) {
	  value = iteratee(value);
	
	  var low = 0,
	      high = array ? array.length : 0,
	      valIsNaN = value !== value,
	      valIsNull = value === null,
	      valIsUndef = value === undefined;
	
	  while (low < high) {
	    var mid = nativeFloor((low + high) / 2),
	        computed = iteratee(array[mid]),
	        isDef = computed !== undefined,
	        isReflexive = computed === computed;
	
	    if (valIsNaN) {
	      var setLow = isReflexive || retHighest;
	    } else if (valIsNull) {
	      setLow = isReflexive && isDef && (retHighest || computed != null);
	    } else if (valIsUndef) {
	      setLow = isReflexive && (retHighest || isDef);
	    } else if (computed == null) {
	      setLow = false;
	    } else {
	      setLow = retHighest ? (computed <= value) : (computed < value);
	    }
	    if (setLow) {
	      low = mid + 1;
	    } else {
	      high = mid;
	    }
	  }
	  return nativeMin(high, MAX_ARRAY_INDEX);
	}
	
	module.exports = binaryIndexBy;


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	var dropRight = __webpack_require__(457);
	
	/**
	 * Gets all but the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.initial([1, 2, 3]);
	 * // => [1, 2]
	 */
	function initial(array) {
	  return dropRight(array, 1);
	}
	
	module.exports = initial;


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(386),
	    cacheIndexOf = __webpack_require__(388),
	    createCache = __webpack_require__(389),
	    isArrayLike = __webpack_require__(161),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates an array of unique values that are included in all of the provided
	 * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of shared values.
	 * @example
	 * _.intersection([1, 2], [4, 2], [2, 1]);
	 * // => [2]
	 */
	var intersection = restParam(function(arrays) {
	  var othLength = arrays.length,
	      othIndex = othLength,
	      caches = Array(length),
	      indexOf = baseIndexOf,
	      isCommon = true,
	      result = [];
	
	  while (othIndex--) {
	    var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	    caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	  }
	  var array = arrays[0],
	      index = -1,
	      length = array ? array.length : 0,
	      seen = caches[0];
	
	  outer:
	  while (++index < length) {
	    value = array[index];
	    if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	      var othIndex = othLength;
	      while (--othIndex) {
	        var cache = caches[othIndex];
	        if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	          continue outer;
	        }
	      }
	      if (seen) {
	        seen.push(value);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	});
	
	module.exports = intersection;


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	var binaryIndex = __webpack_require__(472),
	    indexOfNaN = __webpack_require__(387);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;
	
	/**
	 * This method is like `_.indexOf` except that it iterates over elements of
	 * `array` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	 *  or `true` to perform a binary search on a sorted array.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.lastIndexOf([1, 2, 1, 2], 2);
	 * // => 3
	 *
	 * // using `fromIndex`
	 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	 * // => 1
	 *
	 * // performing a binary search
	 * _.lastIndexOf([1, 1, 2, 2], 2, true);
	 * // => 3
	 */
	function lastIndexOf(array, value, fromIndex) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return -1;
	  }
	  var index = length;
	  if (typeof fromIndex == 'number') {
	    index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	  } else if (fromIndex) {
	    index = binaryIndex(array, value, true) - 1;
	    var other = array[index];
	    if (value === value ? (value === other) : (other !== other)) {
	      return index;
	    }
	    return -1;
	  }
	  if (value !== value) {
	    return indexOfNaN(array, index, true);
	  }
	  while (index--) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = lastIndexOf;


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(478);


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(167);
	
	/**
	 * The inverse of `_.pairs`; this method returns an object composed from arrays
	 * of property names and values. Provide either a single two dimensional array,
	 * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	 * and one of corresponding values.
	 *
	 * @static
	 * @memberOf _
	 * @alias object
	 * @category Array
	 * @param {Array} props The property names.
	 * @param {Array} [values=[]] The property values.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * _.zipObject([['fred', 30], ['barney', 40]]);
	 * // => { 'fred': 30, 'barney': 40 }
	 *
	 * _.zipObject(['fred', 'barney'], [30, 40]);
	 * // => { 'fred': 30, 'barney': 40 }
	 */
	function zipObject(props, values) {
	  var index = -1,
	      length = props ? props.length : 0,
	      result = {};
	
	  if (length && !values && !isArray(props[0])) {
	    values = [];
	  }
	  while (++index < length) {
	    var key = props[index];
	    if (values) {
	      result[key] = values[index];
	    } else if (key) {
	      result[key[0]] = key[1];
	    }
	  }
	  return result;
	}
	
	module.exports = zipObject;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(386);
	
	/** Used for native method references. */
	var arrayProto = Array.prototype;
	
	/** Native method references. */
	var splice = arrayProto.splice;
	
	/**
	 * Removes all provided values from `array` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.without`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...*} [values] The values to remove.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3, 1, 2, 3];
	 *
	 * _.pull(array, 2, 3);
	 * console.log(array);
	 * // => [1, 1]
	 */
	function pull() {
	  var args = arguments,
	      array = args[0];
	
	  if (!(array && array.length)) {
	    return array;
	  }
	  var index = 0,
	      indexOf = baseIndexOf,
	      length = args.length;
	
	  while (++index < length) {
	    var fromIndex = 0,
	        value = args[index];
	
	    while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	      splice.call(array, fromIndex, 1);
	    }
	  }
	  return array;
	}
	
	module.exports = pull;


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAt = __webpack_require__(481),
	    baseCompareAscending = __webpack_require__(482),
	    baseFlatten = __webpack_require__(261),
	    basePullAt = __webpack_require__(483),
	    restParam = __webpack_require__(259);
	
	/**
	 * Removes elements from `array` corresponding to the given indexes and returns
	 * an array of the removed elements. Indexes may be specified as an array of
	 * indexes or as individual arguments.
	 *
	 * **Note:** Unlike `_.at`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	 *  specified as individual indexes or arrays of indexes.
	 * @returns {Array} Returns the new array of removed elements.
	 * @example
	 *
	 * var array = [5, 10, 15, 20];
	 * var evens = _.pullAt(array, 1, 3);
	 *
	 * console.log(array);
	 * // => [5, 15]
	 *
	 * console.log(evens);
	 * // => [10, 20]
	 */
	var pullAt = restParam(function(array, indexes) {
	  indexes = baseFlatten(indexes);
	
	  var result = baseAt(array, indexes);
	  basePullAt(array, indexes.sort(baseCompareAscending));
	  return result;
	});
	
	module.exports = pullAt;


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(161),
	    isIndex = __webpack_require__(168);
	
	/**
	 * The base implementation of `_.at` without support for string collections
	 * and individual key arguments.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {number[]|string[]} props The property names or indexes of elements to pick.
	 * @returns {Array} Returns the new array of picked elements.
	 */
	function baseAt(collection, props) {
	  var index = -1,
	      isNil = collection == null,
	      isArr = !isNil && isArrayLike(collection),
	      length = isArr ? collection.length : 0,
	      propsLength = props.length,
	      result = Array(propsLength);
	
	  while(++index < propsLength) {
	    var key = props[index];
	    if (isArr) {
	      result[index] = isIndex(key, length) ? collection[key] : undefined;
	    } else {
	      result[index] = isNil ? undefined : collection[key];
	    }
	  }
	  return result;
	}
	
	module.exports = baseAt;


/***/ }),
/* 482 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `compareAscending` which compares values and
	 * sorts them in ascending order without guaranteeing a stable sort.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function baseCompareAscending(value, other) {
	  if (value !== other) {
	    var valIsNull = value === null,
	        valIsUndef = value === undefined,
	        valIsReflexive = value === value;
	
	    var othIsNull = other === null,
	        othIsUndef = other === undefined,
	        othIsReflexive = other === other;
	
	    if ((value > other && !othIsNull) || !valIsReflexive ||
	        (valIsNull && !othIsUndef && othIsReflexive) ||
	        (valIsUndef && othIsReflexive)) {
	      return 1;
	    }
	    if ((value < other && !valIsNull) || !othIsReflexive ||
	        (othIsNull && !valIsUndef && valIsReflexive) ||
	        (othIsUndef && valIsReflexive)) {
	      return -1;
	    }
	  }
	  return 0;
	}
	
	module.exports = baseCompareAscending;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	var isIndex = __webpack_require__(168);
	
	/** Used for native method references. */
	var arrayProto = Array.prototype;
	
	/** Native method references. */
	var splice = arrayProto.splice;
	
	/**
	 * The base implementation of `_.pullAt` without support for individual
	 * index arguments and capturing the removed elements.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {number[]} indexes The indexes of elements to remove.
	 * @returns {Array} Returns `array`.
	 */
	function basePullAt(array, indexes) {
	  var length = array ? indexes.length : 0;
	  while (length--) {
	    var index = indexes[length];
	    if (index != previous && isIndex(index)) {
	      var previous = index;
	      splice.call(array, index, 1);
	    }
	  }
	  return array;
	}
	
	module.exports = basePullAt;


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    basePullAt = __webpack_require__(483);
	
	/**
	 * Removes all elements from `array` that `predicate` returns truthy for
	 * and returns an array of the removed elements. The predicate is bound to
	 * `thisArg` and invoked with three arguments: (value, index, array).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * **Note:** Unlike `_.filter`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the new array of removed elements.
	 * @example
	 *
	 * var array = [1, 2, 3, 4];
	 * var evens = _.remove(array, function(n) {
	 *   return n % 2 == 0;
	 * });
	 *
	 * console.log(array);
	 * // => [1, 3]
	 *
	 * console.log(evens);
	 * // => [2, 4]
	 */
	function remove(array, predicate, thisArg) {
	  var result = [];
	  if (!(array && array.length)) {
	    return result;
	  }
	  var index = -1,
	      indexes = [],
	      length = array.length;
	
	  predicate = baseCallback(predicate, thisArg, 3);
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result.push(value);
	      indexes.push(index);
	    }
	  }
	  basePullAt(array, indexes);
	  return result;
	}
	
	module.exports = remove;


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	var drop = __webpack_require__(456);
	
	/**
	 * Gets all but the first element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @alias tail
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.rest([1, 2, 3]);
	 * // => [2, 3]
	 */
	function rest(array) {
	  return drop(array, 1);
	}
	
	module.exports = rest;


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a slice of `array` from `start` up to, but not including, `end`.
	 *
	 * **Note:** This method is used instead of `Array#slice` to support node
	 * lists in IE < 9 and to ensure dense arrays are returned.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function slice(array, start, end) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	    start = 0;
	    end = length;
	  }
	  return baseSlice(array, start, end);
	}
	
	module.exports = slice;


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	var createSortedIndex = __webpack_require__(488);
	
	/**
	 * Uses a binary search to determine the lowest index at which `value` should
	 * be inserted into `array` in order to maintain its sort order. If an iteratee
	 * function is provided it's invoked for `value` and each element of `array`
	 * to compute their sort ranking. The iteratee is bound to `thisArg` and
	 * invoked with one argument; (value).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 * @example
	 *
	 * _.sortedIndex([30, 50], 40);
	 * // => 1
	 *
	 * _.sortedIndex([4, 4, 5, 5], 5);
	 * // => 2
	 *
	 * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	 *
	 * // using an iteratee function
	 * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	 *   return this.data[word];
	 * }, dict);
	 * // => 1
	 *
	 * // using the `_.property` callback shorthand
	 * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	 * // => 1
	 */
	var sortedIndex = createSortedIndex();
	
	module.exports = sortedIndex;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    binaryIndex = __webpack_require__(472),
	    binaryIndexBy = __webpack_require__(473);
	
	/**
	 * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	 *
	 * @private
	 * @param {boolean} [retHighest] Specify returning the highest qualified index.
	 * @returns {Function} Returns the new index function.
	 */
	function createSortedIndex(retHighest) {
	  return function(array, value, iteratee, thisArg) {
	    return iteratee == null
	      ? binaryIndex(array, value, retHighest)
	      : binaryIndexBy(array, value, baseCallback(iteratee, thisArg, 1), retHighest);
	  };
	}
	
	module.exports = createSortedIndex;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	var createSortedIndex = __webpack_require__(488);
	
	/**
	 * This method is like `_.sortedIndex` except that it returns the highest
	 * index at which `value` should be inserted into `array` in order to
	 * maintain its sort order.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The sorted array to inspect.
	 * @param {*} value The value to evaluate.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {number} Returns the index at which `value` should be inserted
	 *  into `array`.
	 * @example
	 *
	 * _.sortedLastIndex([4, 4, 5, 5], 5);
	 * // => 4
	 */
	var sortedLastIndex = createSortedIndex(true);
	
	module.exports = sortedLastIndex;


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(485);


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a slice of `array` with `n` elements taken from the beginning.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to take.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.take([1, 2, 3]);
	 * // => [1]
	 *
	 * _.take([1, 2, 3], 2);
	 * // => [1, 2]
	 *
	 * _.take([1, 2, 3], 5);
	 * // => [1, 2, 3]
	 *
	 * _.take([1, 2, 3], 0);
	 * // => []
	 */
	function take(array, n, guard) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (guard ? isIterateeCall(array, n, guard) : n == null) {
	    n = 1;
	  }
	  return baseSlice(array, 0, n < 0 ? 0 : n);
	}
	
	module.exports = take;


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(360),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates a slice of `array` with `n` elements taken from the end.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to take.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.takeRight([1, 2, 3]);
	 * // => [3]
	 *
	 * _.takeRight([1, 2, 3], 2);
	 * // => [2, 3]
	 *
	 * _.takeRight([1, 2, 3], 5);
	 * // => [1, 2, 3]
	 *
	 * _.takeRight([1, 2, 3], 0);
	 * // => []
	 */
	function takeRight(array, n, guard) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (guard ? isIterateeCall(array, n, guard) : n == null) {
	    n = 1;
	  }
	  n = length - (+n || 0);
	  return baseSlice(array, n < 0 ? 0 : n);
	}
	
	module.exports = takeRight;


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseWhile = __webpack_require__(459);
	
	/**
	 * Creates a slice of `array` with elements taken from the end. Elements are
	 * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	 * and invoked with three arguments: (value, index, array).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.takeRightWhile([1, 2, 3], function(n) {
	 *   return n > 1;
	 * });
	 * // => [2, 3]
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': true },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	 * // => ['pebbles']
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	 * // => ['fred', 'pebbles']
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	 * // => []
	 */
	function takeRightWhile(array, predicate, thisArg) {
	  return (array && array.length)
	    ? baseWhile(array, baseCallback(predicate, thisArg, 3), false, true)
	    : [];
	}
	
	module.exports = takeRightWhile;


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseWhile = __webpack_require__(459);
	
	/**
	 * Creates a slice of `array` with elements taken from the beginning. Elements
	 * are taken until `predicate` returns falsey. The predicate is bound to
	 * `thisArg` and invoked with three arguments: (value, index, array).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.takeWhile([1, 2, 3], function(n) {
	 *   return n < 3;
	 * });
	 * // => [1, 2]
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false},
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	 * // => ['barney']
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.pluck(_.takeWhile(users, 'active', false), 'user');
	 * // => ['barney', 'fred']
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.takeWhile(users, 'active'), 'user');
	 * // => []
	 */
	function takeWhile(array, predicate, thisArg) {
	  return (array && array.length)
	    ? baseWhile(array, baseCallback(predicate, thisArg, 3))
	    : [];
	}
	
	module.exports = takeWhile;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261),
	    baseUniq = __webpack_require__(496),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates an array of unique values, in order, from all of the provided arrays
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([1, 2], [4, 2], [2, 1]);
	 * // => [1, 2, 4]
	 */
	var union = restParam(function(arrays) {
	  return baseUniq(baseFlatten(arrays, false, true));
	});
	
	module.exports = union;


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(386),
	    cacheIndexOf = __webpack_require__(388),
	    createCache = __webpack_require__(389);
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/**
	 * The base implementation of `_.uniq` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee) {
	  var index = -1,
	      indexOf = baseIndexOf,
	      length = array.length,
	      isCommon = true,
	      isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	      seen = isLarge ? createCache() : null,
	      result = [];
	
	  if (seen) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	  } else {
	    isLarge = false;
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;
	
	    if (isCommon && value === value) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (indexOf(seen, computed, 0) < 0) {
	      if (iteratee || isLarge) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}
	
	module.exports = baseUniq;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseUniq = __webpack_require__(496),
	    isIterateeCall = __webpack_require__(180),
	    sortedUniq = __webpack_require__(498);
	
	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurence of each element
	 * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	 * for sorted arrays. If an iteratee function is provided it's invoked for
	 * each element in the array to generate the criterion by which uniqueness
	 * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index, array).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias unique
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {boolean} [isSorted] Specify the array is sorted.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new duplicate-value-free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 *
	 * // using `isSorted`
	 * _.uniq([1, 1, 2], true);
	 * // => [1, 2]
	 *
	 * // using an iteratee function
	 * _.uniq([1, 2.5, 1.5, 2], function(n) {
	 *   return this.floor(n);
	 * }, Math);
	 * // => [1, 2.5]
	 *
	 * // using the `_.property` callback shorthand
	 * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */
	function uniq(array, isSorted, iteratee, thisArg) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (isSorted != null && typeof isSorted != 'boolean') {
	    thisArg = iteratee;
	    iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	    isSorted = false;
	  }
	  iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
	  return (isSorted)
	    ? sortedUniq(array, iteratee)
	    : baseUniq(array, iteratee);
	}
	
	module.exports = uniq;


/***/ }),
/* 498 */
/***/ (function(module, exports) {

	/**
	 * An implementation of `_.uniq` optimized for sorted arrays without support
	 * for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function sortedUniq(array, iteratee) {
	  var seen,
	      index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;
	
	    if (!index || seen !== computed) {
	      seen = computed;
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = sortedUniq;


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(497);


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(501),
	    arrayMap = __webpack_require__(384),
	    baseProperty = __webpack_require__(163),
	    isArrayLike = __webpack_require__(161);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * This method is like `_.zip` except that it accepts an array of grouped
	 * elements and creates an array regrouping the elements to their pre-zip
	 * configuration.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array of grouped elements to process.
	 * @returns {Array} Returns the new array of regrouped elements.
	 * @example
	 *
	 * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	 * // => [['fred', 30, true], ['barney', 40, false]]
	 *
	 * _.unzip(zipped);
	 * // => [['fred', 'barney'], [30, 40], [true, false]]
	 */
	function unzip(array) {
	  if (!(array && array.length)) {
	    return [];
	  }
	  var index = -1,
	      length = 0;
	
	  array = arrayFilter(array, function(group) {
	    if (isArrayLike(group)) {
	      length = nativeMax(group.length, length);
	      return true;
	    }
	  });
	  var result = Array(length);
	  while (++index < length) {
	    result[index] = arrayMap(array, baseProperty(index));
	  }
	  return result;
	}
	
	module.exports = unzip;


/***/ }),
/* 501 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];
	
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = arrayFilter;


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(384),
	    arrayReduce = __webpack_require__(503),
	    bindCallback = __webpack_require__(178),
	    unzip = __webpack_require__(500);
	
	/**
	 * This method is like `_.unzip` except that it accepts an iteratee to specify
	 * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	 * and invoked with four arguments: (accumulator, value, index, group).
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array of grouped elements to process.
	 * @param {Function} [iteratee] The function to combine regrouped values.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new array of regrouped elements.
	 * @example
	 *
	 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	 * // => [[1, 10, 100], [2, 20, 200]]
	 *
	 * _.unzipWith(zipped, _.add);
	 * // => [3, 30, 300]
	 */
	function unzipWith(array, iteratee, thisArg) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  var result = unzip(array);
	  if (iteratee == null) {
	    return result;
	  }
	  iteratee = bindCallback(iteratee, thisArg, 4);
	  return arrayMap(result, function(group) {
	    return arrayReduce(group, iteratee, undefined, true);
	  });
	}
	
	module.exports = unzipWith;


/***/ }),
/* 503 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initFromArray] Specify using the first element of `array`
	 *  as the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initFromArray) {
	  var index = -1,
	      length = array.length;
	
	  if (initFromArray && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}
	
	module.exports = arrayReduce;


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	var baseDifference = __webpack_require__(385),
	    isArrayLike = __webpack_require__(161),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates an array excluding all provided values using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to filter.
	 * @param {...*} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.without([1, 2, 1, 3], 1, 2);
	 * // => [3]
	 */
	var without = restParam(function(array, values) {
	  return isArrayLike(array)
	    ? baseDifference(array, values)
	    : [];
	});
	
	module.exports = without;


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(262),
	    baseDifference = __webpack_require__(385),
	    baseUniq = __webpack_require__(496),
	    isArrayLike = __webpack_require__(161);
	
	/**
	 * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	 * of the provided arrays.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of values.
	 * @example
	 *
	 * _.xor([1, 2], [4, 2]);
	 * // => [1, 4]
	 */
	function xor() {
	  var index = -1,
	      length = arguments.length;
	
	  while (++index < length) {
	    var array = arguments[index];
	    if (isArrayLike(array)) {
	      var result = result
	        ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	        : array;
	    }
	  }
	  return result ? baseUniq(result) : [];
	}
	
	module.exports = xor;


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	var restParam = __webpack_require__(259),
	    unzip = __webpack_require__(500);
	
	/**
	 * Creates an array of grouped elements, the first of which contains the first
	 * elements of the given arrays, the second of which contains the second elements
	 * of the given arrays, and so on.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {...Array} [arrays] The arrays to process.
	 * @returns {Array} Returns the new array of grouped elements.
	 * @example
	 *
	 * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	 * // => [['fred', 30, true], ['barney', 40, false]]
	 */
	var zip = restParam(unzip);
	
	module.exports = zip;


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	var restParam = __webpack_require__(259),
	    unzipWith = __webpack_require__(502);
	
	/**
	 * This method is like `_.zip` except that it accepts an iteratee to specify
	 * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	 * and invoked with four arguments: (accumulator, value, index, group).
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {...Array} [arrays] The arrays to process.
	 * @param {Function} [iteratee] The function to combine grouped values.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new array of grouped elements.
	 * @example
	 *
	 * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	 * // => [111, 222]
	 */
	var zipWith = restParam(function(arrays) {
	  var length = arrays.length,
	      iteratee = length > 2 ? arrays[length - 2] : undefined,
	      thisArg = length > 1 ? arrays[length - 1] : undefined;
	
	  if (length > 2 && typeof iteratee == 'function') {
	    length -= 2;
	  } else {
	    iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	    thisArg = undefined;
	  }
	  arrays.length = length;
	  return unzipWith(arrays, iteratee, thisArg);
	});
	
	module.exports = zipWith;


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _checkbox = __webpack_require__(434);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var _require = __webpack_require__(452),
	    pull = _require.pull;
	
	var SelectCheckbox = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(SelectCheckbox, _Component);
	
	    function SelectCheckbox() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, SelectCheckbox);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            selectedValues: _this.props.value
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    SelectCheckbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {
	        if (newProps) {
	            this.setState({ selectedValues: newProps.value });
	        }
	    };
	
	    /**
	    * Get the value from the select in the DOM.
	    * @return {string} value
	    */
	
	
	    SelectCheckbox.prototype.getValue = function getValue() {
	        return this.state.selectedValues;
	    };
	
	    /**
	     * Handle a change of value.
	     * @param  {[type]} key       the key
	     * @param  {[type]} newStatus the new status
	     */
	
	
	    SelectCheckbox.prototype._handleCheckboxChange = function _handleCheckboxChange(key, newStatus) {
	        if (this.props.onChange) {
	            this.props.onChange(key, newStatus);
	            return;
	        }
	        var selectedValues = this.state.selectedValues;
	        if (newStatus) {
	            selectedValues.push(key);
	        } else {
	            pull(selectedValues, key);
	        }
	        this.setState({ value: selectedValues });
	    };
	
	    /**
	     * Closure to capture key and checbox status.
	     * @param  {[type]} key the key of checkbox
	     * @return {[type]} status closure
	     */
	
	
	    SelectCheckbox.prototype._getCheckboxChangeHandler = function _getCheckboxChangeHandler(key) {
	        var _this2 = this;
	
	        return function (status) {
	            _this2._handleCheckboxChange(key, status);
	        };
	    };
	
	    /**
	     * Render all selection checkbox.
	     * @return {ReactDOMNode} list of ReactDomNode
	     */
	
	
	    SelectCheckbox.prototype.renderCheckboxes = function renderCheckboxes() {
	        var _this3 = this;
	
	        return this.props.values.map(function (val, idx) {
	            var value = val[_this3.props.valueKey];
	            var label = val[_this3.props.labelKey];
	            var isChecked = 0 <= _this3.state.selectedValues.indexOf(value);
	            return _react2.default.createElement(_checkbox2.default, { key: idx, label: _this3.i18n(label), onChange: _this3._getCheckboxChangeHandler(value), value: isChecked });
	        });
	    };
	
	    SelectCheckbox.prototype.render = function render() {
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'select-checkbox' },
	            this.renderCheckboxes()
	        );
	    };
	
	    return SelectCheckbox;
	}(_react.Component)) || _class;
	
	SelectCheckbox.defaultProps = {
	    values: [], // all values
	    value: [], // selected values list
	    valueKey: 'value', // key for the displayed value
	    labelKey: 'label' // key for the displayed label
	};
	SelectCheckbox.propTypes = {
	    values: _react.PropTypes.array,
	    value: _react.PropTypes.array,
	    valueKey: _react.PropTypes.string,
	    labelKey: _react.PropTypes.string,
	    onChange: _react.PropTypes.func
	};
	
	
	SelectCheckbox.displayName = 'SelectCheckbox';
	
	exports.default = SelectCheckbox;
	module.exports = exports['default'];

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _radio = __webpack_require__(510);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _utility = __webpack_require__(406);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var SelectRadio = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(SelectRadio, _Component);
	
	    function SelectRadio() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, SelectRadio);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            uniqueName: (0, _utility.uniqueId)('options_'),
	            value: _this.props.value
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    SelectRadio.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {
	        this.setState({ value: newProps.value });
	    };
	
	    /**
	     * Get the value from the select in the DOM.
	     * @return {string, number} selected value
	     */
	
	
	    SelectRadio.prototype.getValue = function getValue() {
	        return this.state.value;
	    };
	
	    /**
	    * handle click on radio
	    * @param {object} event - the click event
	    */
	
	
	    SelectRadio.prototype._handleRadioChange = function _handleRadioChange(newValue) {
	        var onChange = this.props.onChange;
	
	        if (onChange) {
	            onChange(newValue);
	            return;
	        }
	        //Set the state then call the change handler.
	        this.setState({ value: newValue });
	    };
	
	    /**
	     * Closure to capture key and radio status.
	     * @param  {string} key the key of radio
	     * @return {func} status closure
	     */
	
	
	    SelectRadio.prototype._getRadioChangeHandler = function _getRadioChangeHandler(key) {
	        var _this2 = this;
	
	        return function () {
	            _this2._handleRadioChange(key);
	        };
	    };
	
	    /**
	    * Render radio for each values
	    * @return {XML} the different radio values
	    */
	
	
	    SelectRadio.prototype.renderSelectRadios = function renderSelectRadios() {
	        var _this3 = this;
	
	        var uniqueName = this.state.uniqueName;
	
	        return this.props.values.map(function (val, idx) {
	            var value = val[_this3.props.valueKey];
	            var label = val[_this3.props.labelKey];
	            var disabled = _this3.props.disabled;
	            var isChecked = value === _this3.state.value;
	            return _react2.default.createElement(_radio2.default, { key: idx, label: _this3.i18n(label), name: uniqueName, onChange: _this3._getRadioChangeHandler(value), value: isChecked, disabled: disabled });
	        });
	    };
	
	    SelectRadio.prototype.render = function render() {
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'select-radio' },
	            this.renderSelectRadios()
	        );
	    };
	
	    return SelectRadio;
	}(_react.Component)) || _class;
	
	SelectRadio.defaultProps = {
	    values: [],
	    valueKey: 'code',
	    labelKey: 'label',
	    disabled: false
	};
	SelectRadio.propTypes = {
	    values: _react.PropTypes.array,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string, _react.PropTypes.array]),
	    valueKey: _react.PropTypes.string,
	    labelKey: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    disabled: _react.PropTypes.bool
	};
	
	
	SelectRadio.displayName = 'SelectRadio';
	
	exports.default = SelectRadio;
	module.exports = exports['default'];

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _grid = __webpack_require__(511);
	
	var _grid2 = _interopRequireDefault(_grid);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	var _lang = __webpack_require__(148);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Radio = (_dec = (0, _material2.default)('inputMdl'), (0, _translation2.default)(_class = _dec(_class = (0, _grid2.default)(_class = function (_Component) {
	    _inherits(Radio, _Component);
	
	    function Radio() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, Radio);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            isChecked: (0, _lang.isUndefined)(_this.props.value) ? false : _this.props.value
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    Radio.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {
	        this.setState({ isChecked: newProps.value });
	    };
	
	    Radio.prototype.componentDidUpdate = function componentDidUpdate() {
	        var inputMdl = this.refs.inputMdl;
	        var isChecked = this.state.isChecked;
	
	        if (inputMdl) {
	            var classList = inputMdl.classList;
	
	            if (isChecked === true) classList.add('is-checked');
	            if (isChecked === false) classList.remove('is-checked');
	        }
	    };
	
	    /**
	    * Executed actions on change event.
	    * @param  {event} event
	    */
	
	
	    Radio.prototype._onChange = function _onChange() {
	        var _this2 = this;
	
	        this.setState({ isChecked: !this.state.isChecked }, function () {
	            if (_this2.props.onChange) {
	                _this2.props.onChange(_this2.state.isChecked);
	            }
	        });
	    };
	
	    /**
	    * Get the value from the input in  the DOM.
	    * @returns The DOM node value.
	    */
	
	
	    Radio.prototype.getValue = function getValue() {
	        return this.state.isChecked;
	    };
	
	    /**
	    * Render the Checkbox HTML.
	    * @return {VirtualDOM} - The virtual DOM of the checkbox.
	    */
	
	
	    Radio.prototype.render = function render() {
	        var isChecked = this.state.isChecked;
	
	        var _props = this.props,
	            label = _props.label,
	            name = _props.name,
	            otherProps = _objectWithoutProperties(_props, ['label', 'name']);
	        // we use inputProps to be able to display 'checked' property. it is required to be able to use MDL.
	
	
	        var checkedProps = isChecked ? { checked: 'checked' } : {};
	
	        return _react2.default.createElement(
	            'label',
	            { className: 'mdl-radio mdl-js-radio mdl-js-ripple-effect', 'data-focus': 'input-radio', ref: 'inputMdl' },
	            _react2.default.createElement('input', _extends({ className: 'mdl-radio__button', name: name, onChange: this._onChange.bind(this), type: 'radio' }, checkedProps, otherProps, { ref: 'inputRadio' })),
	            _react2.default.createElement(
	                'span',
	                { className: 'mdl-radio__label' },
	                this.i18n(label)
	            )
	        );
	    };
	
	    return Radio;
	}(_react.Component)) || _class) || _class) || _class);
	Radio.defaultProps = {
	    value: false
	};
	Radio.propTypes = {
	    label: _react.PropTypes.string.isRequired,
	    name: _react.PropTypes.string,
	    value: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func
	};
	
	
	Radio.displayName = 'InputRadio';
	
	exports.default = Radio;
	module.exports = exports['default'];

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var GRID_SIZE = 12,
	    CELL = 'mdl-cell';
	/**
	* An example of the label and content size, and of label and content offset, with function fieldFor
	*
	* I want to have the label on the first row of the grid, the field on the second one,
	* with a 'padding' (offset) of one cell on each row.
	*
	* const fieldOptions = { labelSize: 10, contentSize: 10, labelOffset:1, contentOffset:1 };
	* ...
	* {this.fieldFor('nom', fieldOptions)}
	*
	**/
	
	var Grid = function Grid(Component) {
	    var _class, _temp;
	
	    return _temp = _class = function (_Component) {
	        _inherits(GridComponent, _Component);
	
	        function GridComponent() {
	            _classCallCheck(this, GridComponent);
	
	            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	        }
	
	        GridComponent.prototype._buildGridClassName = function _buildGridClassName(prop, suffix) {
	            return prop ? ' mdl-cell--' + prop + (suffix ? suffix : '') : '';
	        };
	
	        /**
	        * Get the label gridClass.
	        * @returns {string} - The label gridSize.
	        */
	
	
	        GridComponent.prototype._getCellGridClassName = function _getCellGridClassName(position, size, offset) {
	            var cellPosition = this._buildGridClassName(position);
	            var cellSize = this._buildGridClassName(size, '-col');
	            var cellOffset = this._buildGridClassName(offset, '-offset');
	
	            return CELL + cellPosition + cellSize + cellOffset;
	        };
	
	        /**
	        * Get the content class Name.
	        * @returns {string} - The content gridSize.
	        */
	
	
	        GridComponent.prototype._getLabelGridClassName = function _getLabelGridClassName() {
	            return this._getCellGridClassName(this.props.labelCellPosition, this.props.labelSize, this.props.labelOffset);
	        };
	
	        GridComponent.prototype._getContentGridClassName = function _getContentGridClassName() {
	            return this._getCellGridClassName(this.props.contentCellPosition, this.props.contentSize || GRID_SIZE - this.props.labelSize, this.props.contentOffset);
	        };
	
	        /**
	        * Get the content offset className.
	        * @returns {string} - The label gridSize.
	        */
	
	
	        GridComponent.prototype._getContentOffsetClassName = function _getContentOffsetClassName() {
	            return CELL + ' mdl-cell--' + this.props.labelSize + '-offset';
	        };
	
	        return GridComponent;
	    }(Component), _class.defaultProps = {
	        /**
	        * Size of the label in the grid system.
	        * @type {Number}
	        */
	        labelSize: 4,
	        /**
	        * POsition of the label in the cell.
	        * Possible values: top, middle, bottom
	        * @type {String}
	        */
	        labelCellPosition: 'top',
	        /**
	        * Position of the content in the cell.
	        * Possible values: top, middle, bottom
	        * @type {String}
	        */
	        contentCellPosition: 'top'
	    }, _class.propTypes = {
	        contentCellPosition: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
	        labelCellPosition: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
	        labelSize: _react.PropTypes.number,
	        contentSize: _react.PropTypes.number,
	        labelOffset: _react.PropTypes.number,
	        contentOffset: _react.PropTypes.number
	    }, _temp;
	};
	
	exports.default = Grid;
	module.exports = exports['default'];

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _utility = __webpack_require__(406);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    cols: _react.PropTypes.number,
	    error: _react.PropTypes.string,
	    formatter: _react.PropTypes.func,
	    minLength: _react.PropTypes.number,
	    maxLength: _react.PropTypes.number,
	    name: _react.PropTypes.string.isRequired,
	    onChange: _react.PropTypes.func.isRequired,
	    onKeyPress: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    //required: PropTypes.bool,
	    rows: _react.PropTypes.number,
	    type: _react.PropTypes.string,
	    unformatter: _react.PropTypes.func,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
	    wrap: _react.PropTypes.string
	};
	
	var defaultProps = {
	    type: 'text',
	    formatter: _utility.identity,
	    unformatter: _utility.identity,
	    minLength: 0,
	    wrap: 'soft',
	    //required: false,
	    rows: 6,
	    cols: 50
	};
	
	/**
	* Component standing for an HTML input.
	*/
	var InputTextarea = (_dec = (0, _material2.default)('inputTextarea'), _dec(_class = (0, _componentBase2.default)(_class = function (_Component) {
	    _inherits(InputTextarea, _Component);
	
	    function InputTextarea() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, InputTextarea);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getValue = function () {
	            var unformatter = _this.props.unformatter;
	
	            var domEl = _reactDom2.default.findDOMNode(_this.refs.htmlInput);
	            return unformatter(domEl.value);
	        }, _this._handleInputChange = function (evt) {
	            var _this$props = _this.props,
	                unformatter = _this$props.unformatter,
	                onChange = _this$props.onChange;
	            var value = evt.target.value;
	
	            return onChange(unformatter(value));
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    /**
	    * Get the dom value of the component.
	    * @return {object} - The unformated dom value.
	    */
	
	    /**
	    * Handle the change on the input text, it only propagate the value.
	    * @param  {object} evt - The react DOM event.
	    * @return {object} - The function onChannge from the props, called.
	    */
	
	
	    /**
	    * @inheritdoc
	    * @override
	    */
	    InputTextarea.prototype.render = function render() {
	        var _props = this.props,
	            autoFocus = _props.autoFocus,
	            disabled = _props.disabled,
	            formatter = _props.formatter,
	            maxLength = _props.maxLength,
	            onFocus = _props.onFocus,
	            onClick = _props.onClick,
	            onKeyPress = _props.onKeyPress,
	            error = _props.error,
	            name = _props.name,
	            placeholder = _props.placeholder,
	            style = _props.style,
	            rawValue = _props.value,
	            size = _props.size,
	            type = _props.type;
	
	        var value = formatter(rawValue);
	        var pattern = error ? 'hasError' : null; //add pattern to overide mdl error style when displaying an focus error.
	        var inputProps = { autoFocus: autoFocus, disabled: disabled, onKeyPress: onKeyPress, maxLength: maxLength, onFocus: onFocus, onClick: onClick, id: name, onChange: this._handleInputChange, pattern: pattern, size: size, type: type, value: value };
	        var mdlClasses = 'mdl-textfield mdl-js-textfield' + (error ? ' is-invalid' : '');
	        return _react2.default.createElement(
	            'div',
	            { 'data-error': !!error, 'data-focus': 'input-textarea' },
	            _react2.default.createElement(
	                'div',
	                { className: mdlClasses, ref: 'inputTextarea', style: style },
	                _react2.default.createElement('textarea', _extends({ className: 'mdl-textfield__input', ref: 'htmlInput' }, inputProps)),
	                placeholder && _react2.default.createElement(
	                    'label',
	                    { className: 'mdl-textfield__label', htmlFor: name },
	                    this.i18n(placeholder)
	                )
	            ),
	            error && _react2.default.createElement(
	                'div',
	                { className: 'label-error', ref: 'error' },
	                error
	            )
	        );
	    };
	
	    return InputTextarea;
	}(_react.Component)) || _class) || _class);
	
	//Static props.
	
	InputTextarea.displayName = 'InputTextarea';
	InputTextarea.defaultProps = defaultProps;
	InputTextarea.propTypes = propTypes;
	
	exports.default = InputTextarea;
	module.exports = exports['default'];

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DisplayTextArea = function DisplayTextArea(_ref) {
	    var value = _ref.value;
	    return _react2.default.createElement(
	        'div',
	        { 'data-focus': 'display-textarea' },
	        value
	    );
	};
	
	var propTypes = {
	    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
	};
	DisplayTextArea.propTypes = propTypes;
	
	exports.default = DisplayTextArea;
	module.exports = exports['default'];

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    label: _react.PropTypes.string,
	    onChange: _react.PropTypes.func.isRequired,
	    value: _react.PropTypes.bool.isRequired
	};
	
	var defaultProps = {
	    value: false
	};
	
	var displayName = 'InputToggle';
	
	var InputToggle = (_dec = (0, _material2.default)('mdlHolder'), (0, _translation2.default)(_class = _dec(_class = function (_Component) {
	    _inherits(InputToggle, _Component);
	
	    function InputToggle() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, InputToggle);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getValue = function () {
	            var domElement = _reactDom2.default.findDOMNode(_this.refs.toggle);
	            return domElement.checked;
	        }, _this.handleOnChange = function (_ref) {
	            var checked = _ref.target.checked;
	            var onChange = _this.props.onChange;
	
	            onChange(checked);
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    InputToggle.prototype.render = function render() {
	        var _props = this.props,
	            label = _props.label,
	            value = _props.value;
	
	        return _react2.default.createElement(
	            'label',
	            { className: 'mdl-switch mdl-js-switch mdl-js-ripple-effect', 'data-focus': 'input-toggle', ref: 'mdlHolder' },
	            _react2.default.createElement('input', { checked: value, className: 'mdl-switch__input', onChange: this.handleOnChange, ref: 'toggle', type: 'checkbox' }),
	            label && _react2.default.createElement(
	                'span',
	                { className: 'mdl-switch__label' },
	                this.i18n(label)
	            )
	        );
	    };
	
	    return InputToggle;
	}(_react.Component)) || _class) || _class);
	
	
	InputToggle.propTypes = propTypes;
	InputToggle.defaultProps = defaultProps;
	InputToggle.displayName = displayName;
	
	exports.default = InputToggle;
	module.exports = exports['default'];

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _confirm = __webpack_require__(145);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	var _errorCenter = __webpack_require__(516);
	
	var _errorCenter2 = _interopRequireDefault(_errorCenter);
	
	var _headerDefaultTemplate = __webpack_require__(421);
	
	var _headerDefaultTemplate2 = _interopRequireDefault(_headerDefaultTemplate);
	
	var _loadingBar = __webpack_require__(517);
	
	var _loadingBar2 = _interopRequireDefault(_loadingBar);
	
	var _loadingStatusBar = __webpack_require__(523);
	
	var _loadingStatusBar2 = _interopRequireDefault(_loadingStatusBar);
	
	var _messageCenter = __webpack_require__(525);
	
	var _messageCenter2 = _interopRequireDefault(_messageCenter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var ErrorCenterDefault = _errorCenter2.default.component;
	var LoadingBarDefault = _loadingBar2.default.component;
	
	// component default props.
	var defaultProps = {
	    AppHeader: _headerDefaultTemplate2.default, //default app header.
	    ErrorCenter: ErrorCenterDefault, // default error center
	    LoadingBar: LoadingBarDefault, // default loading bar
	    LoadingStatusBar: _loadingStatusBar2.default,
	    MessageCenter: _messageCenter2.default, // default message center
	    ConfirmWrapper: _confirm2.default // default confirm wrapper,
	};
	
	// component props definition.
	var propTypes = {
	    AppHeader: _react.PropTypes.func,
	    ConfirmWrapper: _react.PropTypes.func,
	    ErrorCenter: _react.PropTypes.func,
	    Footer: _react.PropTypes.func,
	    LoadingBar: _react.PropTypes.func,
	    LoadingStatusBar: _react.PropTypes.func,
	    MenuLeft: _react.PropTypes.func,
	    MessageCenter: _react.PropTypes.func
	};
	
	/**
	* Layout component.
	*/
	var Layout = function Layout(_ref) {
	    var AppHeader = _ref.AppHeader,
	        children = _ref.children,
	        ConfirmWrapper = _ref.ConfirmWrapper,
	        ErrorCenter = _ref.ErrorCenter,
	        Footer = _ref.Footer,
	        LoadingBar = _ref.LoadingBar,
	        MenuLeft = _ref.MenuLeft,
	        MessageCenter = _ref.MessageCenter,
	        LoadingStatusBar = _ref.LoadingStatusBar,
	        DevTools = _ref.DevTools,
	        OtherRootComponent = _ref.OtherRootComponent,
	        otherProps = _objectWithoutProperties(_ref, ['AppHeader', 'children', 'ConfirmWrapper', 'ErrorCenter', 'Footer', 'LoadingBar', 'MenuLeft', 'MessageCenter', 'LoadingStatusBar', 'DevTools', 'OtherRootComponent']);
	
	    var menuType = MenuLeft ? 'left' : 'other';
	    return _react2.default.createElement(
	        'div',
	        _extends({ 'data-focus': 'layout', 'data-menu': menuType }, otherProps),
	        _react2.default.createElement(LoadingBar, null),
	        _react2.default.createElement(MessageCenter, null),
	        ErrorCenter && _react2.default.createElement(ErrorCenter, null),
	        _react2.default.createElement(ConfirmWrapper, null),
	        _react2.default.createElement(AppHeader, null),
	        MenuLeft && _react2.default.createElement(MenuLeft, null),
	        _react2.default.createElement(
	            'main',
	            null,
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'page-content' },
	                children
	            )
	        ),
	        Footer && _react2.default.createElement(
	            'footer',
	            { 'data-focus': 'footer' },
	            _react2.default.createElement(Footer, null)
	        ),
	        DevTools && _react2.default.createElement(DevTools, null),
	        OtherRootComponent && _react2.default.createElement(OtherRootComponent, null)
	    );
	};
	
	//Static props.
	Layout.displayName = 'Layout';
	Layout.defaultProps = defaultProps;
	Layout.propTypes = propTypes;
	
	exports.default = Layout;
	module.exports = exports['default'];

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var REACT_NOT_COMPONENT_ERROR = 'Uncaught TypeError: undefined is not a function';
	var REACT_NOT_COMPONENT_MESSAGE = 'Check your console errors, it seems you are trying to create a component from something which is not a component.';
	/**
	 * Error center component.
	 * @example React.render(<ErrorCenter />, document.querySelector('#container'))
	 * @type {Object}
	 */
	var errorCenter = {
	    displayName: 'ErrorCenter',
	    /** @inheriteddoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            source: window,
	            errors: [],
	            isErrorsVisible: false,
	            numberDisplayed: 3
	        };
	    },
	
	    /** @inheriteddoc */
	    getInitialState: function getInitialState() {
	        return { errors: this.props.errors, isErrorsVisible: this.props.isErrorsVisible };
	    },
	
	    /** @inheriteddoc */
	    componentWillMount: function componentWillMount() {
	        var _this = this;
	
	        this.props.source.onerror = function (e) {
	            var errors = _this.state.errors;
	
	            errors.push(e);
	            _this.setState({ errors: errors });
	        };
	    },
	
	    /**
	     * Toggle the visibility of the error component.
	     */
	    _toggleVisible: function _toggleVisible() {
	        this.setState({ isErrorsVisible: !this.state.isErrorsVisible });
	    },
	
	    /**
	     * Render all the errors.
	     * @return {object} - The jsx errors.
	     */
	    _renderErrors: function _renderErrors() {
	        var _this2 = this;
	
	        var _state = this.state,
	            errors = _state.errors,
	            isErrorsVisible = _state.isErrorsVisible;
	        var numberDisplayed = this.props.numberDisplayed;
	
	        var errorLength = errors.length;
	        return React.createElement(
	            'div',
	            { 'data-focus': 'error-center' },
	            React.createElement(
	                'div',
	                { 'data-focus': 'error-counter' },
	                React.createElement(
	                    'i',
	                    { className: 'material-icons', style: { cursor: 'pointer', fontSize: '28px', padding: '15px 5px 5px 5px' } },
	                    'error'
	                ),
	                errorLength
	            ),
	            React.createElement(
	                'div',
	                { 'data-focus': 'error-actions' },
	                React.createElement(
	                    'i',
	                    { className: 'material-icons', style: { cursor: 'pointer', fontSize: '36px', padding: '10px' }, onClick: function onClick() {
	                            window.location.reload();
	                        } },
	                    'refresh'
	                ),
	                React.createElement(
	                    'i',
	                    { className: 'material-icons', style: { cursor: 'pointer', fontSize: '36px', padding: '10px' }, onClick: this._toggleVisible },
	                    'keyboard_arrow_' + (isErrorsVisible ? 'down' : 'up')
	                ),
	                React.createElement(
	                    'i',
	                    { className: 'material-icons', style: { cursor: 'pointer', fontSize: '36px', padding: '10px' }, onClick: function onClick() {
	                            _this2.setState({ errors: [] });
	                        } },
	                    'delete'
	                )
	            ),
	            React.createElement(
	                'ul',
	                { 'data-focus': 'error-stack' },
	                isErrorsVisible ? errors.slice(errorLength - numberDisplayed, errorLength).map(function (err) {
	                    var e = REACT_NOT_COMPONENT_ERROR === err ? REACT_NOT_COMPONENT_MESSAGE : err;return React.createElement(
	                        'li',
	                        null,
	                        e
	                    );
	                }) : null
	            )
	        );
	    },
	
	    /** @inheriteddoc */
	    render: function render() {
	        return 0 < this.state.errors.length ? this._renderErrors() : null;
	    }
	};
	
	module.exports = (0, _builder2.default)(errorCenter);

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _network = __webpack_require__(518);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var assign = __webpack_require__(519);
	var ProgressBar = __webpack_require__(520).component;
	var Icon = __webpack_require__(522).component;
	var LoadingBarMixin = {
	    /** @inheriteddoc */
	    getInitialState: function getInitialState() {
	        return this._getStateFromStore();
	    },
	
	    /** @inheriteddoc */
	    componentWillMount: function componentWillMount() {
	        _network.builtInStore.addUpdateRequestListener(this._handleRequestsUpdate);
	        _network.builtInStore.addClearRequestsListener(this._handleClearRequests);
	    },
	
	    /** @inheriteddoc */
	    componentWillUnmount: function cartridgeWillUnMount() {
	        _network.builtInStore.removeUpdateRequestListener(this._handleRequestsUpdate);
	        _network.builtInStore.removeClearRequestsListener(this._handleClearRequests);
	    },
	    _getStateFromStore: function getCartridgeStateFromStore() {
	        return _network.builtInStore.getRequests();
	    },
	    _handleRequestsUpdate: function _handlePushMessage(messageId) {
	        this.setState(this._getStateFromStore());
	    },
	    _handleClearRequests: function _handleClearRequests() {
	        this.setState({ requests: {} });
	    },
	
	    /** @inheriteddoc */
	    render: function renderProgressBar() {
	        var completed = +((this.state.total - this.state.pending) / this.state.total) * 100;
	        var visible = false;
	        var displayDevBar = this.props.displayDevBar;
	
	        if (completed < 100) {
	            visible = true;
	        }
	        //Else empty the loading list?
	        return React.createElement(
	            'div',
	            { 'data-focus': 'loading-bar' },
	            visible && React.createElement(ProgressBar, { completed: completed }),
	            displayDevBar && React.createElement(
	                'ul',
	                { className: 'fa-ul' },
	                React.createElement(
	                    'li',
	                    null,
	                    React.createElement(Icon, { name: 'swap_vert' }),
	                    ' pending ',
	                    this.state.pending
	                ),
	                React.createElement(
	                    'li',
	                    null,
	                    React.createElement(Icon, { name: 'not_interested' }),
	                    ' cancelled ',
	                    this.state.cancelled
	                ),
	                React.createElement(
	                    'li',
	                    null,
	                    React.createElement(Icon, { name: 'check_circle' }),
	                    ' success ',
	                    this.state.success
	                ),
	                React.createElement(
	                    'li',
	                    null,
	                    React.createElement(Icon, { name: 'error' }),
	                    ' error ',
	                    this.state.error
	                ),
	                React.createElement(
	                    'li',
	                    null,
	                    React.createElement(Icon, { name: 'functions' }),
	                    ' total ',
	                    this.state.total
	                )
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(LoadingBarMixin);

/***/ }),
/* 518 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_518__;

/***/ }),
/* 519 */
/***/ (function(module, exports) {

	'use strict';
	
	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);
	
		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));
	
			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}
	
		return to;
	};


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	
	// Mixins
	
	var mdlBehaviour = __webpack_require__(521);
	
	var Progress = {
	    mixins: [mdlBehaviour],
	    /**
	     * Get default props
	     * @return {Object} the default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            completed: 0
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var bar = ReactDOM.findDOMNode(this.refs.bar);
	        if (bar) {
	            bar.MaterialProgress.setProgress(0);
	            bar.MaterialProgress.setBuffer(100);
	        }
	    },
	
	    /**
	     * Component will receive props
	     * @param  {Object} completed new completed prop
	     */
	    componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	        var completed = _ref.completed;
	
	        if (0 > completed) {
	            completed = 0;
	        }
	        if (100 < completed) {
	            completed = 100;
	        }
	        var bar = ReactDOM.findDOMNode(this.refs.bar);
	        if (bar) {
	            bar.MaterialProgress.setProgress(completed);
	            bar.MaterialProgress.setBuffer(100);
	        }
	    },
	
	    /**
	     * Render the component
	     * @return {Function} the rendered component
	     */
	    render: function render() {
	        var completed = +this.props.completed;
	        if (0 > completed) {
	            completed = 0;
	        }
	        if (100 < completed) {
	            completed = 100;
	        }
	        return React.createElement('div', { className: 'mdl-progress mdl-js-progress', 'data-focus': 'progress-bar', ref: 'bar' });
	    }
	};
	
	module.exports = (0, _builder2.default)(Progress);

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	//https://github.com/google/material-design-lite/blob/master/src/mdlComponentHandler.js#L333
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	
	var mdlBehaviourMixin = {
	
	    /**
	    * Called when component is mounted.
	    */
	    componentDidMount: function componentDidMount() {
	        if (ReactDOM.findDOMNode(this)) {
	            componentHandler.upgradeElement(ReactDOM.findDOMNode(this));
	        }
	    },
	
	
	    /**
	    * Called before component is unmounted.
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        if (ReactDOM.findDOMNode(this)) {
	            componentHandler.downgradeElements(ReactDOM.findDOMNode(this));
	        }
	    }
	};
	
	module.exports = mdlBehaviourMixin;

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var PropTypes = React.PropTypes;
	
	
	var iconMixin = {
	    displayName: 'Icon',
	    getDefaultProps: function getDefaultProps() {
	        return {
	            name: '',
	            library: 'material'
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Icon\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Icon');
	    },
	
	    propTypes: {
	        handleOnClick: PropTypes.func,
	        library: PropTypes.oneOf(['material', 'font-awesome', 'font-custom']),
	        name: PropTypes.string
	    },
	    /**
	    * Render the img.
	    * @returns {XML} Html code.
	    */
	    render: function renderIcon() {
	        var _props = this.props,
	            name = _props.name,
	            library = _props.library,
	            onClick = _props.onClick,
	            style = _props.style;
	
	        switch (library) {
	            case 'material':
	                return React.createElement(
	                    'i',
	                    _extends({ className: 'material-icons', onClick: onClick }, style),
	                    name
	                );
	            case 'font-awesome':
	                var faCss = 'fa fa-' + name;
	                return React.createElement('i', _extends({ className: faCss, onClick: onClick }, style));
	            case 'font-custom':
	                return React.createElement('span', { className: 'icon-' + name });
	            default:
	                return null;
	        }
	    }
	};
	
	module.exports = (0, _builder2.default)(iconMixin);

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _network = __webpack_require__(518);
	
	var _loadingStatus = __webpack_require__(524);
	
	var _loadingStatus2 = _interopRequireDefault(_loadingStatus);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var LoadingStatusWrapper = function (_Component) {
	    _inherits(LoadingStatusWrapper, _Component);
	
	    function LoadingStatusWrapper(props) {
	        _classCallCheck(this, LoadingStatusWrapper);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this.state = {
	            total: 0,
	            pending: 0
	        };
	
	        return _this;
	    }
	
	    LoadingStatusWrapper.prototype.componentWillMount = function componentWillMount() {
	        _network.builtInStore.addUpdateRequestListener(this._handleRequestsUpdate.bind(this));
	        _network.builtInStore.addClearRequestsListener(this._handleClearRequests.bind(this));
	    };
	
	    LoadingStatusWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
	        _network.builtInStore.removeUpdateRequestListener(this._handleRequestsUpdate);
	        _network.builtInStore.removeClearRequestsListener(this._handleClearRequests);
	    };
	
	    LoadingStatusWrapper.prototype._handleRequestsUpdate = function _handleRequestsUpdate() {
	        this.setState(_network.builtInStore.getRequests());
	    };
	
	    LoadingStatusWrapper.prototype._handleClearRequests = function _handleClearRequests() {
	        this.setState({ requests: {} });
	    };
	
	    LoadingStatusWrapper.prototype.render = function render() {
	        var _state = this.state,
	            total = _state.total,
	            pending = _state.pending;
	
	        var isLoading = +((total - pending) / total) * 100 < 100;
	        return isLoading ? _react2.default.createElement(_loadingStatus2.default, null) : null;
	    };
	
	    return LoadingStatusWrapper;
	}(_react.Component);
	
	exports.default = LoadingStatusWrapper;
	module.exports = exports['default'];

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dec, _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var LoadingStatus = (_dec = (0, _material2.default)('spinner'), _dec(_class = function (_Component) {
	    _inherits(LoadingStatus, _Component);
	
	    function LoadingStatus() {
	        _classCallCheck(this, LoadingStatus);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    LoadingStatus.prototype.render = function render() {
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'loading-status' },
	            _react2.default.createElement('div', { ref: 'spinner', className: 'mdl-spinner mdl-js-spinner is-active' }),
	            _react2.default.createElement(
	                'div',
	                { className: 'content' },
	                'Loading'
	            )
	        );
	    };
	
	    return LoadingStatus;
	}(_react.Component)) || _class);
	exports.default = LoadingStatus;
	module.exports = exports['default'];

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _capitalize = __webpack_require__(304);
	
	var _capitalize2 = _interopRequireDefault(_capitalize);
	
	var _builtInStore = __webpack_require__(526);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var defaultProps = {
	    ttlError: 8000,
	    ttlInfo: 3000,
	    ttlSuccess: 3000,
	    ttlWarning: 3000
	};
	
	var propTypes = {
	    ttlError: _react.PropTypes.number.isRequired,
	    ttlInfo: _react.PropTypes.number.isRequired,
	    ttlSuccess: _react.PropTypes.number.isRequired,
	    ttlWarning: _react.PropTypes.number.isRequired
	};
	
	var CONSTANT = {
	    ANIMATION_LENGTH: 250
	};
	
	var MessageCenter = function (_Component) {
	    _inherits(MessageCenter, _Component);
	
	    function MessageCenter(props) {
	        _classCallCheck(this, MessageCenter);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this.cleanupTimeout = null;
	        _this.currentNotification = null;
	        _this.queuedNotifications = [];
	
	        _this._checkQueue = function () {
	            if (_this.queuedNotifications.length > 0) {
	                _this.showSnackbar(_this.queuedNotifications.shift());
	            }
	        };
	
	        _this._forceCleanup = function () {
	            clearTimeout(_this.cleanupTimeout);
	            _this._cleanup();
	        };
	
	        _this._cleanup = function () {
	            _this.cleanupTimeout = null;
	            _this.setState({ active: false });
	            setTimeout(function () {
	                _this._checkQueue();
	            }, CONSTANT.ANIMATION_LENGTH);
	        };
	
	        _this._handlePushMessage = function (messageId) {
	            var message = _builtInStore2.default.getMessage(messageId);
	            var content = message.content,
	                action = message.action,
	                type = message.type;
	
	            var ttl = _this.props['ttl' + (0, _capitalize2.default)(type)];
	            var notificationData = {
	                type: type,
	                message: content,
	                timeout: ttl
	            };
	            if (action) {
	                notificationData['actionText'] = action.text;
	                notificationData['actionHandler'] = action.handler;
	            }
	            _this.showSnackbar(notificationData);
	        };
	
	        _this.showSnackbar = function (data) {
	            if (data === undefined) {
	                throw new Error('Please provide a data object with at least a message to display.');
	            }
	            if (data['message'] === undefined) {
	                throw new Error('Please provide a message to be displayed.');
	            }
	            if (data['actionHandler'] && !data['actionText']) {
	                throw new Error('Please provide action text with the handler.');
	            }
	            var active = _this.state.active;
	
	            if (active) {
	                _this.queuedNotifications.push(data);
	            } else {
	                _this.currentNotification = data;
	                _this.setState({ active: true });
	                _this.cleanupTimeout = setTimeout(_this._cleanup, data.timeout);
	            }
	        };
	
	        _this.state = { active: false };
	        return _this;
	    }
	
	    /** @inheriteddoc */
	    MessageCenter.prototype.componentWillMount = function componentWillMount() {
	        _builtInStore2.default.addPushedMessageListener(this._handlePushMessage);
	    };
	
	    /** @inheriteddoc */
	    MessageCenter.prototype.componentWillUnmount = function componentWillUnmount() {
	        _builtInStore2.default.removePushedMessageListener(this._handlePushMessage);
	    };
	
	    /**
	    * Check if the queue has items within it.
	    * If it does, display the next entry.
	    *
	    * @private
	    */
	
	
	    /**
	    * Remove cleanupTimeout
	    * @return {[type]} [description]
	    */
	
	
	    /**
	    * Cleanup the snackbar event listeners and accessiblity attributes.
	    *
	    * @private
	    */
	
	
	    /**
	    * Push a new message into snackbar.
	    * @type {number} message id.
	    */
	
	
	    /** @inheritDoc */
	    MessageCenter.prototype.render = function render() {
	        var active = this.state.active;
	
	        var notification = this.currentNotification || {};
	        var actionText = notification.actionText,
	            actionHandler = notification.actionHandler,
	            message = notification.message,
	            type = notification.type;
	
	        var classNames = 'mdl-snackbar ' + (active ? 'mdl-snackbar--active' : '');
	        var otherProps = { 'aria-hidden': active, 'aria-live': 'assertive', 'aria-atomic': 'true', 'aria-relevant': 'text' };
	        return _react2.default.createElement(
	            'div',
	            _extends({ 'data-focus': 'snackbar-message-center', 'data-message-type': type, className: classNames }, otherProps),
	            _react2.default.createElement(
	                'div',
	                { className: 'mdl-snackbar__text' },
	                (0, _translation.translate)(message)
	            ),
	            actionText && _react2.default.createElement(
	                'button',
	                { className: 'mdl-snackbar__action', type: 'button', onClick: actionHandler },
	                (0, _translation.translate)(actionText)
	            ),
	            _react2.default.createElement(
	                'button',
	                { className: 'mdl-snackbar__close', type: 'button', onClick: this._forceCleanup },
	                _react2.default.createElement(
	                    'i',
	                    { className: 'material-icons' },
	                    'clear'
	                )
	            )
	        );
	    };
	
	    /**
	    * Show the snackbar.
	    *
	    * @param {Object} data The data for the notification.
	    * @public
	    */
	
	
	    return MessageCenter;
	}(_react.Component);
	
	;
	
	//Static props.
	MessageCenter.displayName = 'MessageCenter';
	MessageCenter.defaultProps = defaultProps;
	MessageCenter.propTypes = propTypes;
	
	exports.default = MessageCenter;
	module.exports = exports['default'];

/***/ }),
/* 526 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_526__;

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _history = __webpack_require__(143);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function MenuItems(props) {
	    var items = props.items,
	        LinkComponent = props.LinkComponent,
	        navigate = props.navigate;
	
	    return _react2.default.createElement(
	        'div',
	        null,
	        _renderItemsList(items, LinkComponent, navigate)
	    );
	}
	MenuItems.propTypes = {
	    items: _react.PropTypes.array
	};
	
	function _renderItemsList(items, LinkComponent, navigate) {
	    return items.map(function (link, idx) {
	        return _react2.default.createElement(
	            'li',
	            { key: idx },
	            _renderButton(link, LinkComponent, navigate),
	            _react2.default.createElement(
	                'span',
	                null,
	                link.name
	            )
	        );
	    });
	}
	
	//Todo: refactor into component
	function _renderButton(menuButton, LinkComponent, navigate) {
	    menuButton.shape = 'icon';
	    menuButton.type = 'button';
	
	    var buttonProps = {
	        shape: 'icon',
	        type: 'button'
	    };
	
	    var route = menuButton.route,
	        option = menuButton.option,
	        otherProps = _objectWithoutProperties(menuButton, ['route', 'option']);
	
	    var menuButtonProps = _extends({}, buttonProps, otherProps);
	    var clickHandler = void 0;
	
	    if (menuButton.route !== undefined) {
	        //React router case
	        if (LinkComponent) {
	            //Todo: check menButton onClick use
	            return _react2.default.createElement(
	                LinkComponent,
	                { to: menuButton.route, style: { color: 'white' } },
	                _react2.default.createElement(_button2.default, menuButtonProps)
	            );
	        }
	        //Backbone case
	        clickHandler = function clickHandler() {
	            if (menuButton.onClick) menuButton.onClick();
	            navigate(menuButton.route, true);
	        };
	        return _react2.default.createElement(_button2.default, _extends({}, menuButtonProps, { onClick: clickHandler }));
	    }
	    //No route => Both the same treatement.
	    return _react2.default.createElement(_button2.default, _extends({}, menuButtonProps, { onClick: menuButton.onClick }));
	}
	
	// default props
	var defaultProps = {
	    items: [],
	    LinkComponent: undefined,
	    MenuItems: MenuItems,
	    navigate: _history.navigate
	};
	
	// props types
	var propTypes = {
	    navigate: _react.PropTypes.func,
	    items: _react.PropTypes.array,
	    handleBrandClick: _react.PropTypes.func,
	    LinkComponent: _react.PropTypes.func,
	    MenuItems: _react.PropTypes.func
	};
	
	function MenuLeft(props) {
	    var direction = props.direction,
	        handleBrandClick = props.handleBrandClick,
	        position = props.position,
	        children = props.children,
	        items = props.items,
	        LinkComponent = props.LinkComponent,
	        navigate = props.navigate,
	        MenuItems = props.MenuItems,
	        otherProps = _objectWithoutProperties(props, ['direction', 'handleBrandClick', 'position', 'children', 'items', 'LinkComponent', 'navigate', 'MenuItems']);
	
	    var itemRenderProps = { LinkComponent: LinkComponent, navigate: navigate };
	    var hasBrandClickHandler = !!handleBrandClick;
	
	    return _react2.default.createElement(
	        'nav',
	        _extends({ 'data-focus': 'menu-left' }, otherProps),
	        _react2.default.createElement('div', { 'data-focus': 'menu-brand', 'data-click': hasBrandClickHandler, onClick: function onClick() {
	                return handleBrandClick && handleBrandClick();
	            } }),
	        _react2.default.createElement(
	            'ul',
	            { 'data-focus': 'menu-items' },
	            _react2.default.createElement(MenuItems, _extends({ items: items }, itemRenderProps))
	        ),
	        children
	    );
	}
	
	// Static props.
	MenuLeft.defaultProps = defaultProps;
	MenuLeft.propTypes = propTypes;
	
	exports.default = MenuLeft;
	module.exports = exports['default'];

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _collection = __webpack_require__(529);
	
	var _utility = __webpack_require__(406);
	
	var _string = __webpack_require__(297);
	
	var _buttonHelp = __webpack_require__(597);
	
	var _buttonHelp2 = _interopRequireDefault(_buttonHelp);
	
	var _xor = __webpack_require__(505);
	
	var _xor2 = _interopRequireDefault(_xor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var defaultProps = {
	    actionsPosition: 'top'
	};
	
	var propTypes = {
	    actions: _react.PropTypes.func,
	    actionsPosition: _react.PropTypes.oneOf(['both', 'bottom', 'top']).isRequired,
	    title: _react.PropTypes.string,
	    showHelp: _react.PropTypes.bool,
	    blockName: _react.PropTypes.string
	};
	
	/**
	* Panel.
	*/
	
	var Panel = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(Panel, _Component);
	
	    function Panel(props) {
	        _classCallCheck(this, Panel);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        var state = {
	            spyId: (0, _utility.uniqueId)('panel_')
	        };
	        _this.state = state;
	        return _this;
	    }
	
	    /**
	    * Render the a block container and the cild content of the block.
	    * @return {DOM} React DOM element
	    */
	
	
	    Panel.prototype.render = function render() {
	        var _props = this.props,
	            actions = _props.actions,
	            actionsPosition = _props.actionsPosition,
	            children = _props.children,
	            title = _props.title,
	            showHelp = _props.showHelp,
	            blockName = _props.blockName,
	            modalTitleId = _props.modalTitleId,
	            otherProps = _objectWithoutProperties(_props, ['actions', 'actionsPosition', 'children', 'title', 'showHelp', 'blockName', 'modalTitleId']);
	
	        var spyId = this.state.spyId;
	
	        var shouldDisplayActionsTop = actions && (0, _collection.includes)(['both', 'top'], actionsPosition);
	        var shouldDisplayActionsBottom = actions && (0, _collection.includes)(['both', 'bottom'], actionsPosition);
	        var optionnalModalProps = {};
	        if (modalTitleId) {
	            optionnalModalProps['id'] = modalTitleId;
	        }
	        return _react2.default.createElement(
	            'div',
	            _extends({ className: 'mdl-card mdl-card--border mdl-shadow--4dp', 'data-spy': spyId, 'data-focus': 'panel' }, otherProps),
	            _react2.default.createElement(
	                'div',
	                { className: 'mdl-card__title mdl-card--border', 'data-focus': 'panel-title' },
	                title && _react2.default.createElement(
	                    'h3',
	                    _extends({ 'data-spy-title': true }, optionnalModalProps),
	                    this.i18n(title)
	                ),
	                shouldDisplayActionsTop && _react2.default.createElement(
	                    'div',
	                    { className: 'actions' },
	                    actions()
	                ),
	                showHelp && _react2.default.createElement(_buttonHelp2.default, { blockName: blockName || (0, _string.snakeCase)(this.i18n(title)).split('_')[0] })
	            ),
	            _react2.default.createElement(
	                'div',
	                { className: 'mdl-card__supporting-text', 'data-focus': 'panel-content' },
	                children
	            ),
	            shouldDisplayActionsBottom && _react2.default.createElement(
	                'div',
	                { className: 'mdl-card__actions mdl-card--border', 'data-focus': 'panel-actions' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'actions' },
	                    actions()
	                )
	            )
	        );
	    };
	
	    return Panel;
	}(_react.Component)) || _class;
	
	//Static props.
	
	
	Panel.displayName = 'Panel';
	Panel.defaultProps = defaultProps;
	Panel.propTypes = propTypes;
	
	exports.default = Panel;
	module.exports = exports['default'];

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'all': __webpack_require__(530),
	  'any': __webpack_require__(535),
	  'at': __webpack_require__(538),
	  'collect': __webpack_require__(539),
	  'contains': __webpack_require__(542),
	  'countBy': __webpack_require__(544),
	  'detect': __webpack_require__(546),
	  'each': __webpack_require__(549),
	  'eachRight': __webpack_require__(552),
	  'every': __webpack_require__(531),
	  'filter': __webpack_require__(556),
	  'find': __webpack_require__(547),
	  'findLast': __webpack_require__(558),
	  'findWhere': __webpack_require__(559),
	  'foldl': __webpack_require__(560),
	  'foldr': __webpack_require__(564),
	  'forEach': __webpack_require__(550),
	  'forEachRight': __webpack_require__(553),
	  'groupBy': __webpack_require__(567),
	  'include': __webpack_require__(568),
	  'includes': __webpack_require__(543),
	  'indexBy': __webpack_require__(569),
	  'inject': __webpack_require__(570),
	  'invoke': __webpack_require__(571),
	  'map': __webpack_require__(540),
	  'max': __webpack_require__(572),
	  'min': __webpack_require__(577),
	  'partition': __webpack_require__(578),
	  'pluck': __webpack_require__(579),
	  'reduce': __webpack_require__(561),
	  'reduceRight': __webpack_require__(565),
	  'reject': __webpack_require__(580),
	  'sample': __webpack_require__(581),
	  'select': __webpack_require__(583),
	  'shuffle': __webpack_require__(584),
	  'size': __webpack_require__(585),
	  'some': __webpack_require__(536),
	  'sortBy': __webpack_require__(586),
	  'sortByAll': __webpack_require__(589),
	  'sortByOrder': __webpack_require__(592),
	  'sum': __webpack_require__(593),
	  'where': __webpack_require__(596)
	};


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(531);


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEvery = __webpack_require__(282),
	    baseCallback = __webpack_require__(356),
	    baseEvery = __webpack_require__(532),
	    isArray = __webpack_require__(167),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Checks if `predicate` returns truthy for **all** elements of `collection`.
	 * The predicate is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias all
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.every([true, 1, null, 'yes'], Boolean);
	 * // => false
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': false },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.every(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.every(users, 'active', false);
	 * // => true
	 *
	 * // using the `_.property` callback shorthand
	 * _.every(users, 'active');
	 * // => false
	 */
	function every(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arrayEvery : baseEvery;
	  if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	    predicate = undefined;
	  }
	  if (typeof predicate != 'function' || thisArg !== undefined) {
	    predicate = baseCallback(predicate, thisArg, 3);
	  }
	  return func(collection, predicate);
	}
	
	module.exports = every;


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533);
	
	/**
	 * The base implementation of `_.every` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`
	 */
	function baseEvery(collection, predicate) {
	  var result = true;
	  baseEach(collection, function(value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}
	
	module.exports = baseEvery;


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(170),
	    createBaseEach = __webpack_require__(534);
	
	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);
	
	module.exports = baseEach;


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(162),
	    isLength = __webpack_require__(164),
	    toObject = __webpack_require__(173);
	
	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}
	
	module.exports = createBaseEach;


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(536);


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(187),
	    baseCallback = __webpack_require__(356),
	    baseSome = __webpack_require__(537),
	    isArray = __webpack_require__(167),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * The function returns as soon as it finds a passing value and does not iterate
	 * over the entire collection. The predicate is bound to `thisArg` and invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias any
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.some(users, 'active', false);
	 * // => true
	 *
	 * // using the `_.property` callback shorthand
	 * _.some(users, 'active');
	 * // => true
	 */
	function some(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arraySome : baseSome;
	  if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	    predicate = undefined;
	  }
	  if (typeof predicate != 'function' || thisArg !== undefined) {
	    predicate = baseCallback(predicate, thisArg, 3);
	  }
	  return func(collection, predicate);
	}
	
	module.exports = some;


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533);
	
	/**
	 * The base implementation of `_.some` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function baseSome(collection, predicate) {
	  var result;
	
	  baseEach(collection, function(value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}
	
	module.exports = baseSome;


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAt = __webpack_require__(481),
	    baseFlatten = __webpack_require__(261),
	    restParam = __webpack_require__(259);
	
	/**
	 * Creates an array of elements corresponding to the given keys, or indexes,
	 * of `collection`. Keys may be specified as individual arguments or as arrays
	 * of keys.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {...(number|number[]|string|string[])} [props] The property names
	 *  or indexes of elements to pick, specified individually or in arrays.
	 * @returns {Array} Returns the new array of picked elements.
	 * @example
	 *
	 * _.at(['a', 'b', 'c'], [0, 2]);
	 * // => ['a', 'c']
	 *
	 * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	 * // => ['barney', 'pebbles']
	 */
	var at = restParam(function(collection, props) {
	  return baseAt(collection, baseFlatten(props));
	});
	
	module.exports = at;


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(540);


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(384),
	    baseCallback = __webpack_require__(356),
	    baseMap = __webpack_require__(541),
	    isArray = __webpack_require__(167);
	
	/**
	 * Creates an array of values by running each element in `collection` through
	 * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	 * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	 * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	 * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	 * `sum`, `uniq`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @alias collect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function timesThree(n) {
	 *   return n * 3;
	 * }
	 *
	 * _.map([1, 2], timesThree);
	 * // => [3, 6]
	 *
	 * _.map({ 'a': 1, 'b': 2 }, timesThree);
	 * // => [3, 6] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee, thisArg) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  iteratee = baseCallback(iteratee, thisArg, 3);
	  return func(collection, iteratee);
	}
	
	module.exports = map;


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533),
	    isArrayLike = __webpack_require__(161);
	
	/**
	 * The base implementation of `_.map` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];
	
	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}
	
	module.exports = baseMap;


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(543);


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(386),
	    getLength = __webpack_require__(162),
	    isArray = __webpack_require__(167),
	    isIterateeCall = __webpack_require__(180),
	    isLength = __webpack_require__(164),
	    isString = __webpack_require__(199),
	    values = __webpack_require__(215);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Checks if `target` is in `collection` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	 * from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @alias contains, include
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {*} target The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	 * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	 * // => true
	 *
	 * _.includes('pebbles', 'eb');
	 * // => true
	 */
	function includes(collection, target, fromIndex, guard) {
	  var length = collection ? getLength(collection) : 0;
	  if (!isLength(length)) {
	    collection = values(collection);
	    length = collection.length;
	  }
	  if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	    fromIndex = 0;
	  } else {
	    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	  }
	  return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	    ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	    : (!!length && baseIndexOf(collection, target, fromIndex) > -1);
	}
	
	module.exports = includes;


/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

	var createAggregator = __webpack_require__(545);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` through `iteratee`. The corresponding value
	 * of each key is the number of times the key was returned by `iteratee`.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * _.countBy([4.3, 6.1, 6.4], function(n) {
	 *   return Math.floor(n);
	 * });
	 * // => { '4': 1, '6': 2 }
	 *
	 * _.countBy([4.3, 6.1, 6.4], function(n) {
	 *   return this.floor(n);
	 * }, Math);
	 * // => { '4': 1, '6': 2 }
	 *
	 * _.countBy(['one', 'two', 'three'], 'length');
	 * // => { '3': 2, '5': 1 }
	 */
	var countBy = createAggregator(function(result, value, key) {
	  hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	});
	
	module.exports = countBy;


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseEach = __webpack_require__(533),
	    isArray = __webpack_require__(167);
	
	/**
	 * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	 *
	 * @private
	 * @param {Function} setter The function to set keys and values of the accumulator object.
	 * @param {Function} [initializer] The function to initialize the accumulator object.
	 * @returns {Function} Returns the new aggregator function.
	 */
	function createAggregator(setter, initializer) {
	  return function(collection, iteratee, thisArg) {
	    var result = initializer ? initializer() : {};
	    iteratee = baseCallback(iteratee, thisArg, 3);
	
	    if (isArray(collection)) {
	      var index = -1,
	          length = collection.length;
	
	      while (++index < length) {
	        var value = collection[index];
	        setter(result, value, iteratee(value, index, collection), collection);
	      }
	    } else {
	      baseEach(collection, function(value, key, collection) {
	        setter(result, value, iteratee(value, key, collection), collection);
	      });
	    }
	    return result;
	  };
	}
	
	module.exports = createAggregator;


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(547);


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533),
	    createFind = __webpack_require__(548);
	
	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias detect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.result(_.find(users, function(chr) {
	 *   return chr.age < 40;
	 * }), 'user');
	 * // => 'barney'
	 *
	 * // using the `_.matches` callback shorthand
	 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	 * // => 'pebbles'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.result(_.find(users, 'active', false), 'user');
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.result(_.find(users, 'active'), 'user');
	 * // => 'barney'
	 */
	var find = createFind(baseEach);
	
	module.exports = find;


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseFind = __webpack_require__(366),
	    baseFindIndex = __webpack_require__(465),
	    isArray = __webpack_require__(167);
	
	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(eachFunc, fromRight) {
	  return function(collection, predicate, thisArg) {
	    predicate = baseCallback(predicate, thisArg, 3);
	    if (isArray(collection)) {
	      var index = baseFindIndex(collection, predicate, fromRight);
	      return index > -1 ? collection[index] : undefined;
	    }
	    return baseFind(collection, predicate, eachFunc);
	  };
	}
	
	module.exports = createFind;


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(550);


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(152),
	    baseEach = __webpack_require__(533),
	    createForEach = __webpack_require__(551);
	
	/**
	 * Iterates over elements of `collection` invoking `iteratee` for each element.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection). Iteratee functions may exit iteration early
	 * by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length" property
	 * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	 * may be used for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @alias each
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array|Object|string} Returns `collection`.
	 * @example
	 *
	 * _([1, 2]).forEach(function(n) {
	 *   console.log(n);
	 * }).value();
	 * // => logs each value from left to right and returns the array
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	 *   console.log(n, key);
	 * });
	 * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	 */
	var forEach = createForEach(arrayEach, baseEach);
	
	module.exports = forEach;


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

	var bindCallback = __webpack_require__(178),
	    isArray = __webpack_require__(167);
	
	/**
	 * Creates a function for `_.forEach` or `_.forEachRight`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over an array.
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @returns {Function} Returns the new each function.
	 */
	function createForEach(arrayFunc, eachFunc) {
	  return function(collection, iteratee, thisArg) {
	    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	      ? arrayFunc(collection, iteratee)
	      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	  };
	}
	
	module.exports = createForEach;


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(553);


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEachRight = __webpack_require__(554),
	    baseEachRight = __webpack_require__(555),
	    createForEach = __webpack_require__(551);
	
	/**
	 * This method is like `_.forEach` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @alias eachRight
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array|Object|string} Returns `collection`.
	 * @example
	 *
	 * _([1, 2]).forEachRight(function(n) {
	 *   console.log(n);
	 * }).value();
	 * // => logs each value from right to left and returns the array
	 */
	var forEachRight = createForEach(arrayEachRight, baseEachRight);
	
	module.exports = forEachRight;


/***/ }),
/* 554 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.forEachRight` for arrays without support for
	 * callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEachRight(array, iteratee) {
	  var length = array.length;
	
	  while (length--) {
	    if (iteratee(array[length], length, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	
	module.exports = arrayEachRight;


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwnRight = __webpack_require__(368),
	    createBaseEach = __webpack_require__(534);
	
	/**
	 * The base implementation of `_.forEachRight` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	module.exports = baseEachRight;


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(501),
	    baseCallback = __webpack_require__(356),
	    baseFilter = __webpack_require__(557),
	    isArray = __webpack_require__(167);
	
	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias select
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the new filtered array.
	 * @example
	 *
	 * _.filter([4, 5, 6], function(n) {
	 *   return n % 2 == 0;
	 * });
	 * // => [4, 6]
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	 * // => ['barney']
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.pluck(_.filter(users, 'active', false), 'user');
	 * // => ['fred']
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.filter(users, 'active'), 'user');
	 * // => ['barney']
	 */
	function filter(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  predicate = baseCallback(predicate, thisArg, 3);
	  return func(collection, predicate);
	}
	
	module.exports = filter;


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533);
	
	/**
	 * The base implementation of `_.filter` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  baseEach(collection, function(value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}
	
	module.exports = baseFilter;


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEachRight = __webpack_require__(555),
	    createFind = __webpack_require__(548);
	
	/**
	 * This method is like `_.find` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * _.findLast([1, 2, 3, 4], function(n) {
	 *   return n % 2 == 1;
	 * });
	 * // => 3
	 */
	var findLast = createFind(baseEachRight, true);
	
	module.exports = findLast;


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(357),
	    find = __webpack_require__(547);
	
	/**
	 * Performs a deep comparison between each element in `collection` and the
	 * source object, returning the first element that has equivalent property
	 * values.
	 *
	 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	 * numbers, `Object` objects, regexes, and strings. Objects are compared by
	 * their own, not inherited, enumerable properties. For comparing a single
	 * own or inherited property value see `_.matchesProperty`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Object} source The object of property values to match.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	 * // => 'barney'
	 *
	 * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	 * // => 'fred'
	 */
	function findWhere(collection, source) {
	  return find(collection, baseMatches(source));
	}
	
	module.exports = findWhere;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(561);


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(503),
	    baseEach = __webpack_require__(533),
	    createReduce = __webpack_require__(562);
	
	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` through `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not provided the first element of `collection` is used as the initial
	 * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	 * and `sortByOrder`
	 *
	 * @static
	 * @memberOf _
	 * @alias foldl, inject
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.reduce([1, 2], function(total, n) {
	 *   return total + n;
	 * });
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	 *   result[key] = n * 3;
	 *   return result;
	 * }, {});
	 * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	 */
	var reduce = createReduce(arrayReduce, baseEach);
	
	module.exports = reduce;


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseReduce = __webpack_require__(563),
	    isArray = __webpack_require__(167);
	
	/**
	 * Creates a function for `_.reduce` or `_.reduceRight`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over an array.
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @returns {Function} Returns the new each function.
	 */
	function createReduce(arrayFunc, eachFunc) {
	  return function(collection, iteratee, accumulator, thisArg) {
	    var initFromArray = arguments.length < 3;
	    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	      ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	      : baseReduce(collection, baseCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	  };
	}
	
	module.exports = createReduce;


/***/ }),
/* 563 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight` without support
	 * for callback shorthands and `this` binding, which iterates over `collection`
	 * using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initFromCollection Specify using the first or last element
	 *  of `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	  eachFunc(collection, function(value, index, collection) {
	    accumulator = initFromCollection
	      ? (initFromCollection = false, value)
	      : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}
	
	module.exports = baseReduce;


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(565);


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayReduceRight = __webpack_require__(566),
	    baseEachRight = __webpack_require__(555),
	    createReduce = __webpack_require__(562);
	
	/**
	 * This method is like `_.reduce` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @alias foldr
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * var array = [[0, 1], [2, 3], [4, 5]];
	 *
	 * _.reduceRight(array, function(flattened, other) {
	 *   return flattened.concat(other);
	 * }, []);
	 * // => [4, 5, 2, 3, 0, 1]
	 */
	var reduceRight = createReduce(arrayReduceRight, baseEachRight);
	
	module.exports = reduceRight;


/***/ }),
/* 566 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.reduceRight` for arrays without support for
	 * callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initFromArray] Specify using the last element of `array`
	 *  as the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	  var length = array.length;
	  if (initFromArray && length) {
	    accumulator = array[--length];
	  }
	  while (length--) {
	    accumulator = iteratee(accumulator, array[length], length, array);
	  }
	  return accumulator;
	}
	
	module.exports = arrayReduceRight;


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

	var createAggregator = __webpack_require__(545);
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` through `iteratee`. The corresponding value
	 * of each key is an array of the elements responsible for generating the key.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * _.groupBy([4.2, 6.1, 6.4], function(n) {
	 *   return Math.floor(n);
	 * });
	 * // => { '4': [4.2], '6': [6.1, 6.4] }
	 *
	 * _.groupBy([4.2, 6.1, 6.4], function(n) {
	 *   return this.floor(n);
	 * }, Math);
	 * // => { '4': [4.2], '6': [6.1, 6.4] }
	 *
	 * // using the `_.property` callback shorthand
	 * _.groupBy(['one', 'two', 'three'], 'length');
	 * // => { '3': ['one', 'two'], '5': ['three'] }
	 */
	var groupBy = createAggregator(function(result, value, key) {
	  if (hasOwnProperty.call(result, key)) {
	    result[key].push(value);
	  } else {
	    result[key] = [value];
	  }
	});
	
	module.exports = groupBy;


/***/ }),
/* 568 */
542,
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

	var createAggregator = __webpack_require__(545);
	
	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` through `iteratee`. The corresponding value
	 * of each key is the last element responsible for generating the key. The
	 * iteratee function is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * var keyData = [
	 *   { 'dir': 'left', 'code': 97 },
	 *   { 'dir': 'right', 'code': 100 }
	 * ];
	 *
	 * _.indexBy(keyData, 'dir');
	 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	 *
	 * _.indexBy(keyData, function(object) {
	 *   return String.fromCharCode(object.code);
	 * });
	 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	 *
	 * _.indexBy(keyData, function(object) {
	 *   return this.fromCharCode(object.code);
	 * }, String);
	 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	 */
	var indexBy = createAggregator(function(result, value, key) {
	  result[key] = value;
	});
	
	module.exports = indexBy;


/***/ }),
/* 570 */
560,
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533),
	    invokePath = __webpack_require__(413),
	    isArrayLike = __webpack_require__(161),
	    isKey = __webpack_require__(361),
	    restParam = __webpack_require__(259);
	
	/**
	 * Invokes the method at `path` of each element in `collection`, returning
	 * an array of the results of each invoked method. Any additional arguments
	 * are provided to each invoked method. If `methodName` is a function it's
	 * invoked for, and `this` bound to, each element in `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Array|Function|string} path The path of the method to invoke or
	 *  the function invoked per iteration.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {Array} Returns the array of results.
	 * @example
	 *
	 * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	 * // => [[1, 5, 7], [1, 2, 3]]
	 *
	 * _.invoke([123, 456], String.prototype.split, '');
	 * // => [['1', '2', '3'], ['4', '5', '6']]
	 */
	var invoke = restParam(function(collection, path, args) {
	  var index = -1,
	      isFunc = typeof path == 'function',
	      isProp = isKey(path),
	      result = isArrayLike(collection) ? Array(collection.length) : [];
	
	  baseEach(collection, function(value) {
	    var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	    result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	  });
	  return result;
	});
	
	module.exports = invoke;


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

	var createExtremum = __webpack_require__(573),
	    gt = __webpack_require__(191);
	
	/** Used as references for `-Infinity` and `Infinity`. */
	var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
	
	/**
	 * Gets the maximum value of `collection`. If `collection` is empty or falsey
	 * `-Infinity` is returned. If an iteratee function is provided it's invoked
	 * for each value in `collection` to generate the criterion by which the value
	 * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Math
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * _.max([4, 2, 8, 6]);
	 * // => 8
	 *
	 * _.max([]);
	 * // => -Infinity
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 }
	 * ];
	 *
	 * _.max(users, function(chr) {
	 *   return chr.age;
	 * });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using the `_.property` callback shorthand
	 * _.max(users, 'age');
	 * // => { 'user': 'fred', 'age': 40 }
	 */
	var max = createExtremum(gt, NEGATIVE_INFINITY);
	
	module.exports = max;


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayExtremum = __webpack_require__(574),
	    baseCallback = __webpack_require__(356),
	    baseExtremum = __webpack_require__(575),
	    isArray = __webpack_require__(167),
	    isIterateeCall = __webpack_require__(180),
	    toIterable = __webpack_require__(576);
	
	/**
	 * Creates a `_.max` or `_.min` function.
	 *
	 * @private
	 * @param {Function} comparator The function used to compare values.
	 * @param {*} exValue The initial extremum value.
	 * @returns {Function} Returns the new extremum function.
	 */
	function createExtremum(comparator, exValue) {
	  return function(collection, iteratee, thisArg) {
	    if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	      iteratee = undefined;
	    }
	    iteratee = baseCallback(iteratee, thisArg, 3);
	    if (iteratee.length == 1) {
	      collection = isArray(collection) ? collection : toIterable(collection);
	      var result = arrayExtremum(collection, iteratee, comparator, exValue);
	      if (!(collection.length && result === exValue)) {
	        return result;
	      }
	    }
	    return baseExtremum(collection, iteratee, comparator, exValue);
	  };
	}
	
	module.exports = createExtremum;


/***/ }),
/* 574 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	 * with one argument: (value).
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} comparator The function used to compare values.
	 * @param {*} exValue The initial extremum value.
	 * @returns {*} Returns the extremum value.
	 */
	function arrayExtremum(array, iteratee, comparator, exValue) {
	  var index = -1,
	      length = array.length,
	      computed = exValue,
	      result = computed;
	
	  while (++index < length) {
	    var value = array[index],
	        current = +iteratee(value);
	
	    if (comparator(current, computed)) {
	      computed = current;
	      result = value;
	    }
	  }
	  return result;
	}
	
	module.exports = arrayExtremum;


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533);
	
	/**
	 * Gets the extremum value of `collection` invoking `iteratee` for each value
	 * in `collection` to generate the criterion by which the value is ranked.
	 * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} comparator The function used to compare values.
	 * @param {*} exValue The initial extremum value.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum(collection, iteratee, comparator, exValue) {
	  var computed = exValue,
	      result = computed;
	
	  baseEach(collection, function(value, index, collection) {
	    var current = +iteratee(value, index, collection);
	    if (comparator(current, computed) || (current === exValue && current === result)) {
	      computed = current;
	      result = value;
	    }
	  });
	  return result;
	}
	
	module.exports = baseExtremum;


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(161),
	    isObject = __webpack_require__(159),
	    values = __webpack_require__(215);
	
	/**
	 * Converts `value` to an array-like object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array|Object} Returns the array-like object.
	 */
	function toIterable(value) {
	  if (value == null) {
	    return [];
	  }
	  if (!isArrayLike(value)) {
	    return values(value);
	  }
	  return isObject(value) ? value : Object(value);
	}
	
	module.exports = toIterable;


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

	var createExtremum = __webpack_require__(573),
	    lt = __webpack_require__(212);
	
	/** Used as references for `-Infinity` and `Infinity`. */
	var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
	
	/**
	 * Gets the minimum value of `collection`. If `collection` is empty or falsey
	 * `Infinity` is returned. If an iteratee function is provided it's invoked
	 * for each value in `collection` to generate the criterion by which the value
	 * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Math
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * _.min([4, 2, 8, 6]);
	 * // => 2
	 *
	 * _.min([]);
	 * // => Infinity
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 }
	 * ];
	 *
	 * _.min(users, function(chr) {
	 *   return chr.age;
	 * });
	 * // => { 'user': 'barney', 'age': 36 }
	 *
	 * // using the `_.property` callback shorthand
	 * _.min(users, 'age');
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var min = createExtremum(lt, POSITIVE_INFINITY);
	
	module.exports = min;


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

	var createAggregator = __webpack_require__(545);
	
	/**
	 * Creates an array of elements split into two groups, the first of which
	 * contains elements `predicate` returns truthy for, while the second of which
	 * contains elements `predicate` returns falsey for. The predicate is bound
	 * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the array of grouped elements.
	 * @example
	 *
	 * _.partition([1, 2, 3], function(n) {
	 *   return n % 2;
	 * });
	 * // => [[1, 3], [2]]
	 *
	 * _.partition([1.2, 2.3, 3.4], function(n) {
	 *   return this.floor(n) % 2;
	 * }, Math);
	 * // => [[1.2, 3.4], [2.3]]
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': false },
	 *   { 'user': 'fred',    'age': 40, 'active': true },
	 *   { 'user': 'pebbles', 'age': 1,  'active': false }
	 * ];
	 *
	 * var mapper = function(array) {
	 *   return _.pluck(array, 'user');
	 * };
	 *
	 * // using the `_.matches` callback shorthand
	 * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	 * // => [['pebbles'], ['barney', 'fred']]
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.map(_.partition(users, 'active', false), mapper);
	 * // => [['barney', 'pebbles'], ['fred']]
	 *
	 * // using the `_.property` callback shorthand
	 * _.map(_.partition(users, 'active'), mapper);
	 * // => [['fred'], ['barney', 'pebbles']]
	 */
	var partition = createAggregator(function(result, value, key) {
	  result[key ? 0 : 1].push(value);
	}, function() { return [[], []]; });
	
	module.exports = partition;


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

	var map = __webpack_require__(540),
	    property = __webpack_require__(364);
	
	/**
	 * Gets the property value of `path` from all elements in `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Array|string} path The path of the property to pluck.
	 * @returns {Array} Returns the property values.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 }
	 * ];
	 *
	 * _.pluck(users, 'user');
	 * // => ['barney', 'fred']
	 *
	 * var userIndex = _.indexBy(users, 'user');
	 * _.pluck(userIndex, 'age');
	 * // => [36, 40] (iteration order is not guaranteed)
	 */
	function pluck(collection, path) {
	  return map(collection, property(path));
	}
	
	module.exports = pluck;


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(501),
	    baseCallback = __webpack_require__(356),
	    baseFilter = __webpack_require__(557),
	    isArray = __webpack_require__(167);
	
	/**
	 * The opposite of `_.filter`; this method returns the elements of `collection`
	 * that `predicate` does **not** return truthy for.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Array} Returns the new filtered array.
	 * @example
	 *
	 * _.reject([1, 2, 3, 4], function(n) {
	 *   return n % 2 == 0;
	 * });
	 * // => [1, 3]
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': true }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	 * // => ['barney']
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.pluck(_.reject(users, 'active', false), 'user');
	 * // => ['fred']
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.reject(users, 'active'), 'user');
	 * // => ['barney']
	 */
	function reject(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  predicate = baseCallback(predicate, thisArg, 3);
	  return func(collection, function(value, index, collection) {
	    return !predicate(value, index, collection);
	  });
	}
	
	module.exports = reject;


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRandom = __webpack_require__(582),
	    isIterateeCall = __webpack_require__(180),
	    toArray = __webpack_require__(214),
	    toIterable = __webpack_require__(576);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;
	
	/**
	 * Gets a random element or `n` random elements from a collection.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to sample.
	 * @param {number} [n] The number of elements to sample.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {*} Returns the random sample(s).
	 * @example
	 *
	 * _.sample([1, 2, 3, 4]);
	 * // => 2
	 *
	 * _.sample([1, 2, 3, 4], 2);
	 * // => [3, 1]
	 */
	function sample(collection, n, guard) {
	  if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	    collection = toIterable(collection);
	    var length = collection.length;
	    return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	  }
	  var index = -1,
	      result = toArray(collection),
	      length = result.length,
	      lastIndex = length - 1;
	
	  n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	  while (++index < n) {
	    var rand = baseRandom(index, lastIndex),
	        value = result[rand];
	
	    result[rand] = result[index];
	    result[index] = value;
	  }
	  result.length = n;
	  return result;
	}
	
	module.exports = sample;


/***/ }),
/* 582 */
/***/ (function(module, exports) {

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeFloor = Math.floor,
	    nativeRandom = Math.random;
	
	/**
	 * The base implementation of `_.random` without support for argument juggling
	 * and returning floating-point numbers.
	 *
	 * @private
	 * @param {number} min The minimum possible value.
	 * @param {number} max The maximum possible value.
	 * @returns {number} Returns the random number.
	 */
	function baseRandom(min, max) {
	  return min + nativeFloor(nativeRandom() * (max - min + 1));
	}
	
	module.exports = baseRandom;


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(556);


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

	var sample = __webpack_require__(581);
	
	/** Used as references for `-Infinity` and `Infinity`. */
	var POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
	
	/**
	 * Creates an array of shuffled values, using a version of the
	 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to shuffle.
	 * @returns {Array} Returns the new shuffled array.
	 * @example
	 *
	 * _.shuffle([1, 2, 3, 4]);
	 * // => [4, 1, 3, 2]
	 */
	function shuffle(collection) {
	  return sample(collection, POSITIVE_INFINITY);
	}
	
	module.exports = shuffle;


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(162),
	    isLength = __webpack_require__(164),
	    keys = __webpack_require__(155);
	
	/**
	 * Gets the size of `collection` by returning its length for array-like
	 * values or the number of own enumerable properties for objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @returns {number} Returns the size of `collection`.
	 * @example
	 *
	 * _.size([1, 2, 3]);
	 * // => 3
	 *
	 * _.size({ 'a': 1, 'b': 2 });
	 * // => 2
	 *
	 * _.size('pebbles');
	 * // => 7
	 */
	function size(collection) {
	  var length = collection ? getLength(collection) : 0;
	  return isLength(length) ? length : keys(collection).length;
	}
	
	module.exports = size;


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(356),
	    baseMap = __webpack_require__(541),
	    baseSortBy = __webpack_require__(587),
	    compareAscending = __webpack_require__(588),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection through `iteratee`. This method performs
	 * a stable sort, that is, it preserves the original sort order of equal elements.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return Math.sin(n);
	 * });
	 * // => [3, 1, 2]
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return this.sin(n);
	 * }, Math);
	 * // => [3, 1, 2]
	 *
	 * var users = [
	 *   { 'user': 'fred' },
	 *   { 'user': 'pebbles' },
	 *   { 'user': 'barney' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.sortBy(users, 'user'), 'user');
	 * // => ['barney', 'fred', 'pebbles']
	 */
	function sortBy(collection, iteratee, thisArg) {
	  if (collection == null) {
	    return [];
	  }
	  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	    iteratee = undefined;
	  }
	  var index = -1;
	  iteratee = baseCallback(iteratee, thisArg, 3);
	
	  var result = baseMap(collection, function(value, key, collection) {
	    return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	  });
	  return baseSortBy(result, compareAscending);
	}
	
	module.exports = sortBy;


/***/ }),
/* 587 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define
	 * the sort order of `array` and replaces criteria objects with their
	 * corresponding values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;
	
	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}
	
	module.exports = baseSortBy;


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCompareAscending = __webpack_require__(482);
	
	/**
	 * Used by `_.sortBy` to compare transformed elements of a collection and stable
	 * sort them in ascending order.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareAscending(object, other) {
	  return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	}
	
	module.exports = compareAscending;


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(261),
	    baseSortByOrder = __webpack_require__(590),
	    isIterateeCall = __webpack_require__(180),
	    restParam = __webpack_require__(259);
	
	/**
	 * This method is like `_.sortBy` except that it can sort by multiple iteratees
	 * or property names.
	 *
	 * If a property name is provided for an iteratee the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If an object is provided for an iteratee the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	 *  The iteratees to sort by, specified as individual values or arrays of values.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 42 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	 * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	 *
	 * _.map(_.sortByAll(users, 'user', function(chr) {
	 *   return Math.floor(chr.age / 10);
	 * }), _.values);
	 * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	 */
	var sortByAll = restParam(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var guard = iteratees[2];
	  if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	    iteratees.length = 1;
	  }
	  return baseSortByOrder(collection, baseFlatten(iteratees), []);
	});
	
	module.exports = sortByAll;


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(384),
	    baseCallback = __webpack_require__(356),
	    baseMap = __webpack_require__(541),
	    baseSortBy = __webpack_require__(587),
	    compareMultiple = __webpack_require__(591);
	
	/**
	 * The base implementation of `_.sortByOrder` without param guards.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {boolean[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseSortByOrder(collection, iteratees, orders) {
	  var index = -1;
	
	  iteratees = arrayMap(iteratees, function(iteratee) { return baseCallback(iteratee); });
	
	  var result = baseMap(collection, function(value) {
	    var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });
	
	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}
	
	module.exports = baseSortByOrder;


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCompareAscending = __webpack_require__(482);
	
	/**
	 * Used by `_.sortByOrder` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	 * a value is sorted in ascending order if its corresponding order is "asc", and
	 * descending if "desc".
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;
	
	  while (++index < length) {
	    var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * ((order === 'asc' || order === true) ? 1 : -1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}
	
	module.exports = compareMultiple;


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSortByOrder = __webpack_require__(590),
	    isArray = __webpack_require__(167),
	    isIterateeCall = __webpack_require__(180);
	
	/**
	 * This method is like `_.sortByAll` except that it allows specifying the
	 * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	 * values are sorted in ascending order. Otherwise, a value is sorted in
	 * ascending order if its corresponding order is "asc", and descending if "desc".
	 *
	 * If a property name is provided for an iteratee the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If an object is provided for an iteratee the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {boolean[]} [orders] The sort orders of `iteratees`.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 34 },
	 *   { 'user': 'fred',   'age': 42 },
	 *   { 'user': 'barney', 'age': 36 }
	 * ];
	 *
	 * // sort by `user` in ascending order and by `age` in descending order
	 * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	 * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	 */
	function sortByOrder(collection, iteratees, orders, guard) {
	  if (collection == null) {
	    return [];
	  }
	  if (guard && isIterateeCall(iteratees, orders, guard)) {
	    orders = undefined;
	  }
	  if (!isArray(iteratees)) {
	    iteratees = iteratees == null ? [] : [iteratees];
	  }
	  if (!isArray(orders)) {
	    orders = orders == null ? [] : [orders];
	  }
	  return baseSortByOrder(collection, iteratees, orders);
	}
	
	module.exports = sortByOrder;


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	var arraySum = __webpack_require__(594),
	    baseCallback = __webpack_require__(356),
	    baseSum = __webpack_require__(595),
	    isArray = __webpack_require__(167),
	    isIterateeCall = __webpack_require__(180),
	    toIterable = __webpack_require__(576);
	
	/**
	 * Gets the sum of the values in `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @category Math
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {number} Returns the sum.
	 * @example
	 *
	 * _.sum([4, 6]);
	 * // => 10
	 *
	 * _.sum({ 'a': 4, 'b': 6 });
	 * // => 10
	 *
	 * var objects = [
	 *   { 'n': 4 },
	 *   { 'n': 6 }
	 * ];
	 *
	 * _.sum(objects, function(object) {
	 *   return object.n;
	 * });
	 * // => 10
	 *
	 * // using the `_.property` callback shorthand
	 * _.sum(objects, 'n');
	 * // => 10
	 */
	function sum(collection, iteratee, thisArg) {
	  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	    iteratee = undefined;
	  }
	  iteratee = baseCallback(iteratee, thisArg, 3);
	  return iteratee.length == 1
	    ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	    : baseSum(collection, iteratee);
	}
	
	module.exports = sum;


/***/ }),
/* 594 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.sum` for arrays without support for callback
	 * shorthands and `this` binding..
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the sum.
	 */
	function arraySum(array, iteratee) {
	  var length = array.length,
	      result = 0;
	
	  while (length--) {
	    result += +iteratee(array[length]) || 0;
	  }
	  return result;
	}
	
	module.exports = arraySum;


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(533);
	
	/**
	 * The base implementation of `_.sum` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the sum.
	 */
	function baseSum(collection, iteratee) {
	  var result = 0;
	  baseEach(collection, function(value, index, collection) {
	    result += +iteratee(value, index, collection) || 0;
	  });
	  return result;
	}
	
	module.exports = baseSum;


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(357),
	    filter = __webpack_require__(556);
	
	/**
	 * Performs a deep comparison between each element in `collection` and the
	 * source object, returning an array of all elements that have equivalent
	 * property values.
	 *
	 * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	 * numbers, `Object` objects, regexes, and strings. Objects are compared by
	 * their own, not inherited, enumerable properties. For comparing a single
	 * own or inherited property value see `_.matchesProperty`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Object} source The object of property values to match.
	 * @returns {Array} Returns the new filtered array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	 *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	 * ];
	 *
	 * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	 * // => ['barney']
	 *
	 * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	 * // => ['fred']
	 */
	function where(collection, source) {
	  return filter(collection, baseMatches(source));
	}
	
	module.exports = where;


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function ButtonHelp(_ref) {
	    var blockName = _ref.blockName;
	    var _window$location = window.location,
	        hash = _window$location.hash,
	        pathname = _window$location.pathname;
	
	    var url = hash && hash.replace('#', '') || pathname;
	    var _window = window,
	        openHelpCenter = _window.openHelpCenter;
	
	
	    if (typeof openHelpCenter !== 'function') {
	        console.warn('You forgot to set the function "window.openHelpCenter". Please mount somewhere in your application a "DraggableIframe" with "openHelpCenter" as the "toggleFunctionName" prop');
	    }
	
	    return _react2.default.createElement(_button2.default, {
	        className: 'help-button',
	        handleOnClick: function handleOnClick() {
	            return openHelpCenter(url, blockName);
	        },
	        icon: 'help_outline',
	        label: (0, _translation.translate)('help.alt') + ' : ' + blockName,
	        shape: 'icon',
	        type: 'button'
	    });
	}
	
	ButtonHelp.propTypes = {
	    blockName: _react.PropTypes.string
	};
	
	exports.default = ButtonHelp;
	module.exports = exports['default'];

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _user = __webpack_require__(599);
	
	var _user2 = _interopRequireDefault(_user);
	
	var _intersection = __webpack_require__(475);
	
	var _intersection2 = _interopRequireDefault(_intersection);
	
	var _isArray = __webpack_require__(167);
	
	var _isArray2 = _interopRequireDefault(_isArray);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Role(_ref) {
	    var hasAll = _ref.hasAll,
	        hasOne = _ref.hasOne,
	        children = _ref.children,
	        emptyBlock = _ref.emptyBlock;
	
	    var userRoles = _user2.default.getRoles();
	    //console.log("emptyBlock",emptyBlock);
	    if ((0, _isArray2.default)(hasAll) && (0, _intersection2.default)(userRoles, hasAll).length === hasAll.length) {
	        return children;
	    } else if ((0, _isArray2.default)(hasOne) && (0, _intersection2.default)(userRoles, hasOne).length > 0) {
	        return children;
	    }
	    return emptyBlock;
	}
	
	Role.displayName = 'Role';
	Role.defaultProps = {
	    emptyBlock: null
	};
	Role.propTypes = {
	    children: _react.PropTypes.object,
	    hasOne: _react.PropTypes.array,
	    hasAll: _react.PropTypes.array
	};
	
	exports.default = Role;
	module.exports = exports['default'];

/***/ }),
/* 599 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_599__;

/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _buttonBackToTop = __webpack_require__(601);
	
	var _buttonBackToTop2 = _interopRequireDefault(_buttonBackToTop);
	
	var _stickyMenu = __webpack_require__(603);
	
	var _stickyMenu2 = _interopRequireDefault(_stickyMenu);
	
	var _scroll = __webpack_require__(423);
	
	var _scroll2 = _interopRequireDefault(_scroll);
	
	var _grid = __webpack_require__(604);
	
	var _grid2 = _interopRequireDefault(_grid);
	
	var _column = __webpack_require__(605);
	
	var _column2 = _interopRequireDefault(_column);
	
	var _debounce = __webpack_require__(270);
	
	var _debounce2 = _interopRequireDefault(_debounce);
	
	var _filter = __webpack_require__(556);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _first = __webpack_require__(467);
	
	var _first2 = _interopRequireDefault(_first);
	
	var _last = __webpack_require__(362);
	
	var _last2 = _interopRequireDefault(_last);
	
	var _xor = __webpack_require__(505);
	
	var _xor2 = _interopRequireDefault(_xor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var BackToTopComponent = _buttonBackToTop2.default;
	
	// component default props.
	var defaultProps = {
	    hasMenu: true, //Activate the presence of the sticky navigation component.
	    hasBackToTop: true, //Activate the presence of BackToTop button
	    offset: 100, //offset position when affix
	    scrollDelay: 10 //defaut debounce delay for scroll spy call
	};
	
	// component props definition.
	var propTypes = {
	    hasMenu: _react.PropTypes.bool,
	    hasBackToTop: _react.PropTypes.bool,
	    offset: _react.PropTypes.number,
	    scrollDelay: _react.PropTypes.number
	};
	
	/**
	* ScrollspyContainer component.
	*/
	
	var ScrollspyContainer = (0, _scroll2.default)(_class = function (_Component) {
	    _inherits(ScrollspyContainer, _Component);
	
	    function ScrollspyContainer(props) {
	        _classCallCheck(this, ScrollspyContainer);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._executeRefreshMenu = function (time) {
	            _this._timeouts = [];
	            for (var i = 0; i < time; i++) {
	                _this._timeouts.push(setTimeout(_this._refreshMenu.bind(_this), i * 1000));
	            }
	        };
	
	        _this._debounceRefreshMenu = function () {
	            _this._debouncedRefresh();
	        };
	
	        _this._refreshMenu = function () {
	            if (!_this.props.hasMenu) {
	                return;
	            }
	            var stickyMenu = _this.refs.stickyMenu;
	            var clickedId = _this.state.clickedId;
	
	            var menus = _this._buildMenuList(); //build the menu list
	            //TODO remove this check
	            var affix = stickyMenu ? _this._isMenuAffix() : _this.state.affix; //Calculate menu position (affix or not)
	            // Check if scroll is at cliked item level
	            var isAtClickedItem = void 0;
	            if (clickedId !== undefined) {
	                var selector = '[data-spy=\'' + clickedId + '\']';
	                var node = document.querySelector(selector);
	                var nodePosition = _this.scrollPosition(node);
	                var positionTop = _this._getElementRealPosition(nodePosition.top);
	                isAtClickedItem = _this.scrollPosition().top === positionTop;
	            }
	            _this.setState({
	                menuList: menus,
	                clickedId: isAtClickedItem ? undefined : clickedId,
	                affix: affix
	            });
	        };
	
	        _this._buildMenuList = function () {
	            var hasMenu = _this.props.hasMenu;
	
	            if (!hasMenu) {
	                return [];
	            }
	            var detectionOffset = window.screen.height / 5;
	            var currentScrollPosition = { top: _this.scrollPosition().top, left: _this.scrollPosition().left };
	            var isAtPageBottom = _this.isAtPageBottom();
	
	            //get the menu list (without blocks in popin)
	            var thisComponentNode = _reactDom2.default.findDOMNode(_this);
	            var allDataSpy = thisComponentNode.querySelectorAll('[data-spy]');
	            var popinDataSpy = thisComponentNode.querySelectorAll('[data-focus=\'popin-window\'] [data-spy]');
	            var selectionList = (0, _xor2.default)(allDataSpy, popinDataSpy);
	
	            if (selectionList.length === 0) {
	                return;
	            }
	            var menuList = selectionList.map(function (selection, index) {
	                var title = selection.querySelector('[data-spy-title]');
	                var nodeId = selection.getAttribute('data-spy');
	                return {
	                    index: index,
	                    label: title.innerHTML,
	                    nodeId: nodeId,
	                    scrollTop: _this.scrollPosition(selection).top, // offset of 10 to be safe
	                    isActive: false,
	                    onClick: _this._getMenuItemClickHandler(nodeId)
	                };
	            });
	
	            var nextTitles = (0, _filter2.default)(menuList, function (n) {
	                return currentScrollPosition.top + detectionOffset < _this._getElementRealPosition(n.scrollTop);
	            });
	
	            //Calculate current node
	            //by default, first node is indexed
	            var currentIndex = menuList[0].index;
	            if (0 < nextTitles.length) {
	                //check the first node
	                var firstNode = (0, _first2.default)(nextTitles);
	                var index = firstNode.index;
	                if (0 < index) {
	                    currentIndex = menuList[index - 1].index;
	                }
	            } else {
	                //means that the position is the last title
	                currentIndex = (0, _last2.default)(menuList).index;
	            }
	            var clickedId = _this.state.clickedId;
	            if (isAtPageBottom && undefined !== clickedId) {
	                menuList = menuList.map(function (item) {
	                    if (item.nodeId === clickedId) {
	                        item.isActive = true;
	                    }
	                    return item;
	                });
	                _this.setState({ clickedId: undefined });
	            } else {
	                menuList[currentIndex].isActive = true;
	            }
	            return menuList;
	        };
	
	        _this._getElementRealPosition = function (position) {
	            var sscDomNode = _reactDom2.default.findDOMNode(_this);
	            var sscPosition = _this.scrollPosition(sscDomNode);
	            return position - sscPosition.top;
	        };
	
	        _this._isMenuAffix = function () {
	            var offset = _this.props.offset;
	            var hasMenu = _this.props.hasMenu;
	
	            if (!hasMenu) {
	                return false;
	            }
	            var sscDomNode = _reactDom2.default.findDOMNode(_this);
	            var currentViewPosition = sscDomNode.getBoundingClientRect();
	            var containerPaddingTop = _this._getPaddingTopValue();
	            offset -= containerPaddingTop;
	            return currentViewPosition.top <= offset;
	        };
	
	        _this._getPaddingTopValue = function () {
	            var sscDomNode = _reactDom2.default.findDOMNode(_this);
	            var computedStyles = window.getComputedStyle(sscDomNode, null);
	            var paddingTop = computedStyles.getPropertyValue('padding-top');
	            return paddingTop ? parseInt(paddingTop, 0) : 0;
	        };
	
	        var state = {
	            menuList: [],
	            affix: false
	        };
	        _this.state = state;
	        return _this;
	    }
	
	    /** @inheritDoc */
	
	
	    ScrollspyContainer.prototype.componentDidMount = function componentDidMount() {
	        this._scrollCarrier = window;
	        this._debouncedRefresh = (0, _debounce2.default)(this._refreshMenu, this.props.scrollDelay);
	        this._scrollCarrier.addEventListener('scroll', this._debounceRefreshMenu);
	        this._scrollCarrier.addEventListener('resize', this._debounceRefreshMenu);
	        this._executeRefreshMenu(10);
	    };
	
	    /** @inheritDoc */
	
	
	    ScrollspyContainer.prototype.componentWillUnmount = function componentWillUnmount() {
	        this._timeouts.map(clearTimeout);
	        this._scrollCarrier.removeEventListener('scroll', this._debounceRefreshMenu);
	        this._scrollCarrier.removeEventListener('resize', this._debounceRefreshMenu);
	        this._debouncedRefresh.cancel();
	    };
	
	    /**
	    * Refresh screen X times.
	    * @param  {number} time number of execution
	    */
	
	
	    /**
	    * The scroll event handler
	    * @private
	    */
	
	
	    /**
	    * Build the list of menus.
	    * @private
	    * @return {array} the list of menus.
	    */
	
	
	    /**
	    * Calculate the real position of an element, depending on declared offset in props.
	    * @private
	    * @param  {number} position position
	    * @return {number} the real position
	    */
	
	
	    /**
	    * Calculate menu position (affix or not)
	    * @private
	    * @return {Boolean} true is menu must be affix, else false
	    */
	
	
	    /**
	    * Handle click on item menu function.
	    * @private
	    * @param  {string} menuId  node spyId in DOM to scroll to
	    * @return {function}        function to call
	    */
	    ScrollspyContainer.prototype._getMenuItemClickHandler = function _getMenuItemClickHandler(menuId) {
	        var _this2 = this;
	
	        return function () {
	            _this2.setState({
	                clickedId: menuId
	            }, function () {
	                _this2._refreshMenu();
	                _this2._onMenuItemClick(menuId);
	            });
	        };
	    };
	
	    /**
	    * Menu click function. Scroll to the node position.
	    * @private
	    * @param  {string} menuId  node spyId in DOM to scroll to
	    */
	
	
	    ScrollspyContainer.prototype._onMenuItemClick = function _onMenuItemClick(menuId) {
	        var selector = '[data-spy=\'' + menuId + '\']';
	        var node = document.querySelector(selector);
	        var nodePosition = this.scrollPosition(node);
	        var positionTop = this._getElementRealPosition(nodePosition.top);
	        this.scrollTo(undefined, positionTop);
	    };
	
	    /** @inheritedDoc */
	
	
	    ScrollspyContainer.prototype.render = function render() {
	        var _props = this.props,
	            children = _props.children,
	            hasMenu = _props.hasMenu,
	            hasBackToTop = _props.hasBackToTop,
	            offset = _props.offset,
	            scrollDelay = _props.scrollDelay,
	            labelIcon = _props.labelIcon,
	            classNameIcon = _props.classNameIcon,
	            otherProps = _objectWithoutProperties(_props, ['children', 'hasMenu', 'hasBackToTop', 'offset', 'scrollDelay', 'labelIcon', 'classNameIcon']);
	
	        var _state = this.state,
	            affix = _state.affix,
	            menuList = _state.menuList;
	
	        return _react2.default.createElement(
	            'div',
	            _extends({ 'data-focus': 'scrollspy-container' }, otherProps),
	            hasMenu && _react2.default.createElement(_stickyMenu2.default, { affix: affix, affixOffset: offset, menuList: menuList, ref: 'stickyMenu' }),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'scrollspy-container-content' },
	                children
	            ),
	            hasBackToTop && _react2.default.createElement(BackToTopComponent, { labelIcon: labelIcon, classNameIcon: classNameIcon })
	        );
	    };
	
	    return ScrollspyContainer;
	}(_react.Component)) || _class;
	
	//Static props.
	
	
	ScrollspyContainer.displayName = 'ScrollspyContainer';
	ScrollspyContainer.defaultProps = defaultProps;
	ScrollspyContainer.propTypes = propTypes;
	
	exports.default = ScrollspyContainer;
	module.exports = exports['default'];

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var _require = __webpack_require__(602),
	    scrollTo = _require.scrollTo,
	    scrollPosition = _require.scrollPosition;
	
	var ButtonBackToTop = function (_Component) {
	    _inherits(ButtonBackToTop, _Component);
	
	    function ButtonBackToTop() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, ButtonBackToTop);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            isVisible: false
	        }, _this._scrollSpy = function () {
	            var currentScrollPosition = scrollPosition();
	            if (currentScrollPosition.top > _this.props.scrollStart) {
	                if (!_this.state.isVisible) {
	                    _this.setState({ isVisible: true });
	                }
	            } else {
	                if (_this.state.isVisible) {
	                    _this.setState({ isVisible: false });
	                }
	            }
	        }, _this.goBackToTop = function () {
	            //TODO: Add animation
	            scrollTo(undefined, 0);
	        }, _this.render = function () {
	            var isVisible = _this.state.isVisible;
	            var _this$props = _this.props,
	                labelIcon = _this$props.labelIcon,
	                classNameIcon = _this$props.classNameIcon;
	
	            if (labelIcon && classNameIcon) {
	                return isVisible ? _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'back-to-top' },
	                    _react2.default.createElement(_button2.default, { color: 'colored', handleOnClick: _this.goBackToTop, icon: 'expand_less',
	                        labelIcon: labelIcon, classNameIcon: classNameIcon, shape: 'fab', type: 'button' })
	                ) : null;
	            }
	            return isVisible ? _react2.default.createElement(
	                'div',
	                { 'data-focus': 'back-to-top' },
	                _react2.default.createElement(_button2.default, { color: 'colored', handleOnClick: _this.goBackToTop, icon: 'expand_less', shape: 'fab', type: 'button' })
	            ) : null;
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    /**
	    * Component did mount, attach the scroll spy
	    */
	    ButtonBackToTop.prototype.componentDidMount = function componentDidMount() {
	        this._scrollCarrier = window;
	        this._scrollCarrier.addEventListener('scroll', this._scrollSpy);
	        this._scrollCarrier.addEventListener('resize', this._scrollSpy);
	        this._scrollSpy();
	    };
	
	    ButtonBackToTop.prototype.componentWillUnmount = function componentWillUnmount() {
	        this._scrollCarrier.removeEventListener('scroll', this._scrollSpy);
	        this._scrollCarrier.removeEventListener('resize', this._scrollSpy);
	    };
	
	    /**
	    * The scroll event handler
	    * @private
	    */
	
	
	    /**
	    * Go back to the top of the page.
	    */
	
	
	    return ButtonBackToTop;
	}(_react.Component);
	
	ButtonBackToTop.defaultProps = {
	    iconPrefix: 'fa fa-',
	    iconName: 'arrow-circle-up',
	    duration: 100,
	    scrollStart: 100
	};
	ButtonBackToTop.propTypes = {
	    iconPrefix: _react.PropTypes.string,
	    iconName: _react.PropTypes.string,
	    duration: _react.PropTypes.number,
	    scrollStart: _react.PropTypes.number
	};
	
	
	ButtonBackToTop.displayName = 'ButtonBackToTop';
	exports.default = ButtonBackToTop;
	module.exports = exports['default'];

/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _require = __webpack_require__(148),
	    isUndefined = _require.isUndefined;
	
	/**
	* Get the scroll position from the top of the screen.
	* @param {object} node
	* @returns {int} - The position in pixel from the top of the scroll container.
	*/
	
	
	function scrollPosition(domNode) {
	    if (isUndefined(domNode)) {
	        var y = window.pageYOffset || document.documentElement.scrollTop;
	        var x = window.pageXOffset || document.documentElement.scrollLeft;
	        return { top: y, left: x };
	    }
	    return { top: domNode.scrollTop, left: domNode.scrollLeft };
	}
	
	/**
	* Set scrollbar position with smooth animation.
	* http://www.w3schools.com/jsref/prop_win_pagexoffset.asp
	*
	* @param {object} element  element parent for the scroll
	* @param {number} to       position of the scroll
	* @param {number} duration duration of animation
	*/
	function scrollTo(element, to) {
	    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
	
	    if (isUndefined(element)) {
	        window.scrollTo(0, to);
	        return;
	    }
	    element.scrollTop = to;
	}
	
	module.exports = { scrollTo: scrollTo, scrollPosition: scrollPosition };

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// component default props.
	var defaultProps = {
	    affix: false,
	    affixOffset: 0,
	    menuList: []
	};
	
	// component props definition.
	var propTypes = {
	    affix: _react.PropTypes.bool,
	    affixOffset: _react.PropTypes.number,
	    menuList: _react.PropTypes.array
	};
	
	/**
	* Sticky menu component.
	*/
	
	var StickyMenu = function (_Component) {
	    _inherits(StickyMenu, _Component);
	
	    function StickyMenu() {
	        _classCallCheck(this, StickyMenu);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    /**
	    * Render the a block container and the cild content of the block.
	    * @return {DOM} React DOM element
	    */
	    StickyMenu.prototype.render = function render() {
	        var _props = this.props,
	            affix = _props.affix,
	            affixOffset = _props.affixOffset,
	            menuList = _props.menuList,
	            otherProps = _objectWithoutProperties(_props, ['affix', 'affixOffset', 'menuList']);
	
	        return _react2.default.createElement(
	            'nav',
	            _extends({ 'data-affix': affix, 'data-focus': 'sticky-menu', 'data-offset': affixOffset }, otherProps),
	            _react2.default.createElement(
	                'ul',
	                null,
	                menuList.map(function (menu) {
	                    var label = menu.label,
	                        nodeId = menu.nodeId,
	                        isActive = menu.isActive,
	                        onClick = menu.onClick;
	
	                    return _react2.default.createElement(
	                        'li',
	                        { 'data-active': isActive, key: nodeId, onClick: onClick },
	                        label
	                    );
	                })
	            )
	        );
	    };
	
	    return StickyMenu;
	}(_react.Component);
	
	//Static props.
	
	
	StickyMenu.displayName = 'StickyMenu';
	StickyMenu.defaultProps = defaultProps;
	StickyMenu.propTypes = propTypes;
	
	exports.default = StickyMenu;
	module.exports = exports['default'];

/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // see http://www.getmdl.io/components/index.html#layout-section/grid
	//dependencies
	
	
	/**
	 * Grid component.
	 */
	
	function Grid(_ref) {
	    var children = _ref.children,
	        className = _ref.className,
	        otherProps = _objectWithoutProperties(_ref, ['children', 'className']);
	
	    return _react2.default.createElement(
	        'div',
	        _extends({ className: 'mdl-grid ' + (className ? className : '') }, otherProps),
	        children
	    );
	}
	
	Grid.propTypes = {};
	//Static props.
	Grid.displayName = 'Grid';
	
	module.exports = Grid;

/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // see http://www.getmdl.io/components/index.html#layout-section/grid
	//dependencies
	
	
	/**
	 * Column component.
	 */
	
	function _className(className, size) {
	    var SIZE_CSS = size ? 'mdl-cell--' + size + '-col' : '';
	    return 'mdl-cell ' + SIZE_CSS + ' ' + (className ? className : '');
	};
	
	function Column(_ref) {
	    var size = _ref.size,
	        className = _ref.className,
	        children = _ref.children,
	        otherProps = _objectWithoutProperties(_ref, ['size', 'className', 'children']);
	
	    return _react2.default.createElement(
	        'div',
	        _extends({ className: _className(className, size) }, otherProps),
	        children
	    );
	}
	
	//Static props.
	Column.displayName = 'Column';
	Column.defaultProps = {
	    size: 6
	};
	Column.propTypes = {
	    size: _react.PropTypes.number,
	    className: _react.PropTypes.string
	};
	
	module.exports = Column;

/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _history = __webpack_require__(143);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var propTypes = {
	    back: _react.PropTypes.func
	};
	
	function ButtonBack(_ref) {
	    var back = _ref.back;
	
	    return _react2.default.createElement(_button2.default, {
	        handleOnClick: back || _history.back,
	        icon: 'keyboard_backspace',
	        label: 'button.back',
	        shape: null,
	        type: 'button'
	    });
	}
	
	ButtonBack.propTypes = propTypes;
	
	exports.default = ButtonBack;
	module.exports = exports['default'];

/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Icon(_ref) {
	    var name = _ref.name,
	        library = _ref.library,
	        onClick = _ref.onClick,
	        style = _ref.style,
	        ariaHidden = _ref.ariaHidden;
	
	    switch (library) {
	        case 'material':
	            return _react2.default.createElement(
	                'i',
	                _extends({ className: 'material-icons', onClick: onClick, 'aria-hidden': ariaHidden }, style),
	                name
	            );
	        case 'font-awesome':
	            var faCss = 'fa fa-' + name;
	            return _react2.default.createElement('i', _extends({ className: faCss, onClick: onClick }, style));
	        case 'font-custom':
	            return _react2.default.createElement('span', { className: 'icon-' + name });
	        default:
	            return null;
	    }
	}
	
	Icon.displayName = 'Icon';
	Icon.defaultProps = {
	    name: '',
	    library: 'material'
	};
	Icon.propTypes = {
	    handleOnClick: _react.PropTypes.func,
	    library: _react.PropTypes.oneOf(['material', 'font-awesome', 'font-custom']),
	    name: _react.PropTypes.string
	};
	
	module.exports = Icon;

/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } // Dependencies
	
	
	var _require = __webpack_require__(406),
	    uniqueId = _require.uniqueId;
	
	var Title = function (_Component) {
	    _inherits(Title, _Component);
	
	    function Title() {
	        var _temp, _this, _ret;
	
	        _classCallCheck(this, Title);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
	            spyId: uniqueId('title_')
	        }, _temp), _possibleConstructorReturn(_this, _ret);
	    }
	
	    Title.prototype.render = function render() {
	        var spyId = this.state.spyId;
	        var _props = this.props,
	            id = _props.id,
	            label = _props.label;
	
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	                'h3',
	                { 'data-spy': spyId, id: id },
	                label
	            )
	        );
	    };
	
	    return Title;
	}(_react.Component);
	
	Title.propTypes = {
	    id: _react.PropTypes.string,
	    label: _react.PropTypes.string
	};
	exports.default = Title;
	module.exports = exports['default'];

/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _dec, _class; // Dependencies
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var ProgressBar = (_dec = (0, _material2.default)('bar'), _dec(_class = function (_Component) {
	    _inherits(ProgressBar, _Component);
	
	    function ProgressBar() {
	        _classCallCheck(this, ProgressBar);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    ProgressBar.prototype.componentDidMount = function componentDidMount() {
	        var completed = this.props.completed;
	
	        var bar = _reactDom2.default.findDOMNode(this.refs.bar);
	        if (bar) {
	            bar.MaterialProgress.setProgress(completed);
	            bar.MaterialProgress.setBuffer(100);
	        }
	    };
	
	    ProgressBar.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	        var completed = _ref.completed;
	
	        if (0 > completed) {
	            completed = 0;
	        }
	        if (100 < completed) {
	            completed = 100;
	        }
	        var bar = _reactDom2.default.findDOMNode(this.refs.bar);
	        if (bar) {
	            bar.MaterialProgress.setProgress(completed);
	            bar.MaterialProgress.setBuffer(100);
	        }
	    };
	
	    ProgressBar.prototype._renderClassName = function _renderClassName() {
	        var indeterminated = this.props.indeterminated;
	
	
	        if (indeterminated) {
	            return 'mdl-progress mdl-js-progress mdl-progress__indeterminate';
	        } else {
	            return 'mdl-progress mdl-js-progress';
	        }
	    };
	
	    ProgressBar.prototype.render = function render() {
	        var completed = +this.props.completed;
	        if (0 > completed) {
	            completed = 0;
	        }
	        if (100 < completed) {
	            completed = 100;
	        }
	        return _react2.default.createElement('div', { className: this._renderClassName(), 'data-focus': 'progress-bar', ref: 'bar' });
	    };
	
	    return ProgressBar;
	}(_react.Component)) || _class);
	ProgressBar.propTypes = {
	    completed: _react.PropTypes.number,
	    indeterminated: _react.PropTypes.bool
	};
	ProgressBar.defaultProps = {
	    completed: 0,
	    indetermindated: false
	};
	
	
	ProgressBar.displayName = 'ProgressBar';
	
	exports.default = ProgressBar;
	module.exports = exports['default'];

/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	function Label(_ref) {
	    var name = _ref.name,
	        text = _ref.text,
	        isRequired = _ref.isRequired;
	
	    var content = text || name;
	    return _react2.default.createElement(
	        'label',
	        { 'data-focus': 'label', htmlFor: name },
	        (0, _translation.translate)(content) + (isRequired ? '\u202F*' : '')
	    );
	}
	
	Label.propTypes = {
	    name: _react.PropTypes.string.isRequired,
	    text: _react.PropTypes.string
	};
	
	module.exports = Label;

/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Empty = function Empty() {
	  return _react2.default.createElement('div', { 'data-focus': 'empty' });
	};
	
	Empty.displayName = 'Empty';
	
	module.exports = Empty;

/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _translation = __webpack_require__(142);
	
	var _collection = __webpack_require__(529);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Action on the topic click.
	* @param  {String} key  topic key
	* @return {Function}     Click handler
	*/
	function topicClickHandler(key, topicClickAction) {
	    topicClickAction(key);
	}
	
	// Components
	
	
	function TopicDisplayer(_ref) {
	    var displayLabels = _ref.displayLabels,
	        topicList = _ref.topicList,
	        topicClickAction = _ref.topicClickAction;
	
	    return _react2.default.createElement(
	        'div',
	        { 'data-focus': 'topic-displayer' },
	        (0, _collection.map)(topicList, function (topic, key) {
	            var text = displayLabels ? (0, _translation.translate)(topic.label) + ': ' + (0, _translation.translate)(topic.value) : (0, _translation.translate)(topic.value);
	            return _react2.default.createElement(_button2.default, {
	                handleOnClick: function handleOnClick() {
	                    topicClickHandler(key, topicClickAction);
	                },
	                icon: 'clear',
	                key: key,
	                label: text
	            });
	        })
	    );
	}
	
	TopicDisplayer.displayName = 'TopicDisplayer';
	TopicDisplayer.defaultProps = {
	    style: undefined, // Component css style.
	    topicClickAction: function topicClickAction() {},
	    // Action when click on topic
	    topicList: {}, // {topic1: "Label of topic one", topic2:"Label of topic 2"} List f topics,
	    displayLabels: false
	};
	
	exports.default = TopicDisplayer;
	module.exports = exports['default'];

/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsCssTransitionGroup = __webpack_require__(614);
	
	var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } //dependencies
	
	
	var propTypes = {
	    //If you want to use a custom css class
	    // for each transion step, set this prop to TRUE.
	    customClasses: _react.PropTypes.bool,
	    // to enable transition
	    appear: _react.PropTypes.bool,
	    enter: _react.PropTypes.bool,
	    leave: _react.PropTypes.bool,
	
	    // Transition duration
	    appearTimeout: _react.PropTypes.number,
	    enterTimeout: _react.PropTypes.number,
	    leaveTimeout: _react.PropTypes.number,
	
	    // Transition css className.
	    appearName: _react.PropTypes.string,
	    appearActiveName: _react.PropTypes.string,
	    enterName: _react.PropTypes.string,
	    enterActiveName: _react.PropTypes.string,
	    leaveName: _react.PropTypes.string,
	    leaveActiveName: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string
	};
	
	var defaultProps = {
	    customClasses: true,
	
	    appear: true,
	    enter: true,
	    leave: true,
	
	    appearTimeout: 500,
	    enterTimeout: 500,
	    leaveTimeout: 500,
	
	    appearName: 'bounce',
	    appearActiveName: 'bounce',
	    enterName: 'bounce',
	    enterActiveName: 'bounce',
	    leaveName: 'bounceOut',
	    leaveActiveName: 'bounceOut'
	};
	
	function Animation(_ref) {
	    var customClasses = _ref.customClasses,
	        appear = _ref.appear,
	        enter = _ref.enter,
	        leave = _ref.leave,
	        appearName = _ref.appearName,
	        appearActiveName = _ref.appearActiveName,
	        enterName = _ref.enterName,
	        enterActiveName = _ref.enterActiveName,
	        leaveName = _ref.leaveName,
	        leaveActiveName = _ref.leaveActiveName,
	        appearTimeout = _ref.appearTimeout,
	        enterTimeout = _ref.enterTimeout,
	        leaveTimeout = _ref.leaveTimeout,
	        transitionName = _ref.transitionName,
	        otherProps = _objectWithoutProperties(_ref, ['customClasses', 'appear', 'enter', 'leave', 'appearName', 'appearActiveName', 'enterName', 'enterActiveName', 'leaveName', 'leaveActiveName', 'appearTimeout', 'enterTimeout', 'leaveTimeout', 'transitionName']);
	
	    var transitionClassName = transitionName;
	    if (true === customClasses) {
	        transitionClassName = {
	            appear: appearName,
	            appearActive: appearActiveName,
	            enter: enterName,
	            enterActive: enterActiveName,
	            leave: leaveName,
	            leaveActive: leaveActiveName
	        };
	    }
	    return _react2.default.createElement(
	        _reactAddonsCssTransitionGroup2.default,
	        {
	            transitionAppear: appear,
	            transitionAppearTimeout: enter,
	            transitionEnter: leave,
	            transitionEnterTimeout: appearTimeout,
	            transitionLeave: enterTimeout,
	            transitionLeaveTimeout: leaveTimeout,
	            transitionName: transitionClassName
	        },
	        _react2.default.createElement(
	            'div',
	            { className: 'animated' },
	            otherProps.children
	        )
	    );
	}
	
	//Static props.
	Animation.displayName = 'animation';
	Animation.defaultProps = defaultProps;
	Animation.propTypes = propTypes;
	
	exports.default = Animation;
	module.exports = exports['default'];

/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(615);

/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(616);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(617);
	var propTypesFactory = __webpack_require__(644);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var ReactTransitionGroup = __webpack_require__(650);
	var ReactCSSTransitionGroupChild = __webpack_require__(653);
	
	function createTransitionTimeoutPropValidator(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;
	
	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');
	
	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	      }
	    }
	  };
	}
	
	/**
	 * An easy way to perform CSS transitions and animations when a React component
	 * enters or leaves the DOM.
	 * See https://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup
	 */
	
	var ReactCSSTransitionGroup = function (_React$Component) {
	  _inherits(ReactCSSTransitionGroup, _React$Component);
	
	  function ReactCSSTransitionGroup() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, ReactCSSTransitionGroup);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._wrapChild = function (child) {
	      // We need to provide this childFactory so that
	      // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	      // leave while it is leaving.
	      return React.createElement(ReactCSSTransitionGroupChild, {
	        name: _this.props.transitionName,
	        appear: _this.props.transitionAppear,
	        enter: _this.props.transitionEnter,
	        leave: _this.props.transitionLeave,
	        appearTimeout: _this.props.transitionAppearTimeout,
	        enterTimeout: _this.props.transitionEnterTimeout,
	        leaveTimeout: _this.props.transitionLeaveTimeout
	      }, child);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  ReactCSSTransitionGroup.prototype.render = function render() {
	    return React.createElement(ReactTransitionGroup, _assign({}, this.props, { childFactory: this._wrapChild }));
	  };
	
	  return ReactCSSTransitionGroup;
	}(React.Component);
	
	ReactCSSTransitionGroup.displayName = 'ReactCSSTransitionGroup';
	ReactCSSTransitionGroup.propTypes = {
	  transitionName: ReactCSSTransitionGroupChild.propTypes.name,
	
	  transitionAppear: PropTypes.bool,
	  transitionEnter: PropTypes.bool,
	  transitionLeave: PropTypes.bool,
	  transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
	  transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
	  transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
	};
	ReactCSSTransitionGroup.defaultProps = {
	  transitionAppear: false,
	  transitionEnter: true,
	  transitionLeave: true
	};
	
	
	module.exports = ReactCSSTransitionGroup;

/***/ }),
/* 616 */
440,
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(616);
	
	var ReactChildren = __webpack_require__(619);
	var ReactComponent = __webpack_require__(632);
	var ReactPureComponent = __webpack_require__(635);
	var ReactClass = __webpack_require__(636);
	var ReactDOMFactories = __webpack_require__(638);
	var ReactElement = __webpack_require__(623);
	var ReactPropTypes = __webpack_require__(643);
	var ReactVersion = __webpack_require__(648);
	
	var onlyChild = __webpack_require__(649);
	var warning = __webpack_require__(625);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  var canDefineProperty = __webpack_require__(627);
	  var ReactElementValidator = __webpack_require__(639);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	// TODO: Fix tests so that this deprecation warning doesn't cause failures.
	if (process.env.NODE_ENV !== 'production') {
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 618 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(620);
	var ReactElement = __webpack_require__(623);
	
	var emptyFunction = __webpack_require__(626);
	var traverseAllChildren = __webpack_require__(629);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ }),
/* 620 */
[937, 621],
/* 621 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(616);
	
	var ReactCurrentOwner = __webpack_require__(624);
	
	var warning = __webpack_require__(625);
	var canDefineProperty = __webpack_require__(627);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(628);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 624 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(626);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 626 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 628 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(621);
	
	var ReactCurrentOwner = __webpack_require__(624);
	var REACT_ELEMENT_TYPE = __webpack_require__(628);
	
	var getIteratorFn = __webpack_require__(630);
	var invariant = __webpack_require__(622);
	var KeyEscapeUtils = __webpack_require__(631);
	var warning = __webpack_require__(625);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 630 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ }),
/* 631 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(621);
	
	var ReactNoopUpdateQueue = __webpack_require__(633);
	
	var canDefineProperty = __webpack_require__(627);
	var emptyObject = __webpack_require__(634);
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(625);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(616);
	
	var ReactComponent = __webpack_require__(632);
	var ReactNoopUpdateQueue = __webpack_require__(633);
	
	var emptyObject = __webpack_require__(634);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(621),
	    _assign = __webpack_require__(616);
	
	var ReactComponent = __webpack_require__(632);
	var ReactElement = __webpack_require__(623);
	var ReactPropTypeLocationNames = __webpack_require__(637);
	var ReactNoopUpdateQueue = __webpack_require__(633);
	
	var emptyObject = __webpack_require__(634);
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	var didWarnDeprecated = false;
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
	      didWarnDeprecated = true;
	    }
	
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(623);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(639);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(624);
	var ReactComponentTreeHook = __webpack_require__(640);
	var ReactElement = __webpack_require__(623);
	
	var checkReactTypeSpec = __webpack_require__(641);
	
	var canDefineProperty = __webpack_require__(627);
	var getIteratorFn = __webpack_require__(630);
	var warning = __webpack_require__(625);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	
	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }
	
	        info += ReactComponentTreeHook.getCurrentStackAddendum();
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(621);
	
	var ReactCurrentOwner = __webpack_require__(624);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(621);
	
	var ReactPropTypeLocationNames = __webpack_require__(637);
	var ReactPropTypesSecret = __webpack_require__(642);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(640);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(640);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 642 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _require = __webpack_require__(623),
	    isValidElement = _require.isValidElement;
	
	var factory = __webpack_require__(644);
	
	module.exports = factory(isValidElement);

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(645);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(626);
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var ReactPropTypesSecret = __webpack_require__(646);
	var checkPropTypes = __webpack_require__(647);
	
	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(
	          false,
	          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction.thatReturnsNull;
	      }
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 646 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(622);
	  var warning = __webpack_require__(625);
	  var ReactPropTypesSecret = __webpack_require__(646);
	  var loggedTypeFailures = {};
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 648 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.5.4';

/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(621);
	
	var ReactElement = __webpack_require__(623);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(616);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(617);
	var ReactTransitionChildMapping = __webpack_require__(651);
	
	var propTypesFactory = __webpack_require__(644);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var emptyFunction = __webpack_require__(626);
	
	/**
	 * A basis for animations. When children are declaratively added or removed,
	 * special lifecycle hooks are called.
	 * See https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup
	 */
	
	var ReactTransitionGroup = function (_React$Component) {
	  _inherits(ReactTransitionGroup, _React$Component);
	
	  function ReactTransitionGroup() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, ReactTransitionGroup);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      // TODO: can we get useful debug information to show at this point?
	      children: ReactTransitionChildMapping.getChildMapping(_this.props.children)
	    }, _this.performAppear = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      var component = _this.refs[key];
	
	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key));
	      } else {
	        _this._handleDoneAppearing(key);
	      }
	    }, _this._handleDoneAppearing = function (key) {
	      var component = _this.refs[key];
	      if (component.componentDidAppear) {
	        component.componentDidAppear();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children);
	
	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key);
	      }
	    }, _this.performEnter = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      var component = _this.refs[key];
	
	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key));
	      } else {
	        _this._handleDoneEntering(key);
	      }
	    }, _this._handleDoneEntering = function (key) {
	      var component = _this.refs[key];
	      if (component.componentDidEnter) {
	        component.componentDidEnter();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children);
	
	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key);
	      }
	    }, _this.performLeave = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      var component = _this.refs[key];
	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key);
	      }
	    }, _this._handleDoneLeaving = function (key) {
	      var component = _this.refs[key];
	
	      if (component.componentDidLeave) {
	        component.componentDidLeave();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = ReactTransitionChildMapping.getChildMapping(_this.props.children);
	
	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.performEnter(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _assign({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  ReactTransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };
	
	  ReactTransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  };
	
	  ReactTransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
	    var prevChildMapping = this.state.children;
	
	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
	    });
	
	    var key;
	
	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }
	
	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }
	
	    // If we want to someday check for reordering, we could do it here.
	  };
	
	  ReactTransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };
	
	  ReactTransitionGroup.prototype.render = function render() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
	      }
	    }
	
	    // Do not forward ReactTransitionGroup props to primitive DOM nodes
	    var props = _assign({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;
	
	    return React.createElement(this.props.component, props, childrenToRender);
	  };
	
	  return ReactTransitionGroup;
	}(React.Component);
	
	ReactTransitionGroup.displayName = 'ReactTransitionGroup';
	ReactTransitionGroup.propTypes = {
	  component: PropTypes.any,
	  childFactory: PropTypes.func
	};
	ReactTransitionGroup.defaultProps = {
	  component: 'span',
	  childFactory: emptyFunction.thatReturnsArgument
	};
	
	
	module.exports = ReactTransitionGroup;

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var flattenChildren = __webpack_require__(652);
	
	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around flattenChildren().
	   *
	   * @param {*} children `this.props.children`
	   * @param {number=} selfDebugID Optional debugID of the current internal instance.
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function (children, selfDebugID) {
	    if (!children) {
	      return children;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      return flattenChildren(children, selfDebugID);
	    }
	
	    return flattenChildren(children);
	  },
	
	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function (prev, next) {
	    prev = prev || {};
	    next = next || {};
	
	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }
	
	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};
	
	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }
	
	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }
	
	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }
	
	    return childMapping;
	  }
	};
	
	module.exports = ReactTransitionChildMapping;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(631);
	var traverseAllChildren = __webpack_require__(629);
	var warning = __webpack_require__(625);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(640);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(640);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(617);
	var ReactAddonsDOMDependencies = __webpack_require__(654);
	
	var propTypesFactory = __webpack_require__(644);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var CSSCore = __webpack_require__(805);
	var ReactTransitionEvents = __webpack_require__(806);
	
	var onlyChild = __webpack_require__(649);
	
	var TICK = 17;
	
	var ReactCSSTransitionGroupChild = function (_React$Component) {
	  _inherits(ReactCSSTransitionGroupChild, _React$Component);
	
	  function ReactCSSTransitionGroupChild() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, ReactCSSTransitionGroupChild);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._isMounted = false, _this.transition = function (animationType, finishCallback, userSpecifiedDelay) {
	      var node = ReactAddonsDOMDependencies.getReactDOM().findDOMNode(_this);
	
	      if (!node) {
	        if (finishCallback) {
	          finishCallback();
	        }
	        return;
	      }
	
	      var className = _this.props.name[animationType] || _this.props.name + '-' + animationType;
	      var activeClassName = _this.props.name[animationType + 'Active'] || className + '-active';
	      var timeout = null;
	
	      var endListener = function (e) {
	        if (e && e.target !== node) {
	          return;
	        }
	
	        clearTimeout(timeout);
	
	        CSSCore.removeClass(node, className);
	        CSSCore.removeClass(node, activeClassName);
	
	        ReactTransitionEvents.removeEndEventListener(node, endListener);
	
	        // Usually this optional callback is used for informing an owner of
	        // a leave animation and telling it to remove the child.
	        if (finishCallback) {
	          finishCallback();
	        }
	      };
	
	      CSSCore.addClass(node, className);
	
	      // Need to do this to actually trigger a transition.
	      _this.queueClassAndNode(activeClassName, node);
	
	      // If the user specified a timeout delay.
	      if (userSpecifiedDelay) {
	        // Clean-up the animation after the specified delay
	        timeout = setTimeout(endListener, userSpecifiedDelay);
	        _this.transitionTimeouts.push(timeout);
	      } else {
	        // DEPRECATED: this listener will be removed in a future version of react
	        ReactTransitionEvents.addEndEventListener(node, endListener);
	      }
	    }, _this.queueClassAndNode = function (className, node) {
	      _this.classNameAndNodeQueue.push({
	        className: className,
	        node: node
	      });
	
	      if (!_this.timeout) {
	        _this.timeout = setTimeout(_this.flushClassNameAndNodeQueue, TICK);
	      }
	    }, _this.flushClassNameAndNodeQueue = function () {
	      if (_this._isMounted) {
	        _this.classNameAndNodeQueue.forEach(function (obj) {
	          CSSCore.addClass(obj.node, obj.className);
	        });
	      }
	      _this.classNameAndNodeQueue.length = 0;
	      _this.timeout = null;
	    }, _this.componentWillAppear = function (done) {
	      if (_this.props.appear) {
	        _this.transition('appear', done, _this.props.appearTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillEnter = function (done) {
	      if (_this.props.enter) {
	        _this.transition('enter', done, _this.props.enterTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillLeave = function (done) {
	      if (_this.props.leave) {
	        _this.transition('leave', done, _this.props.leaveTimeout);
	      } else {
	        done();
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  ReactCSSTransitionGroupChild.prototype.componentWillMount = function componentWillMount() {
	    this.classNameAndNodeQueue = [];
	    this.transitionTimeouts = [];
	  };
	
	  ReactCSSTransitionGroupChild.prototype.componentDidMount = function componentDidMount() {
	    this._isMounted = true;
	  };
	
	  ReactCSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._isMounted = false;
	
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	    this.transitionTimeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });
	
	    this.classNameAndNodeQueue.length = 0;
	  };
	
	  ReactCSSTransitionGroupChild.prototype.render = function render() {
	    return onlyChild(this.props.children);
	  };
	
	  return ReactCSSTransitionGroupChild;
	}(React.Component);
	
	ReactCSSTransitionGroupChild.propTypes = {
	  name: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
	    enter: PropTypes.string,
	    leave: PropTypes.string,
	    active: PropTypes.string
	  }), PropTypes.shape({
	    enter: PropTypes.string,
	    enterActive: PropTypes.string,
	    leave: PropTypes.string,
	    leaveActive: PropTypes.string,
	    appear: PropTypes.string,
	    appearActive: PropTypes.string
	  })]).isRequired,
	
	  // Once we require timeouts to be specified, we can remove the
	  // boolean flags (appear etc.) and just accept a number
	  // or a bool for the timeout flags (appearTimeout etc.)
	  appear: PropTypes.bool,
	  enter: PropTypes.bool,
	  leave: PropTypes.bool,
	  appearTimeout: PropTypes.number,
	  enterTimeout: PropTypes.number,
	  leaveTimeout: PropTypes.number
	};
	
	
	module.exports = ReactCSSTransitionGroupChild;

/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOM = __webpack_require__(655);
	
	exports.getReactDOM = function () {
	  return ReactDOM;
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactPerf;
	  var ReactTestUtils;
	
	  exports.getReactPerf = function () {
	    if (!ReactPerf) {
	      ReactPerf = __webpack_require__(801);
	    }
	    return ReactPerf;
	  };
	
	  exports.getReactTestUtils = function () {
	    if (!ReactTestUtils) {
	      ReactTestUtils = __webpack_require__(802);
	    }
	    return ReactTestUtils;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactDefaultInjection = __webpack_require__(660);
	var ReactMount = __webpack_require__(789);
	var ReactReconciler = __webpack_require__(682);
	var ReactUpdates = __webpack_require__(679);
	var ReactVersion = __webpack_require__(794);
	
	var findDOMNode = __webpack_require__(795);
	var getHostComponentFromComposite = __webpack_require__(796);
	var renderSubtreeIntoContainer = __webpack_require__(797);
	var warning = __webpack_require__(625);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(670);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(685);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(798);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(799);
	  var ReactDOMInvalidARIAHook = __webpack_require__(800);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var DOMProperty = __webpack_require__(658);
	var ReactDOMComponentFlags = __webpack_require__(659);
	
	var invariant = __webpack_require__(622);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 657 */
621,
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 659 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(661);
	var BeforeInputEventPlugin = __webpack_require__(662);
	var ChangeEventPlugin = __webpack_require__(678);
	var DefaultEventPluginOrder = __webpack_require__(695);
	var EnterLeaveEventPlugin = __webpack_require__(696);
	var HTMLDOMPropertyConfig = __webpack_require__(701);
	var ReactComponentBrowserEnvironment = __webpack_require__(702);
	var ReactDOMComponent = __webpack_require__(715);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactDOMEmptyComponent = __webpack_require__(760);
	var ReactDOMTreeTraversal = __webpack_require__(761);
	var ReactDOMTextComponent = __webpack_require__(762);
	var ReactDefaultBatchingStrategy = __webpack_require__(763);
	var ReactEventListener = __webpack_require__(764);
	var ReactInjection = __webpack_require__(767);
	var ReactReconcileTransaction = __webpack_require__(768);
	var SVGDOMPropertyConfig = __webpack_require__(776);
	var SelectEventPlugin = __webpack_require__(777);
	var SimpleEventPlugin = __webpack_require__(778);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ }),
/* 661 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(663);
	var ExecutionEnvironment = __webpack_require__(670);
	var FallbackCompositionState = __webpack_require__(671);
	var SyntheticCompositionEvent = __webpack_require__(675);
	var SyntheticInputEvent = __webpack_require__(677);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(664);
	var EventPluginUtils = __webpack_require__(666);
	
	var accumulateInto = __webpack_require__(668);
	var forEachAccumulated = __webpack_require__(669);
	var warning = __webpack_require__(625);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var EventPluginRegistry = __webpack_require__(665);
	var EventPluginUtils = __webpack_require__(666);
	var ReactErrorUtils = __webpack_require__(667);
	
	var accumulateInto = __webpack_require__(668);
	var forEachAccumulated = __webpack_require__(669);
	var invariant = __webpack_require__(622);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactErrorUtils = __webpack_require__(667);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 669 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ }),
/* 670 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var PooledClass = __webpack_require__(673);
	
	var getTextContentAccessor = __webpack_require__(674);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ }),
/* 672 */
440,
/* 673 */
[937, 657],
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(676);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var PooledClass = __webpack_require__(673);
	
	var emptyFunction = __webpack_require__(626);
	var warning = __webpack_require__(625);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(676);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(664);
	var EventPropagators = __webpack_require__(663);
	var ExecutionEnvironment = __webpack_require__(670);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactUpdates = __webpack_require__(679);
	var SyntheticEvent = __webpack_require__(676);
	
	var getEventTarget = __webpack_require__(692);
	var isEventSupported = __webpack_require__(693);
	var isTextInputElement = __webpack_require__(694);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }
	
	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;
	
	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }
	
	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	
	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var CallbackQueue = __webpack_require__(680);
	var PooledClass = __webpack_require__(673);
	var ReactFeatureFlags = __webpack_require__(681);
	var ReactReconciler = __webpack_require__(682);
	var Transaction = __webpack_require__(691);
	
	var invariant = __webpack_require__(622);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(673);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 681 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(683);
	var ReactInstrumentation = __webpack_require__(685);
	
	var warning = __webpack_require__(625);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(684);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(686);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(687);
	var ReactHostOperationHistoryHook = __webpack_require__(688);
	var ReactComponentTreeHook = __webpack_require__(640);
	var ExecutionEnvironment = __webpack_require__(670);
	
	var performanceNow = __webpack_require__(689);
	var warning = __webpack_require__(625);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(625);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 688 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(690);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 692 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ }),
/* 694 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ }),
/* 695 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(663);
	var ReactDOMComponentTree = __webpack_require__(656);
	var SyntheticMouseEvent = __webpack_require__(697);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(698);
	var ViewportMetrics = __webpack_require__(699);
	
	var getEventModifierState = __webpack_require__(700);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(676);
	
	var getEventTarget = __webpack_require__(692);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ }),
/* 699 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ }),
/* 700 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(658);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }
	
	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(703);
	var ReactDOMIDOperations = __webpack_require__(714);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(704);
	var Danger = __webpack_require__(710);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactInstrumentation = __webpack_require__(685);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(707);
	var setInnerHTML = __webpack_require__(706);
	var setTextContent = __webpack_require__(708);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(705);
	var setInnerHTML = __webpack_require__(706);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(707);
	var setTextContent = __webpack_require__(708);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ }),
/* 705 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	var DOMNamespaces = __webpack_require__(705);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(707);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ }),
/* 707 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	var escapeTextContentForBrowser = __webpack_require__(709);
	var setInnerHTML = __webpack_require__(706);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ }),
/* 709 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var DOMLazyTree = __webpack_require__(704);
	var ExecutionEnvironment = __webpack_require__(670);
	
	var createNodesFromMarkup = __webpack_require__(711);
	var emptyFunction = __webpack_require__(626);
	var invariant = __webpack_require__(622);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var createArrayFromMixed = __webpack_require__(712);
	var getMarkupWrap = __webpack_require__(713);
	var invariant = __webpack_require__(622);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(703);
	var ReactDOMComponentTree = __webpack_require__(656);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var AutoFocusUtils = __webpack_require__(716);
	var CSSPropertyOperations = __webpack_require__(718);
	var DOMLazyTree = __webpack_require__(704);
	var DOMNamespaces = __webpack_require__(705);
	var DOMProperty = __webpack_require__(658);
	var DOMPropertyOperations = __webpack_require__(726);
	var EventPluginHub = __webpack_require__(664);
	var EventPluginRegistry = __webpack_require__(665);
	var ReactBrowserEventEmitter = __webpack_require__(728);
	var ReactDOMComponentFlags = __webpack_require__(659);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactDOMInput = __webpack_require__(731);
	var ReactDOMOption = __webpack_require__(734);
	var ReactDOMSelect = __webpack_require__(735);
	var ReactDOMTextarea = __webpack_require__(736);
	var ReactInstrumentation = __webpack_require__(685);
	var ReactMultiChild = __webpack_require__(737);
	var ReactServerRenderingTransaction = __webpack_require__(756);
	
	var emptyFunction = __webpack_require__(626);
	var escapeTextContentForBrowser = __webpack_require__(709);
	var invariant = __webpack_require__(622);
	var isEventSupported = __webpack_require__(693);
	var shallowEqual = __webpack_require__(746);
	var validateDOMNesting = __webpack_require__(759);
	var warning = __webpack_require__(625);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(656);
	
	var focusNode = __webpack_require__(717);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ }),
/* 717 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(719);
	var ExecutionEnvironment = __webpack_require__(670);
	var ReactInstrumentation = __webpack_require__(685);
	
	var camelizeStyleName = __webpack_require__(720);
	var dangerousStyleValue = __webpack_require__(722);
	var hyphenateStyleName = __webpack_require__(723);
	var memoizeStringOnly = __webpack_require__(725);
	var warning = __webpack_require__(625);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 719 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(721);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ }),
/* 721 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(719);
	var warning = __webpack_require__(625);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(724);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ }),
/* 724 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ }),
/* 725 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(658);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactInstrumentation = __webpack_require__(685);
	
	var quoteAttributeValueForBrowser = __webpack_require__(727);
	var warning = __webpack_require__(625);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(709);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var EventPluginRegistry = __webpack_require__(665);
	var ReactEventEmitterMixin = __webpack_require__(729);
	var ViewportMetrics = __webpack_require__(699);
	
	var getVendorPrefixedEventName = __webpack_require__(730);
	var isEventSupported = __webpack_require__(693);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(664);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var DOMPropertyOperations = __webpack_require__(726);
	var LinkedValueUtils = __webpack_require__(732);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactUpdates = __webpack_require__(679);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;
	
	        // eslint-disable-next-line
	        if (value != valueAsNumber) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	        // eslint-disable-next-line
	      } else if (value != node.value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactPropTypesSecret = __webpack_require__(733);
	var propTypesFactory = __webpack_require__(644);
	
	var React = __webpack_require__(617);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 733 */
642,
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var React = __webpack_require__(617);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactDOMSelect = __webpack_require__(735);
	
	var warning = __webpack_require__(625);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var LinkedValueUtils = __webpack_require__(732);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactUpdates = __webpack_require__(679);
	
	var warning = __webpack_require__(625);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var LinkedValueUtils = __webpack_require__(732);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactUpdates = __webpack_require__(679);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;
	
	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactComponentEnvironment = __webpack_require__(738);
	var ReactInstanceMap = __webpack_require__(739);
	var ReactInstrumentation = __webpack_require__(685);
	
	var ReactCurrentOwner = __webpack_require__(624);
	var ReactReconciler = __webpack_require__(682);
	var ReactChildReconciler = __webpack_require__(740);
	
	var emptyFunction = __webpack_require__(626);
	var flattenChildren = __webpack_require__(755);
	var invariant = __webpack_require__(622);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 739 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(682);
	
	var instantiateReactComponent = __webpack_require__(741);
	var KeyEscapeUtils = __webpack_require__(751);
	var shouldUpdateReactComponent = __webpack_require__(747);
	var traverseAllChildren = __webpack_require__(752);
	var warning = __webpack_require__(625);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(640);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(640);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var ReactCompositeComponent = __webpack_require__(742);
	var ReactEmptyComponent = __webpack_require__(748);
	var ReactHostComponent = __webpack_require__(749);
	
	var getNextDebugID = __webpack_require__(750);
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var React = __webpack_require__(617);
	var ReactComponentEnvironment = __webpack_require__(738);
	var ReactCurrentOwner = __webpack_require__(624);
	var ReactErrorUtils = __webpack_require__(667);
	var ReactInstanceMap = __webpack_require__(739);
	var ReactInstrumentation = __webpack_require__(685);
	var ReactNodeTypes = __webpack_require__(743);
	var ReactReconciler = __webpack_require__(682);
	
	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(744);
	}
	
	var emptyObject = __webpack_require__(634);
	var invariant = __webpack_require__(622);
	var shallowEqual = __webpack_require__(746);
	var shouldUpdateReactComponent = __webpack_require__(747);
	var warning = __webpack_require__(625);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var React = __webpack_require__(617);
	
	var invariant = __webpack_require__(622);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactPropTypeLocationNames = __webpack_require__(745);
	var ReactPropTypesSecret = __webpack_require__(733);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(640);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(640);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 745 */
637,
/* 746 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ }),
/* 747 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 748 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	var genericComponentClass = null;
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 750 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ }),
/* 751 */
631,
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactCurrentOwner = __webpack_require__(624);
	var REACT_ELEMENT_TYPE = __webpack_require__(753);
	
	var getIteratorFn = __webpack_require__(754);
	var invariant = __webpack_require__(622);
	var KeyEscapeUtils = __webpack_require__(751);
	var warning = __webpack_require__(625);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 753 */
628,
/* 754 */
630,
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(751);
	var traverseAllChildren = __webpack_require__(752);
	var warning = __webpack_require__(625);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(640);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(640);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var PooledClass = __webpack_require__(673);
	var Transaction = __webpack_require__(691);
	var ReactInstrumentation = __webpack_require__(685);
	var ReactServerUpdateQueue = __webpack_require__(757);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(758);
	
	var warning = __webpack_require__(625);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactCurrentOwner = __webpack_require__(624);
	var ReactInstanceMap = __webpack_require__(739);
	var ReactInstrumentation = __webpack_require__(685);
	var ReactUpdates = __webpack_require__(679);
	
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var emptyFunction = __webpack_require__(626);
	var warning = __webpack_require__(625);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var DOMLazyTree = __webpack_require__(704);
	var ReactDOMComponentTree = __webpack_require__(656);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var DOMChildrenOperations = __webpack_require__(703);
	var DOMLazyTree = __webpack_require__(704);
	var ReactDOMComponentTree = __webpack_require__(656);
	
	var escapeTextContentForBrowser = __webpack_require__(709);
	var invariant = __webpack_require__(622);
	var validateDOMNesting = __webpack_require__(759);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var ReactUpdates = __webpack_require__(679);
	var Transaction = __webpack_require__(691);
	
	var emptyFunction = __webpack_require__(626);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var EventListener = __webpack_require__(765);
	var ExecutionEnvironment = __webpack_require__(670);
	var PooledClass = __webpack_require__(673);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactUpdates = __webpack_require__(679);
	
	var getEventTarget = __webpack_require__(692);
	var getUnboundedScrollPosition = __webpack_require__(766);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(626);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 766 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(658);
	var EventPluginHub = __webpack_require__(664);
	var EventPluginUtils = __webpack_require__(666);
	var ReactComponentEnvironment = __webpack_require__(738);
	var ReactEmptyComponent = __webpack_require__(748);
	var ReactBrowserEventEmitter = __webpack_require__(728);
	var ReactHostComponent = __webpack_require__(749);
	var ReactUpdates = __webpack_require__(679);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var CallbackQueue = __webpack_require__(680);
	var PooledClass = __webpack_require__(673);
	var ReactBrowserEventEmitter = __webpack_require__(728);
	var ReactInputSelection = __webpack_require__(769);
	var ReactInstrumentation = __webpack_require__(685);
	var Transaction = __webpack_require__(691);
	var ReactUpdateQueue = __webpack_require__(758);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(770);
	
	var containsNode = __webpack_require__(772);
	var focusNode = __webpack_require__(717);
	var getActiveElement = __webpack_require__(775);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var getNodeForCharacterOffset = __webpack_require__(771);
	var getTextContentAccessor = __webpack_require__(674);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ }),
/* 771 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(773);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(774);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ }),
/* 774 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ }),
/* 775 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ }),
/* 776 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(663);
	var ExecutionEnvironment = __webpack_require__(670);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactInputSelection = __webpack_require__(769);
	var SyntheticEvent = __webpack_require__(676);
	
	var getActiveElement = __webpack_require__(775);
	var isTextInputElement = __webpack_require__(694);
	var shallowEqual = __webpack_require__(746);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var EventListener = __webpack_require__(765);
	var EventPropagators = __webpack_require__(663);
	var ReactDOMComponentTree = __webpack_require__(656);
	var SyntheticAnimationEvent = __webpack_require__(779);
	var SyntheticClipboardEvent = __webpack_require__(780);
	var SyntheticEvent = __webpack_require__(676);
	var SyntheticFocusEvent = __webpack_require__(781);
	var SyntheticKeyboardEvent = __webpack_require__(782);
	var SyntheticMouseEvent = __webpack_require__(697);
	var SyntheticDragEvent = __webpack_require__(785);
	var SyntheticTouchEvent = __webpack_require__(786);
	var SyntheticTransitionEvent = __webpack_require__(787);
	var SyntheticUIEvent = __webpack_require__(698);
	var SyntheticWheelEvent = __webpack_require__(788);
	
	var emptyFunction = __webpack_require__(626);
	var getEventCharCode = __webpack_require__(783);
	var invariant = __webpack_require__(622);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 779 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(676);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(676);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(698);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(698);
	
	var getEventCharCode = __webpack_require__(783);
	var getEventKey = __webpack_require__(784);
	var getEventModifierState = __webpack_require__(700);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 783 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(783);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(697);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(698);
	
	var getEventModifierState = __webpack_require__(700);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(676);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(697);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var DOMLazyTree = __webpack_require__(704);
	var DOMProperty = __webpack_require__(658);
	var React = __webpack_require__(617);
	var ReactBrowserEventEmitter = __webpack_require__(728);
	var ReactCurrentOwner = __webpack_require__(624);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactDOMContainerInfo = __webpack_require__(790);
	var ReactDOMFeatureFlags = __webpack_require__(791);
	var ReactFeatureFlags = __webpack_require__(681);
	var ReactInstanceMap = __webpack_require__(739);
	var ReactInstrumentation = __webpack_require__(685);
	var ReactMarkupChecksum = __webpack_require__(792);
	var ReactReconciler = __webpack_require__(682);
	var ReactUpdateQueue = __webpack_require__(758);
	var ReactUpdates = __webpack_require__(679);
	
	var emptyObject = __webpack_require__(634);
	var instantiateReactComponent = __webpack_require__(741);
	var invariant = __webpack_require__(622);
	var setInnerHTML = __webpack_require__(706);
	var shouldUpdateReactComponent = __webpack_require__(747);
	var warning = __webpack_require__(625);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(759);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 791 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 792 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(793);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ }),
/* 793 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ }),
/* 794 */
648,
/* 795 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657);
	
	var ReactCurrentOwner = __webpack_require__(624);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactInstanceMap = __webpack_require__(739);
	
	var getHostComponentFromComposite = __webpack_require__(796);
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 796 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(743);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ }),
/* 797 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(789);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(658);
	var EventPluginRegistry = __webpack_require__(665);
	var ReactComponentTreeHook = __webpack_require__(640);
	
	var warning = __webpack_require__(625);
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 799 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(640);
	
	var warning = __webpack_require__(625);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(658);
	var ReactComponentTreeHook = __webpack_require__(640);
	
	var warning = __webpack_require__(625);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 801 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(672);
	
	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var ReactDebugTool = __webpack_require__(686);
	var warning = __webpack_require__(625);
	var alreadyWarned = false;
	
	function roundFloat(val) {
	  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
	
	  var n = Math.pow(10, base);
	  return Math.floor(val * n) / n;
	}
	
	// Flow type definition of console.table is too strict right now, see
	// https://github.com/facebook/flow/pull/2353 for updates
	function consoleTable(table) {
	  console.table(table);
	}
	
	function warnInProduction() {
	  if (alreadyWarned) {
	    return;
	  }
	  alreadyWarned = true;
	  if (typeof console !== 'undefined') {
	    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
	  }
	}
	
	function getLastMeasurements() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }
	
	  return ReactDebugTool.getFlushHistory();
	}
	
	function getExclusive() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }
	
	  var aggregatedStats = {};
	  var affectedIDs = {};
	
	  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
	    var displayName = treeSnapshot[instanceID].displayName;
	
	    var key = displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        counts: {},
	        durations: {},
	        totalDuration: 0
	      };
	    }
	    if (!stats.durations[timerType]) {
	      stats.durations[timerType] = 0;
	    }
	    if (!stats.counts[timerType]) {
	      stats.counts[timerType] = 0;
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }
	
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot;
	
	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
	        stats.totalDuration += duration;
	        stats.durations[timerType] += duration;
	        stats.counts[timerType]++;
	      });
	    });
	  });
	
	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.totalDuration - a.totalDuration;
	  });
	}
	
	function getInclusive() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }
	
	  var aggregatedStats = {};
	  var affectedIDs = {};
	
	  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
	    var _treeSnapshot$instanc = treeSnapshot[instanceID],
	        displayName = _treeSnapshot$instanc.displayName,
	        ownerID = _treeSnapshot$instanc.ownerID;
	
	    var owner = treeSnapshot[ownerID];
	    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        inclusiveRenderDuration: 0,
	        renderCount: 0
	      };
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }
	
	  var isCompositeByID = {};
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements;
	
	    measurements.forEach(function (measurement) {
	      var instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	      isCompositeByID[instanceID] = true;
	    });
	  });
	
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot;
	
	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
	        stats.renderCount++;
	      });
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        // As we traverse parents, only count inclusive time towards composites.
	        // We know something is a composite if its render() was called.
	        if (isCompositeByID[nextParentID]) {
	          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
	            stats.inclusiveRenderDuration += duration;
	          });
	        }
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	  });
	
	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
	  });
	}
	
	function getWasted() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }
	
	  var aggregatedStats = {};
	  var affectedIDs = {};
	
	  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
	    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
	        displayName = _treeSnapshot$instanc2.displayName,
	        ownerID = _treeSnapshot$instanc2.ownerID;
	
	    var owner = treeSnapshot[ownerID];
	    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        inclusiveRenderDuration: 0,
	        renderCount: 0
	      };
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }
	
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot,
	        operations = flush.operations;
	
	    var isDefinitelyNotWastedByID = {};
	
	    // Find host components associated with an operation in this batch.
	    // Mark all components in their parent tree as definitely not wasted.
	    operations.forEach(function (operation) {
	      var instanceID = operation.instanceID;
	
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        isDefinitelyNotWastedByID[nextParentID] = true;
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	
	    // Find composite components that rendered in this batch.
	    // These are potential candidates for being wasted renders.
	    var renderedCompositeIDs = {};
	    measurements.forEach(function (measurement) {
	      var instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	      renderedCompositeIDs[instanceID] = true;
	    });
	
	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	
	      // If there was a DOM update below this component, or it has just been
	      // mounted, its render() is not considered wasted.
	      var updateCount = treeSnapshot[instanceID].updateCount;
	
	      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
	        return;
	      }
	
	      // We consider this render() wasted.
	      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
	        stats.renderCount++;
	      });
	
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        // Any parents rendered during this batch are considered wasted
	        // unless we previously marked them as dirty.
	        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
	        if (isWasted) {
	          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
	            stats.inclusiveRenderDuration += duration;
	          });
	        }
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	  });
	
	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
	  });
	}
	
	function getOperations() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return [];
	  }
	
	  var stats = [];
	  flushHistory.forEach(function (flush, flushIndex) {
	    var operations = flush.operations,
	        treeSnapshot = flush.treeSnapshot;
	
	    operations.forEach(function (operation) {
	      var instanceID = operation.instanceID,
	          type = operation.type,
	          payload = operation.payload;
	      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
	          displayName = _treeSnapshot$instanc3.displayName,
	          ownerID = _treeSnapshot$instanc3.ownerID;
	
	      var owner = treeSnapshot[ownerID];
	      var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	
	      stats.push({
	        flushIndex: flushIndex,
	        instanceID: instanceID,
	        key: key,
	        type: type,
	        ownerID: ownerID,
	        payload: payload
	      });
	    });
	  });
	  return stats;
	}
	
	function printExclusive(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getExclusive(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        totalDuration = item.totalDuration;
	
	    var renderCount = item.counts.render || 0;
	    var renderDuration = item.durations.render || 0;
	    return {
	      'Component': key,
	      'Total time (ms)': roundFloat(totalDuration),
	      'Instance count': instanceCount,
	      'Total render time (ms)': roundFloat(renderDuration),
	      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
	      'Render count': renderCount,
	      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
	    };
	  });
	  consoleTable(table);
	}
	
	function printInclusive(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getInclusive(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        inclusiveRenderDuration = item.inclusiveRenderDuration,
	        renderCount = item.renderCount;
	
	    return {
	      'Owner > Component': key,
	      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
	      'Instance count': instanceCount,
	      'Render count': renderCount
	    };
	  });
	  consoleTable(table);
	}
	
	function printWasted(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getWasted(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        inclusiveRenderDuration = item.inclusiveRenderDuration,
	        renderCount = item.renderCount;
	
	    return {
	      'Owner > Component': key,
	      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
	      'Instance count': instanceCount,
	      'Render count': renderCount
	    };
	  });
	  consoleTable(table);
	}
	
	function printOperations(flushHistory) {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getOperations(flushHistory);
	  var table = stats.map(function (stat) {
	    return {
	      'Owner > Node': stat.key,
	      'Operation': stat.type,
	      'Payload': typeof stat.payload === 'object' ? JSON.stringify(stat.payload) : stat.payload,
	      'Flush index': stat.flushIndex,
	      'Owner Component ID': stat.ownerID,
	      'DOM Component ID': stat.instanceID
	    };
	  });
	  consoleTable(table);
	}
	
	var warnedAboutPrintDOM = false;
	function printDOM(measurements) {
	  process.env.NODE_ENV !== 'production' ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
	  warnedAboutPrintDOM = true;
	  return printOperations(measurements);
	}
	
	var warnedAboutGetMeasurementsSummaryMap = false;
	function getMeasurementsSummaryMap(measurements) {
	  process.env.NODE_ENV !== 'production' ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
	  warnedAboutGetMeasurementsSummaryMap = true;
	  return getWasted(measurements);
	}
	
	function start() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }
	
	  ReactDebugTool.beginProfiling();
	}
	
	function stop() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return;
	  }
	
	  ReactDebugTool.endProfiling();
	}
	
	function isRunning() {
	  if (!(process.env.NODE_ENV !== 'production')) {
	    warnInProduction();
	    return false;
	  }
	
	  return ReactDebugTool.isProfiling();
	}
	
	var ReactPerfAnalysis = {
	  getLastMeasurements: getLastMeasurements,
	  getExclusive: getExclusive,
	  getInclusive: getInclusive,
	  getWasted: getWasted,
	  getOperations: getOperations,
	  printExclusive: printExclusive,
	  printInclusive: printInclusive,
	  printWasted: printWasted,
	  printOperations: printOperations,
	  start: start,
	  stop: stop,
	  isRunning: isRunning,
	  // Deprecated:
	  printDOM: printDOM,
	  getMeasurementsSummaryMap: getMeasurementsSummaryMap
	};
	
	module.exports = ReactPerfAnalysis;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 802 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	var EventConstants = __webpack_require__(803);
	var EventPluginHub = __webpack_require__(664);
	var EventPluginRegistry = __webpack_require__(665);
	var EventPropagators = __webpack_require__(663);
	var React = __webpack_require__(617);
	var ReactDOM = __webpack_require__(655);
	var ReactDOMComponentTree = __webpack_require__(656);
	var ReactBrowserEventEmitter = __webpack_require__(728);
	var ReactInstanceMap = __webpack_require__(739);
	var ReactUpdates = __webpack_require__(679);
	var SyntheticEvent = __webpack_require__(676);
	var ReactShallowRenderer = __webpack_require__(804);
	
	var findDOMNode = __webpack_require__(795);
	var invariant = __webpack_require__(622);
	var warning = __webpack_require__(625);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function Event(suffix) {}
	
	// In react 16+ shallowRenderer will not be accessible via ReactTestUtils.createRenderer()
	// Instead it will be available via react-test-renderer/shallow
	// Maintain backwards compat for 15.5.0 release, but warn about using the deprecated method
	var hasWarnedAboutCreateRenderer = false;
	function createRendererWithWarning() {
	  process.env.NODE_ENV !== 'production' ? warning(hasWarnedAboutCreateRenderer, 'Shallow renderer has been moved to react-test-renderer/shallow. ' + 'Update references to remove this warning.') : void 0;
	  hasWarnedAboutCreateRenderer = true;
	
	  return new ReactShallowRenderer();
	}
	
	/**
	 * @class ReactTestUtils
	 */
	
	function findAllInRenderedTreeInternal(inst, test) {
	  if (!inst || !inst.getPublicInstance) {
	    return [];
	  }
	  var publicInst = inst.getPublicInstance();
	  var ret = test(publicInst) ? [publicInst] : [];
	  var currentElement = inst._currentElement;
	  if (ReactTestUtils.isDOMComponent(publicInst)) {
	    var renderedChildren = inst._renderedChildren;
	    var key;
	    for (key in renderedChildren) {
	      if (!renderedChildren.hasOwnProperty(key)) {
	        continue;
	      }
	      ret = ret.concat(findAllInRenderedTreeInternal(renderedChildren[key], test));
	    }
	  } else if (React.isValidElement(currentElement) && typeof currentElement.type === 'function') {
	    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));
	  }
	  return ret;
	}
	
	/**
	 * Utilities for making it easy to test React components.
	 *
	 * See https://facebook.github.io/react/docs/test-utils.html
	 *
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function (element) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return ReactDOM.render(element, div);
	  },
	
	  isElement: function (element) {
	    return React.isValidElement(element);
	  },
	
	  isElementOfType: function (inst, convenienceConstructor) {
	    return React.isValidElement(inst) && inst.type === convenienceConstructor;
	  },
	
	  isDOMComponent: function (inst) {
	    return !!(inst && inst.nodeType === 1 && inst.tagName);
	  },
	
	  isDOMComponentElement: function (inst) {
	    return !!(inst && React.isValidElement(inst) && !!inst.tagName);
	  },
	
	  isCompositeComponent: function (inst) {
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      // Accessing inst.setState warns; just return false as that'll be what
	      // this returns when we have DOM nodes as refs directly
	      return false;
	    }
	    return inst != null && typeof inst.render === 'function' && typeof inst.setState === 'function';
	  },
	
	  isCompositeComponentWithType: function (inst, type) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return false;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;
	
	    return constructor === type;
	  },
	
	  isCompositeComponentElement: function (inst) {
	    if (!React.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';
	  },
	
	  isCompositeComponentElementWithType: function (inst, type) {
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;
	
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) && constructor === type);
	  },
	
	  getRenderedChildOfCompositeComponent: function (inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },
	
	  findAllInRenderedTree: function (inst, test) {
	    if (!inst) {
	      return [];
	    }
	    !ReactTestUtils.isCompositeComponent(inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findAllInRenderedTree(...): instance must be a composite component') : _prodInvariant('10') : void 0;
	    return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);
	  },
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function (root, classNames) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      if (ReactTestUtils.isDOMComponent(inst)) {
	        var className = inst.className;
	        if (typeof className !== 'string') {
	          // SVG, probably.
	          className = inst.getAttribute('class') || '';
	        }
	        var classList = className.split(/\s+/);
	
	        if (!Array.isArray(classNames)) {
	          !(classNames !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TestUtils.scryRenderedDOMComponentsWithClass expects a className as a second argument.') : _prodInvariant('11') : void 0;
	          classNames = classNames.split(/\s+/);
	        }
	        return classNames.every(function (name) {
	          return classList.indexOf(name) !== -1;
	        });
	      }
	      return false;
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function (root, className) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for class:' + className);
	    }
	    return all[0];
	  },
	
	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function (root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
	    });
	  },
	
	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function (root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for tag:' + tagName);
	    }
	    return all[0];
	  },
	
	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function (root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
	    });
	  },
	
	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function (root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for componentType:' + componentType);
	    }
	    return all[0];
	  },
	
	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function (module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || 'div';
	
	    module.prototype.render.mockImplementation(function () {
	      return React.createElement(mockTagName, null, this.props.children);
	    });
	
	    return this;
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on an `Element` node.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);
	  },
	
	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on the `ReactDOMComponent` `comp`.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
	   * @param {!ReactDOMComponent} comp
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(topLevelType, findDOMNode(comp), fakeNativeEvent);
	  },
	
	  nativeTouchData: function (x, y) {
	    return {
	      touches: [{ pageX: x, pageY: y }]
	    };
	  },
	
	  createRenderer: createRendererWithWarning,
	
	  Simulate: null,
	  SimulateNative: {}
	};
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function (domComponentOrNode, eventData) {
	    var node;
	    !!React.isValidElement(domComponentOrNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TestUtils.Simulate expects a component instance and not a ReactElement.TestUtils.Simulate will not work if you are using shallow rendering.') : _prodInvariant('14') : void 0;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = findDOMNode(domComponentOrNode);
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }
	
	    var dispatchConfig = EventPluginRegistry.eventNameDispatchConfigs[eventType];
	
	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    fakeNativeEvent.type = eventType.toLowerCase();
	
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(dispatchConfig, ReactDOMComponentTree.getInstanceFromNode(node), fakeNativeEvent, node);
	    // Since we aren't using pooling, always persist the event. This will make
	    // sure it's marked and won't warn when setting additional properties.
	    event.persist();
	    _assign(event, eventData);
	
	    if (dispatchConfig.phasedRegistrationNames) {
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	    } else {
	      EventPropagators.accumulateDirectDispatches(event);
	    }
	
	    ReactUpdates.batchedUpdates(function () {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue(true);
	    });
	  };
	}
	
	function buildSimulators() {
	  ReactTestUtils.Simulate = {};
	
	  var eventType;
	  for (eventType in EventPluginRegistry.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element|ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}
	
	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function () {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function () {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};
	
	buildSimulators();
	
	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */
	
	function makeNativeSimulator(eventType) {
	  return function (domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    _assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);
	    } else if (domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
	    }
	  };
	}
	
	Object.keys(topLevelTypes).forEach(function (eventType) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element|ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
	});
	
	module.exports = ReactTestUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 803 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = {
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	};
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes
	};
	
	module.exports = EventConstants;

/***/ }),
/* 804 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(657),
	    _assign = __webpack_require__(672);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var React = __webpack_require__(617);
	var ReactCompositeComponent = __webpack_require__(742);
	var ReactDefaultBatchingStrategy = __webpack_require__(763);
	var ReactReconciler = __webpack_require__(682);
	var ReactReconcileTransaction = __webpack_require__(768);
	var ReactUpdates = __webpack_require__(679);
	
	var emptyObject = __webpack_require__(634);
	var getNextDebugID = __webpack_require__(750);
	var invariant = __webpack_require__(622);
	
	function injectDefaults() {
	  ReactUpdates.injection.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	}
	
	var NoopInternalComponent = function () {
	  function NoopInternalComponent(element) {
	    _classCallCheck(this, NoopInternalComponent);
	
	    this._renderedOutput = element;
	    this._currentElement = element;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._debugID = getNextDebugID();
	    }
	  }
	
	  NoopInternalComponent.prototype.mountComponent = function mountComponent() {};
	
	  NoopInternalComponent.prototype.receiveComponent = function receiveComponent(element) {
	    this._renderedOutput = element;
	    this._currentElement = element;
	  };
	
	  NoopInternalComponent.prototype.unmountComponent = function unmountComponent() {};
	
	  NoopInternalComponent.prototype.getHostNode = function getHostNode() {
	    return undefined;
	  };
	
	  NoopInternalComponent.prototype.getPublicInstance = function getPublicInstance() {
	    return null;
	  };
	
	  return NoopInternalComponent;
	}();
	
	var ShallowComponentWrapper = function (element) {
	  // TODO: Consolidate with instantiateReactComponent
	  if (process.env.NODE_ENV !== 'production') {
	    this._debugID = getNextDebugID();
	  }
	
	  this.construct(element);
	};
	_assign(ShallowComponentWrapper.prototype, ReactCompositeComponent, {
	  _constructComponent: ReactCompositeComponent._constructComponentWithoutOwner,
	  _instantiateReactComponent: function (element) {
	    return new NoopInternalComponent(element);
	  },
	  _replaceNodeWithMarkup: function () {},
	  _renderValidatedComponent: ReactCompositeComponent._renderValidatedComponentWithoutOwnerOrContext
	});
	
	function _batchedRender(renderer, element, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
	  renderer._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	var ReactShallowRenderer = function () {
	  function ReactShallowRenderer() {
	    _classCallCheck(this, ReactShallowRenderer);
	
	    this._instance = null;
	  }
	
	  ReactShallowRenderer.prototype.getMountedInstance = function getMountedInstance() {
	    return this._instance ? this._instance._instance : null;
	  };
	
	  ReactShallowRenderer.prototype.render = function render(element, context) {
	    // Ensure we've done the default injections. This might not be true in the
	    // case of a simple test that only requires React and the TestUtils in
	    // conjunction with an inline-requires transform.
	    injectDefaults();
	
	    !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : _prodInvariant('12', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : void 0;
	    !(typeof element.type !== 'string') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom components, not primitives (%s). Instead of calling `.render(el)` and inspecting the rendered output, look at `el.props` directly instead.', element.type) : _prodInvariant('13', element.type) : void 0;
	
	    if (!context) {
	      context = emptyObject;
	    }
	    ReactUpdates.batchedUpdates(_batchedRender, this, element, context);
	
	    return this.getRenderOutput();
	  };
	
	  ReactShallowRenderer.prototype.getRenderOutput = function getRenderOutput() {
	    return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;
	  };
	
	  ReactShallowRenderer.prototype.unmount = function unmount() {
	    if (this._instance) {
	      ReactReconciler.unmountComponent(this._instance, false);
	    }
	  };
	
	  ReactShallowRenderer.prototype.unstable_batchedUpdates = function unstable_batchedUpdates(callback, bookkeeping) {
	    // This is used by Enzyme for fake-simulating events in shallow mode.
	    injectDefaults();
	    return ReactUpdates.batchedUpdates(callback, bookkeeping);
	  };
	
	  ReactShallowRenderer.prototype._render = function _render(element, transaction, context) {
	    if (this._instance) {
	      ReactReconciler.receiveComponent(this._instance, element, transaction, context);
	    } else {
	      var instance = new ShallowComponentWrapper(element);
	      ReactReconciler.mountComponent(instance, transaction, null, null, context, 0);
	      this._instance = instance;
	    }
	  };
	
	  return ReactShallowRenderer;
	}();
	
	ReactShallowRenderer.createRenderer = function () {
	  return new ReactShallowRenderer();
	};
	
	module.exports = ReactShallowRenderer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 805 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(622);
	
	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */
	
	/* Slow implementation for browsers that don't natively support .matches() */
	function matchesSelector_SLOW(element, selector) {
	  var root = element;
	  while (root.parentNode) {
	    root = root.parentNode;
	  }
	
	  var all = root.querySelectorAll(selector);
	  return Array.prototype.indexOf.call(all, element) !== -1;
	}
	
	var CSSCore = {
	
	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function addClass(element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;
	
	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function removeClass(element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;
	
	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	        .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function conditionClass(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },
	
	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to check the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function hasClass(element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : void 0;
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  },
	
	  /**
	   * Tests whether the element matches the selector specified
	   *
	   * @param {DOMNode|DOMWindow} element the element that we are querying
	   * @param {string} selector the CSS selector
	   * @return {boolean} true if the element matches the selector, false if not
	   */
	  matchesSelector: function matchesSelector(element, selector) {
	    var matchesImpl = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || function (s) {
	      return matchesSelector_SLOW(element, s);
	    };
	    return matchesImpl.call(element, selector);
	  }
	
	};
	
	module.exports = CSSCore;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 806 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(670);
	
	var getVendorPrefixedEventName = __webpack_require__(730);
	
	var endEvents = [];
	
	function detectEvents() {
	  var animEnd = getVendorPrefixedEventName('animationend');
	  var transEnd = getVendorPrefixedEventName('transitionend');
	
	  if (animEnd) {
	    endEvents.push(animEnd);
	  }
	
	  if (transEnd) {
	    endEvents.push(transEnd);
	  }
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}
	
	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.
	
	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}
	
	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}
	
	var ReactTransitionEvents = {
	  addEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },
	
	  removeEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};
	
	module.exports = ReactTransitionEvents;

/***/ }),
/* 807 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var DraggableIframe = function (_React$Component) {
	    _inherits(DraggableIframe, _React$Component);
	
	    function DraggableIframe(props) {
	        _classCallCheck(this, DraggableIframe);
	
	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	        _this.state = {
	            isShown: false,
	            params: [],
	            xPos: 0,
	            yPos: 0,
	            xElem: 0,
	            yElem: 0,
	            selected: null
	        };
	
	        _this.dragInit = function (e) {
	            e.preventDefault();
	            document.onmousemove = _this.moveElem;
	            document.onmouseup = _this.destroy;
	            _this.setState({
	                xPos: e.pageX,
	                yPos: e.pageY,
	                selected: _this.refs.helpFrame,
	                xElem: e.pageX - _this.refs.helpFrame.offsetLeft,
	                yElem: e.pageY - _this.refs.helpFrame.offsetTop
	            });
	        };
	
	        _this.moveElem = function (e) {
	            var _this$state = _this.state,
	                xPos = _this$state.xPos,
	                yPos = _this$state.yPos,
	                xElem = _this$state.xElem,
	                yElem = _this$state.yElem,
	                selected = _this$state.selected;
	
	            _this.setState({
	                xPos: e.pageX,
	                yPos: e.pageY
	            });
	            if (selected !== null) {
	                selected.style.left = xPos - xElem + 'px';
	                selected.style.top = yPos - yElem + 'px';
	            }
	        };
	
	        _this.destroy = function (e) {
	            e.preventDefault();
	            document.onmousemove = null;
	            document.onmouseup = null;
	            _this.setState({ selected: null });
	        };
	
	        _this.toggle = function () {
	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }
	
	            var _this$state2 = _this.state,
	                oldPos = _this$state2.yPos,
	                isShown = _this$state2.isShown,
	                yElem = _this$state2.yElem;
	            var _window = window,
	                pageYOffset = _window.pageYOffset,
	                outerHeight = _window.outerHeight;
	
	            var yPos = isShown ? oldPos : pageYOffset > oldPos ? pageYOffset + 50 : pageYOffset + outerHeight < oldPos ? pageYOffset + outerHeight - _this.props.height - 100 : oldPos;
	            _this.setState({ isShown: !_this.state.isShown, params: params, yPos: yPos });
	            _this.refs.helpFrame.style.top = yPos - yElem + 'px';
	        };
	
	        if (props.toggleFunctionName) {
	            window[props.toggleFunctionName] = _this.toggle;
	        }
	        return _this;
	    }
	
	    DraggableIframe.prototype.render = function render() {
	        var _props = this.props,
	            title = _props.title,
	            iframeUrl = _props.iframeUrl,
	            width = _props.width,
	            height = _props.height,
	            queryUrl = _props.queryUrl;
	        var _state = this.state,
	            selected = _state.selected,
	            isShown = _state.isShown,
	            params = _state.params;
	
	        var url = iframeUrl + params.map(function (param, i) {
	            return typeof queryUrl[i] === 'string' ? queryUrl[i] + param : '';
	        }).join('');
	        return _react2.default.createElement(
	            'div',
	            { className: 'help-frame ' + (selected ? 'is-dragging' : ''), onMouseDown: this.dragInit, ref: 'helpFrame', style: { width: width, display: isShown ? 'block' : 'none' } },
	            _react2.default.createElement(
	                'span',
	                { className: 'help-center-title' },
	                (0, _translation.translate)(title)
	            ),
	            _react2.default.createElement(
	                'div',
	                { className: 'mdl-button mdl-js-button mdl-button--icon mdl-js-ripple-effect close-icon', onClick: this.toggle },
	                _react2.default.createElement(
	                    'i',
	                    { className: 'material-icons' },
	                    'close'
	                )
	            ),
	            _react2.default.createElement('br', null),
	            _react2.default.createElement(IFrame, { height: height, src: url, width: width })
	        );
	    };
	
	    return DraggableIframe;
	}(_react2.default.Component);
	
	DraggableIframe.propTypes = {
	    iframeUrl: _react.PropTypes.string.isRequired,
	    width: _react.PropTypes.number.isRequired,
	    height: _react.PropTypes.number.isRequired,
	    title: _react.PropTypes.string.isRequired,
	    toggleFunctionName: _react.PropTypes.string,
	    queryUrl: _react.PropTypes.array
	};
	exports.default = DraggableIframe;
	
	var IFrame = function (_React$Component2) {
	    _inherits(IFrame, _React$Component2);
	
	    function IFrame() {
	        _classCallCheck(this, IFrame);
	
	        return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));
	    }
	
	    IFrame.prototype.shouldComponentUpdate = function shouldComponentUpdate(_ref) {
	        var src = _ref.src;
	
	        return src !== this.props.src;
	    };
	
	    IFrame.prototype.render = function render() {
	        var _props2 = this.props,
	            height = _props2.height,
	            src = _props2.src,
	            width = _props2.width;
	
	        return _react2.default.createElement('iframe', { frameBorder: 0, height: height, src: src, width: width });
	    };
	
	    return IFrame;
	}(_react2.default.Component);
	
	module.exports = exports['default'];

/***/ }),
/* 808 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _componentBase = __webpack_require__(225);
	
	var _componentBase2 = _interopRequireDefault(_componentBase);
	
	var _scroll = __webpack_require__(423);
	
	var _scroll2 = _interopRequireDefault(_scroll);
	
	var _connect = __webpack_require__(296);
	
	var _connect2 = _interopRequireDefault(_connect);
	
	var _material = __webpack_require__(222);
	
	var _material2 = _interopRequireDefault(_material);
	
	var _grid = __webpack_require__(511);
	
	var _grid2 = _interopRequireDefault(_grid);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    translation: _translation2.default,
	    componentBase: _componentBase2.default,
	    scroll: _scroll2.default,
	    connect: _connect2.default,
	    material: _material2.default,
	    grid: _grid2.default
	};
	module.exports = exports['default'];

/***/ }),
/* 809 */
/***/ (function(module, exports) {

	module.exports = {
		"name": "focus-components",
		"version": "2.1.2",
		"description": "Focus component repository.",
		"main": "index.js",
		"scripts": {
			"babelify": "better-npm-run babelify",
			"bundle": "better-npm-run bundle",
			"copy-sass": "better-npm-run copy-sass",
			"build": "node scripts/mdl-variables-copy.js && better-npm-run babelify && better-npm-run copy-sass && better-npm-run bundle",
			"test": "better-npm-run test",
			"test:watch": "better-npm-run test-watch",
			"postinstall": "node scripts/mdl-variables-copy.js",
			"profile": "better-npm-run profile",
			"prepublish": "npm run build",
			"fix-lint": "eslint --fix src/** || exit 0"
		},
		"betterScripts": {
			"babelify": {
				"env": {
					"BABEL_ENV": "production"
				},
				"command": "node scripts/babelify.js"
			},
			"copy-sass": {
				"command": "cd src && find . -name *.scss | xargs tar cvf - | tar xfp - -C ../"
			},
			"bundle": {
				"command": "webpack --progress",
				"env": {
					"DEV": false,
					"NODE_ENV": "production",
					"LIBRARY_NAME": "FocusComponents",
					"MINIMIFY": false,
					"PACKAGE_JSON_PATH": "../",
					"BABEL_ENV": "production"
				}
			},
			"profile": {
				"command": "webpack --progress --json --profile > profile.json",
				"env": {
					"DEV": false,
					"NODE_ENV": "production",
					"LIBRARY_NAME": "FocusComponents",
					"MINIMIFY": false,
					"PACKAGE_JSON_PATH": "../"
				}
			},
			"test": {
				"command": "mocha src/**/__tests__/**/*.js",
				"env": {
					"BABEL_ENV": "production"
				}
			},
			"test-watch": {
				"command": "mocha src/**/__tests__/**/*.js -w",
				"env": {
					"BABEL_ENV": "production"
				}
			}
		},
		"babel": {
			"presets": [
				"focus"
			]
		},
		"repository": {
			"type": "git",
			"url": "https://github.com/KleeGroup/focus-components.git"
		},
		"keywords": [
			"react",
			"focus"
		],
		"author": "Focus Team <focus@kleegroup.com>",
		"license": "MIT",
		"bugs": {
			"url": "https://github.com/KleeGroup/focus-components/issues"
		},
		"homepage": "https://github.com/KleeGroup/focus-components",
		"dependencies": {
			"closest": "0.0.1",
			"daterangepicker": "0.0.3",
			"immutable": "^3.7.4",
			"lodash": "^3.10.1",
			"material-design-lite": "1.1.3",
			"object-assign": "^2.0.0",
			"react-addons-css-transition-group": "^15.2.1",
			"react-date-picker": "^3.1.6",
			"uuid": "^2.0.1"
		},
		"devDependencies": {
			"autoprefixer-loader": "^3.2.0",
			"babel": "^6.3.26",
			"babel-cli": "^6.4.0",
			"babel-core": "^6.4.0",
			"babel-eslint": "4.1.3",
			"babel-loader": "^6.2.1",
			"babel-preset-focus": "^0.5.2",
			"babel-runtime": "^6.3.19",
			"better-npm-run": "0.0.5",
			"chai": "^3.2.0",
			"chai-subset": "^1.0.1",
			"css-loader": "^0.19.0",
			"eslint": "^2.3.0",
			"eslint-config-focus": "0.3.0",
			"eslint-plugin-filenames": "0.1.1",
			"eslint-plugin-react": "3.5.0",
			"exports-loader": "^0.6.2",
			"extract-text-webpack-plugin": "^0.8.2",
			"file-loader": "^0.8.4",
			"focus-core": "0.17.0-beta0",
			"in-publish": "^2.0.0",
			"jquery": "^2.1.4",
			"jsdom": "^6.4.0",
			"json-loader": "^0.5.3",
			"mocha": "^2.2.5",
			"moment": "^2.10.6",
			"node-sass": "^3.3.3",
			"numeral": "^1.5.3",
			"react": "^15.3.2",
			"react-addons-test-utils": "^15.2.1",
			"react-dom": "^15.2.1",
			"react-hot-loader": "^1.3.0",
			"sass-loader": "^2.0.1",
			"sinon": "^1.16.1",
			"sinon-chai": "^2.8.0",
			"source-map-loader": "^0.1.5",
			"style-loader": "^0.12.4",
			"url-loader": "^0.5.6",
			"webpack": "^1.12.14",
			"webpack-dev-server": "^1.14.1",
			"webpack-focus": "^0.11.4"
		}
	};

/***/ }),
/* 810 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    autocomplete: __webpack_require__(811),
	    block: __webpack_require__(815),
	    button: __webpack_require__(818),
	    empty: __webpack_require__(822),
	    field: __webpack_require__(823),
	    form: __webpack_require__(832),
	    i18n: __webpack_require__(827),
	    icon: __webpack_require__(522),
	    input: __webpack_require__(863),
	    label: __webpack_require__(866),
	    panel: __webpack_require__(867),
	    select: __webpack_require__(868),
	    selectAction: __webpack_require__(844),
	    scrollspy: __webpack_require__(872),
	    title: __webpack_require__(817),
	    topicDisplayer: __webpack_require__(873),
	    list: __webpack_require__(836),
	    mixin: __webpack_require__(874),
	    display: __webpack_require__(875),
	    progressBar: __webpack_require__(520),
	    role: __webpack_require__(878),
	    grid: __webpack_require__(879),
	    column: __webpack_require__(880)
	};

/***/ }),
/* 811 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    awesomplete: __webpack_require__(812),
	    field: __webpack_require__(814)
	};

/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	__webpack_require__(813);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* globals Awesomplete */
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	// Dependencies
	
	var find = __webpack_require__(547);
	var InputText = __webpack_require__(438);
	
	var _require = __webpack_require__(226),
	    debounce = _require.debounce;
	
	/**
	* Autocomplete component.
	* Get a pickList as an input, then let the user type and suggests values from the picklist.
	* Can force values in the input field to be taken from the pick list only.
	* @type {Object}
	*/
	var Autocomplete = {
	    /**
	    * Component will mount.
	    * Check if the Awesomplete library is in the Window object.
	    */
	    componentWillMount: function componentWillMount() {
	        // Check if Awesomplete is set in Window
	        if (!window.Awesomplete) {
	            throw new Error('Please include Awesomplete to your application. See http://leaverou.github.io/awesomplete/ for more information');
	        }
	    },
	
	    /**
	    * Component did mount.
	    * Initiates the Awesomplete object.
	    */
	    componentDidMount: function componentDidMount() {
	        var _this = this;
	
	        var input = this.refs.input.refs.inputText;
	        var _props = this.props,
	            code = _props.code,
	            codeResolver = _props.codeResolver,
	            inputChangeHandler = _props.inputChangeHandler,
	            pickList = _props.pickList,
	            timeoutDuration = _props.timeoutDuration;
	
	        this._awesomeplete = new Awesomplete(ReactDOM.findDOMNode(input), {
	            list: this._extractListFromData(pickList)
	        });
	        this._awesomeplete.input.addEventListener('awesomplete-select', function (event) {
	            return _this._selectionHandler(event.text);
	        });
	        this._resolveValueFromPicklistOrCodeResolver(code, pickList);
	        this._debouncedInputChangeHandler = debounce(function (value) {
	            if (inputChangeHandler) {
	                inputChangeHandler(value);
	            }
	        }, timeoutDuration);
	    },
	
	    /**
	    * Default props.
	    * @return {Object} default props
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            code: '',
	            pickList: [],
	            InputAutoComplete: InputText,
	            timeoutDuration: 200,
	            allowUnmatchedValue: true
	        };
	    },
	
	    /**
	    * Prop validation
	    * @type {Object}
	    */
	    propTypes: {
	        allowUnmatchedValue: (0, _types2.default)('bool'), // restrict user input to values of the list, or allow freestyle
	        code: (0, _types2.default)('string'), // the field code value
	        inputChangeHandler: (0, _types2.default)('func'), // callback when input changed
	        onInputBlur: (0, _types2.default)('func'),
	        pickList: (0, _types2.default)('array'), // list of values, looking like [{code: '', value: ''}, {code: '', value: ''}, ...]
	        selectionHandler: (0, _types2.default)('func'), // selection callback
	        timeoutDuration: (0, _types2.default)('number') // the throttle duration of the input rate
	    },
	    /**
	    * Initial state.
	    * Retrieve the value from the provided code and pick list.
	    * @return {Object} initial state
	    */
	    getInitialState: function getInitialState() {
	        var _props2 = this.props,
	            code = _props2.code,
	            pickList = _props2.pickList;
	
	        return {
	            value: 0 < pickList.length ? this._getValueFromCode(code) : code,
	            fromCodeResolver: false
	        };
	    },
	
	    /**
	    * Component will receive props.
	    * Update the pick list, and try to resolve the new value.
	    * @param  {Object} nextProps new props
	    */
	    componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	        var pickList = _ref.pickList,
	            code = _ref.code;
	
	        if (code !== this.props.code) {
	            this._resolveValueFromPicklistOrCodeResolver(code, pickList);
	        }
	        this._awesomeplete.list = this._extractListFromData(pickList);
	    },
	    _resolveValueFromPicklistOrCodeResolver: function _resolveValueFromPicklistOrCodeResolver(code, pickList) {
	        var _this2 = this;
	
	        var codeResolver = this.props.codeResolver;
	
	        var value = this._getValueFromCode(code, pickList);
	        if ('' !== value) {
	            this.setState({ value: value }); // eslint-disable-line
	        } else if (codeResolver) {
	            codeResolver(code).then(function (resolvedValue) {
	                if ('' !== resolvedValue) {
	                    _this2.setState({ value: resolvedValue, fromCodeResolver: true }, function () {
	                        _this2.props.inputChangeHandler(resolvedValue);
	                    }); // eslint-disable-line
	                }
	            });
	        }
	    },
	
	    /**
	    * Selection handler.
	    * If a selection handler is set in the props, send it the selected pick.
	    * Also, set a flag to tell the blur listener not to empty the value, because the selection, as it is a click outside the input, raises a blur event.
	    * @param  {String} value selected value from the dropdown list
	    */
	    _selectionHandler: function _selectionHandler(value) {
	        var selectionHandler = this.props.selectionHandler;
	
	        if (selectionHandler) {
	            var pickList = this.props.pickList;
	
	            var selectedPick = find(pickList, { value: value });
	            selectionHandler(selectedPick);
	        }
	        this._isSelecting = true; // Private flag to tell the blur listener not to replace the value
	        this.setState({ value: value });
	    },
	
	    /**
	    * Extract list of suggestions from pick list
	    * @param  {Object} data the pick list
	    * @return {Array}      the suggestion array
	    */
	    _extractListFromData: function _extractListFromData(data) {
	        return data.map(function (datum) {
	            return datum.value;
	        });
	    },
	
	    /**
	    * Get code from value in the pick list
	    * @param  {String} value the value
	    * @return {String} the code
	    */
	    _getCodeFromValue: function _getCodeFromValue(value) {
	        var pickList = this.props.pickList;
	
	        var pick = find(pickList, { value: value });
	        return pick ? pick.code : pick;
	    },
	
	    /**
	    * Get value from code in the pick list
	    * @param  {String} code the code
	    * @param  {Object} pickList=this.props.pickList  optional pick list to resolve the value from
	    * @return {String} value
	    */
	    _getValueFromCode: function _getValueFromCode(code) {
	        var pickList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.pickList;
	
	        var pick = find(pickList, { code: code });
	        return pick ? pick.value : '';
	    },
	
	    /**
	    * Get the current code
	    * @return {String} the code
	    */
	    getValue: function getValue() {
	        var value = this.state.value;
	
	        if (value === '') return null;
	        var allowUnmatchedValue = this.props.allowUnmatchedValue;
	
	        var computedValue = this._getCodeFromValue(value);
	        return computedValue ? computedValue : allowUnmatchedValue ? value : this.props.code;
	    },
	
	    /**
	    * On input blur.
	    * If allowUnmatchedValue is set in the props, validate the current value and erase it if not valid.
	    */
	    _onInputBlur: function _onInputBlur() {
	        var _state = this.state,
	            value = _state.value,
	            fromCodeResolver = _state.fromCodeResolver;
	        var _props3 = this.props,
	            allowUnmatchedValue = _props3.allowUnmatchedValue,
	            onInputBlur = _props3.onInputBlur,
	            pickList = _props3.pickList,
	            selectionHandler = _props3.selectionHandler;
	
	        var selectedPick = find(pickList, { value: value });
	        var code = this._getCodeFromValue(value);
	        if (selectedPick && !this._isSelecting && selectionHandler) {
	            selectionHandler(selectedPick);
	        }
	        if (!code && !allowUnmatchedValue && !this._isSelecting && !fromCodeResolver) {
	            this.setState({ value: '' });
	            selectionHandler && selectionHandler({ code: '', value: '' });
	        }
	
	        onInputBlur && onInputBlur();
	
	        this._isSelecting = false;
	    },
	
	    /**
	    * On input change
	    * @param  {Object} event change event
	    */
	    _onInputChange: function _onInputChange(_ref2) {
	        var value = _ref2.target.value;
	
	        this.setState({ value: value, fromCodeResolver: false });
	        this._debouncedInputChangeHandler(value);
	    },
	
	    /**
	    * Render
	    * @return {HTML} rendered element
	    */
	    render: function render() {
	        var value = this.state.value;
	        var _props4 = this.props,
	            timeoutDuration = _props4.timeoutDuration,
	            InputAutoComplete = _props4.InputAutoComplete;
	        var _onInputBlur = this._onInputBlur,
	            _onInputChange = this._onInputChange;
	
	        return React.createElement(
	            'div',
	            { 'data-focus': 'autocomplete' },
	            InputAutoComplete ? React.createElement(InputAutoComplete, { onBlur: _onInputBlur, onChange: _onInputChange, ref: 'input', value: value }) : React.createElement(InputText, { onBlur: _onInputBlur, onChange: _onInputChange, ref: 'input', value: value })
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(Autocomplete);

/***/ }),
/* 813 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Simple, lightweight, usable local autocomplete library for modern browsers
	 * Because there weren’t enough autocomplete scripts in the world? Because I’m completely insane and have NIH syndrome? Probably both. :P
	 * @author Lea Verou http://leaverou.github.io/awesomplete
	 * MIT license
	 */
	
	(function () {
	
		var _ = function _(input, o) {
			var me = this;
	
			// Setup
	
			this.input = $(input);
			this.input.setAttribute('autocomplete', 'false');
			this.input.setAttribute('aria-autocomplete', 'list');
	
			o = o || {};
	
			configure.call(this, {
				minChars: 2,
				maxItems: 10,
				autoFirst: false,
				filter: _.FILTER_CONTAINS,
				sort: _.SORT_BYLENGTH,
				item: function item(text, input) {
					return $.create('li', {
						innerHTML: text.replace(RegExp($.regExpEscape(input.trim()), 'gi'), '<mark>$&</mark>'),
						'aria-selected': 'false'
					});
				},
				replace: function replace(text) {
					this.input.value = text;
				}
			}, o);
	
			this.index = -1;
	
			// Create necessary elements
	
			this.container = $.create('div', {
				className: 'awesomplete',
				around: input
			});
	
			this.ul = $.create('ul', {
				hidden: '',
				inside: this.container
			});
	
			this.status = $.create('span', {
				className: 'visually-hidden',
				role: 'status',
				'aria-live': 'assertive',
				'aria-relevant': 'additions',
				inside: this.container
			});
	
			// Bind events
	
			$.bind(this.input, {
				'input': this.evaluate.bind(this),
				'blur': this.close.bind(this),
				'keydown': function keydown(evt) {
					var c = evt.keyCode;
	
					// If the dropdown `ul` is in view, then act on keydown for the following keys:
					// Enter / Esc / Up / Down
					if (me.opened) {
						if (c === 13 && me.selected) {
							// Enter
							evt.preventDefault();
							me.select();
						} else if (c === 27) {
							// Esc
							me.close();
						} else if (c === 38 || c === 40) {
							// Down/Up arrow
							evt.preventDefault();
							me[c === 38 ? 'previous' : 'next']();
						}
					}
				}
			});
	
			$.bind(this.input.form, { 'submit': this.close.bind(this) });
	
			$.bind(this.ul, { 'mousedown': function mousedown(evt) {
					var li = evt.target;
	
					if (li !== this) {
	
						while (li && !/li/i.test(li.nodeName)) {
							li = li.parentNode;
						}
	
						if (li) {
							me.select(li);
						}
					}
				} });
	
			if (this.input.hasAttribute('list')) {
				this.list = '#' + input.getAttribute('list');
				input.removeAttribute('list');
			} else {
				this.list = this.input.getAttribute('data-list') || o.list || [];
			}
	
			_.all.push(this);
		};
	
		_.prototype = {
			set list(list) {
				if (Array.isArray(list)) {
					this._list = list;
				} else if (typeof list === 'string' && list.indexOf(',') > -1) {
					this._list = list.split(/\s*,\s*/);
				} else {
					// Element or CSS selector
					list = $(list);
	
					if (list && list.children) {
						this._list = slice.apply(list.children).map(function (el) {
							return el.textContent.trim();
						});
					}
				}
	
				if (document.activeElement === this.input) {
					this.evaluate();
				}
			},
	
			get selected() {
				return this.index > -1;
			},
	
			get opened() {
				return this.ul && this.ul.getAttribute('hidden') == null;
			},
	
			close: function close() {
				this.ul.setAttribute('hidden', '');
				this.index = -1;
	
				$.fire(this.input, 'awesomplete-close');
			},
	
			open: function open() {
				this.ul.removeAttribute('hidden');
	
				if (this.autoFirst && this.index === -1) {
					this.goto(0);
				}
	
				$.fire(this.input, 'awesomplete-open');
			},
	
			next: function next() {
				var count = this.ul.children.length;
	
				this.goto(this.index < count - 1 ? this.index + 1 : -1);
			},
	
			previous: function previous() {
				var count = this.ul.children.length;
	
				this.goto(this.selected ? this.index - 1 : count - 1);
			},
	
			// Should not be used, highlights specific item without any checks!
			goto: function goto(i) {
				var lis = this.ul.children;
	
				if (this.selected) {
					lis[this.index].setAttribute('aria-selected', 'false');
				}
	
				this.index = i;
	
				if (i > -1 && lis.length > 0) {
					lis[i].setAttribute('aria-selected', 'true');
					this.status.textContent = lis[i].textContent;
				}
	
				$.fire(this.input, 'awesomplete-highlight');
			},
	
			select: function select(selected) {
				selected = selected || this.ul.children[this.index];
	
				if (selected) {
					var prevented;
	
					$.fire(this.input, 'awesomplete-select', {
						text: selected.textContent,
						preventDefault: function preventDefault() {
							prevented = true;
						}
					});
	
					if (!prevented) {
						this.replace(selected.textContent);
						this.close();
						$.fire(this.input, 'awesomplete-selectcomplete');
					}
				}
			},
	
			evaluate: function evaluate() {
				var me = this;
				var value = this.input.value;
	
				if (value.length >= this.minChars && this._list.length > 0) {
					this.index = -1;
					// Populate list with options that match
					this.ul.innerHTML = '';
	
					this._list.filter(function (item) {
						return me.filter(item, value);
					}).sort(this.sort).every(function (text, i) {
						me.ul.appendChild(me.item(text, value));
	
						return i < me.maxItems - 1;
					});
	
					if (this.ul.children.length === 0) {
						this.close();
					} else {
						this.open();
					}
				} else {
					this.close();
				}
			}
		};
	
		// Static methods/properties
	
		_.all = [];
	
		_.FILTER_CONTAINS = function (text, input) {
			return RegExp($.regExpEscape(input.trim()), 'i').test(text);
		};
	
		_.FILTER_STARTSWITH = function (text, input) {
			return RegExp('^' + $.regExpEscape(input.trim()), 'i').test(text);
		};
	
		_.SORT_BYLENGTH = function (a, b) {
			if (a.length !== b.length) {
				return a.length - b.length;
			}
	
			return a < b ? -1 : 1;
		};
	
		// Private functions
	
		function configure(properties, o) {
			for (var i in properties) {
				var initial = properties[i],
				    attrValue = this.input.getAttribute('data-' + i.toLowerCase());
	
				if (typeof initial === 'number') {
					this[i] = parseInt(attrValue);
				} else if (initial === false) {
					// Boolean options must be false by default anyway
					this[i] = attrValue !== null;
				} else if (initial instanceof Function) {
					this[i] = null;
				} else {
					this[i] = attrValue;
				}
	
				if (!this[i] && this[i] !== 0) {
					this[i] = i in o ? o[i] : initial;
				}
			}
		}
	
		// Helpers
	
		var slice = Array.prototype.slice;
	
		function $(expr, con) {
			return typeof expr === 'string' ? (con || document).querySelector(expr) : expr || null;
		}
	
		function $$(expr, con) {
			return slice.call((con || document).querySelectorAll(expr));
		}
	
		$.create = function (tag, o) {
			var element = document.createElement(tag);
	
			for (var i in o) {
				var val = o[i];
	
				if (i === 'inside') {
					$(val).appendChild(element);
				} else if (i === 'around') {
					var ref = $(val);
					ref.parentNode.insertBefore(element, ref);
					element.appendChild(ref);
				} else if (i in element) {
					element[i] = val;
				} else {
					element.setAttribute(i, val);
				}
			}
	
			return element;
		};
	
		$.bind = function (element, o) {
			if (element) {
				for (var event in o) {
					var callback = o[event];
	
					event.split(/\s+/).forEach(function (event) {
						element.addEventListener(event, callback);
					});
				}
			}
		};
	
		$.fire = function (target, type, properties) {
			var evt = document.createEvent('HTMLEvents');
	
			evt.initEvent(type, true, true);
	
			for (var j in properties) {
				evt[j] = properties[j];
			}
	
			target.dispatchEvent(evt);
		};
	
		$.regExpEscape = function (s) {
			return s.replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&');
		};
	
		// Initialization
	
		function init() {
			$$('input.awesomplete').forEach(function (input) {
				new _(input);
			});
		}
	
		// Are we in a browser? Check for Document constructor
		if (typeof Document !== 'undefined') {
			// DOM already loaded?
			if (document.readyState !== 'loading') {
				init();
			} else {
				// Wait for it
				document.addEventListener('DOMContentLoaded', init);
			}
		}
	
		_.$ = $;
		_.$$ = $$;
	
		// Make sure to export Awesomplete on self when in a browser
		if (typeof self !== 'undefined') {
			self.Awesomplete = _;
		}
	
		// Expose Awesomplete as a CJS module
		if (( false ? 'undefined' : _typeof(exports)) === 'object') {
			module.exports = _;
		}
	
		return _;
	})();

/***/ }),
/* 814 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var find = __webpack_require__(547);
	
	// Components
	
	var Autocomplete = __webpack_require__(812).component;
	
	/**
	 * Autocomplete for component
	 * @type {Object}
	 */
	var AutocompleteFor = {
	    /**
	     * Default props
	     * @return {Object} default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            AutocompleteComp: Autocomplete,
	            pickList: [],
	            value: ''
	        };
	    },
	
	    /**
	     * Props validation
	     * @type {Object}
	     */
	    propTypes: {
	        AutocompleteComp: (0, _types2.default)('func'),
	        allowUnmatchedValue: (0, _types2.default)('bool'),
	        codeResolver: (0, _types2.default)('func'),
	        isEdit: (0, _types2.default)('bool'),
	        onInputBlur: (0, _types2.default)('func'),
	        pickList: (0, _types2.default)('array'),
	        searcher: (0, _types2.default)('func'),
	        selectionHandler: (0, _types2.default)('func'),
	        value: (0, _types2.default)('string')
	    },
	    /**
	     * Get initial state
	     * @return {Object} initial state
	     */
	    getInitialState: function getInitialState() {
	        var pickList = this.props.pickList;
	
	        return { pickList: pickList };
	    },
	
	    /**
	     * Component will mount, load the list
	     */
	    componentWillMount: function componentWillMount() {
	        var _this = this;
	
	        var _props = this.props,
	            isEdit = _props.isEdit,
	            value = _props.value,
	            codeResolver = _props.codeResolver;
	
	        if (!isEdit && value && codeResolver) {
	            // Resolve the code if in consult
	            codeResolver(value).then(function (resolvedCode) {
	                return _this.setState({ value: resolvedCode });
	            });
	        } else {
	            this._doLoad();
	        }
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	        var _this2 = this;
	
	        var codeResolver = _ref.codeResolver,
	            value = _ref.value;
	
	        if (value !== this.props.value) {
	            codeResolver(value).then(function (resolvedCode) {
	                return _this2.setState({ value: resolvedCode });
	            });
	        }
	    },
	
	    /**
	     * List loader
	     * @param  {string} text='' input text to search from
	     */
	    _doLoad: function _doLoad() {
	        var _this3 = this;
	
	        var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	        var searcher = this.props.searcher;
	
	        if (searcher) {
	            searcher(text).then(function (pickList) {
	                return _this3.setState({ pickList: pickList });
	            });
	        }
	    },
	
	    /**
	     * Get value of the field
	     * @return {string} the code of the curren value
	     */
	    getValue: function getValue() {
	        var autocomplete = this.refs.autocomplete;
	        var _props2 = this.props,
	            allowUnmatchedValue = _props2.allowUnmatchedValue,
	            value = _props2.value;
	
	        return autocomplete ? autocomplete.getValue() : allowUnmatchedValue ? this.state.value : value;
	    },
	
	    /**
	     * Render the edit mode
	     * @return {HTML} rendered element
	     */
	    _renderEdit: function _renderEdit() {
	        var _props3 = this.props,
	            AutocompleteComp = _props3.AutocompleteComp,
	            allowUnmatchedValue = _props3.allowUnmatchedValue,
	            codeResolver = _props3.codeResolver,
	            onInputBlur = _props3.onInputBlur,
	            selectionHandler = _props3.selectionHandler,
	            code = _props3.value,
	            InputAutoComplete = _props3.InputAutoComplete,
	            defaultPickList = _props3.pickList,
	            otherProps = _objectWithoutProperties(_props3, ['AutocompleteComp', 'allowUnmatchedValue', 'codeResolver', 'onInputBlur', 'selectionHandler', 'value', 'InputAutoComplete', 'pickList']);
	
	        var pickList = this.state.pickList;
	
	        return React.createElement(AutocompleteComp, _extends({
	            InputAutoComplete: InputAutoComplete,
	            allowUnmatchedValue: allowUnmatchedValue,
	            code: code,
	            codeResolver: codeResolver,
	            inputChangeHandler: this._doLoad,
	            onInputBlur: onInputBlur,
	            pickList: pickList,
	            ref: 'autocomplete',
	            selectionHandler: selectionHandler
	        }, otherProps));
	    },
	
	    /**
	     * Render the consult mode
	     * @return {HTML} rendered element
	     */
	    _renderConsult: function _renderConsult() {
	        var value = this.state.value;
	        var code = this.props.value;
	
	        return React.createElement(
	            'span',
	            null,
	            value ? value : code
	        );
	    },
	
	    /**
	     * Render the component
	     * @return {HTML} the rendered component
	     */
	    render: function render() {
	        var isEdit = this.props.isEdit;
	
	        return false === isEdit ? this._renderConsult() : this._renderEdit();
	    }
	};
	
	module.exports = (0, _builder2.default)(AutocompleteFor);

/***/ }),
/* 815 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var oneOf = React.PropTypes.oneOf;
	
	var i18nBehaviour = __webpack_require__(293);
	var styleBehaviour = __webpack_require__(816);
	var Title = __webpack_require__(817).component;
	
	var _require = __webpack_require__(529),
	    includes = _require.includes;
	
	/**
	* Mixin used in order to create a block.
	* @type {Object}
	*/
	
	
	var blockMixin = {
	    mixins: [i18nBehaviour, styleBehaviour],
	
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            actionsPosition: 'top'
	        };
	    },
	
	
	    /** @inheritedDoc */
	    propTypes: {
	        actions: (0, _types2.default)('func'),
	        actionsPosition: oneOf(['both', 'bottom', 'top']),
	        title: (0, _types2.default)('string')
	    },
	    /**
	    * Header of theblock function.
	    * @return {[type]} [description]
	    */
	    heading: function heading() {
	        if (this.props.title) {
	            return this.i18n(this.props.title);
	        }
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents 0.7.0: this component is deprecated, please use FocusComponents.components.Panel');
	    },
	
	    /**
	    * Render the a block container and the cild content of the block.
	    * @return {DOM} React DOM element
	    */
	    render: function render() {
	        var _props = this.props,
	            actions = _props.actions,
	            actionsPosition = _props.actionsPosition,
	            children = _props.children;
	
	        var shouldDisplayActionsTop = actions && includes(['both', 'top'], actionsPosition);
	        var shouldDisplayActionsBottom = actions && includes(['both', 'bottom'], actionsPosition);
	        return React.createElement(
	            'div',
	            { className: 'mdl-card mdl-card--border mdl-shadow--4dp', 'data-focus': 'block' },
	            React.createElement(
	                'div',
	                { className: 'mdl-card__title mdl-card--border', 'data-focus': 'block-title' },
	                React.createElement(Title, { label: this.heading() }),
	                shouldDisplayActionsTop && React.createElement(
	                    'div',
	                    { className: 'actions' },
	                    actions()
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'mdl-card__supporting-text', 'data-focus': 'block-content' },
	                children
	            ),
	            shouldDisplayActionsBottom && React.createElement(
	                'div',
	                { className: 'mdl-card__actions mdl-card--border', 'data-focus': 'block-actions' },
	                actions()
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(blockMixin);

/***/ }),
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	module.exports = {
	    /** @inheritedDocs */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            style: { className: '' }
	        };
	    },
	
	    /** @inheritedDocs */
	    propTypes: {
	        style: (0, _types2.default)('object')
	    },
	    /**
	    * Get the className from the style.className props
	    * @returns {string} - the className.
	    */
	    _getStyleClassName: function getStyleClassName() {
	        if (this.props.style && this.props.style.className) {
	            return this.props.style.className;
	        }
	        return '';
	    }
	};

/***/ }),
/* 817 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _require = __webpack_require__(406),
	    uniqueId = _require.uniqueId; // Dependencies
	
	
	var titleMixin = {
	
	    /**
	    * Display name.
	    */
	    displayName: 'Title',
	    /** @inheritDoc */
	    getInitialState: function getInitialState() {
	        return {
	            spyId: uniqueId('title_')
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Title\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Title');
	    },
	
	    /**
	    * Props validation
	    */
	    propTypes: {
	        id: (0, _types2.default)('string'),
	        label: (0, _types2.default)('string')
	    },
	    /**
	    * Render the component.
	    * @returns {JSX} Htm code.
	    */
	    render: function render() {
	        var spyId = this.state.spyId;
	        var _props = this.props,
	            id = _props.id,
	            label = _props.label;
	
	        return _react2.default.createElement(
	            'h3',
	            { 'data-spy': spyId, id: id },
	            label
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(titleMixin);

/***/ }),
/* 818 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
		action: __webpack_require__(819),
		backToTop: __webpack_require__(820),
		back: __webpack_require__(821)
	};

/***/ }),
/* 819 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var stylableMixin = __webpack_require__(816);
	
	var BTN_JS = 'mdl-js-button';
	var BTN_CLASS = 'mdl-button';
	var BUTTON_PRFX = 'mdl-button--';
	var RIPPLE_EFFECT = 'mdl-js-ripple-effect';
	
	var materialBehaviour = __webpack_require__(521);
	
	var propTypes = {
	    id: _react.PropTypes.string,
	    label: _react.PropTypes.string,
	    handleOnClick: _react.PropTypes.func,
	    type: _react.PropTypes.oneOf(['submit', 'button']),
	    shape: _react.PropTypes.oneOf([undefined, 'raised', 'fab', 'icon', 'mini-fab']),
	    color: _react.PropTypes.oneOf([undefined, 'colored', 'primary', 'accent']),
	    hasRipple: _react.PropTypes.bool,
	    isJs: _react.PropTypes.bool,
	    icon: _react.PropTypes.string,
	    iconLibrary: _react.PropTypes.oneOf(['material', 'font-awesome', 'font-custom'])
	};
	
	/**
	* Mixin button.
	* @type {Object}
	*/
	var buttonMixin = {
	    /** inheritedDoc */
	    mixins: [stylableMixin, materialBehaviour],
	    displayName: 'Button',
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Button\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Button');
	    },
	
	    /** inheritedDoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            type: 'submit',
	            shape: 'raised',
	            label: '',
	            icon: null,
	            id: '',
	            hasRipple: false,
	            isJs: false,
	            iconLibrary: 'material'
	        };
	    },
	
	    propTypes: propTypes,
	    /**
	    * Handle click event.
	    * @return {Object} - Action call.
	    */
	    handleOnClick: function handleOnClick() {
	        var handleOnClick = this.props.handleOnClick;
	
	        if (handleOnClick) {
	            return handleOnClick.apply(this, arguments);
	        }
	    },
	
	    /**
	    * Date de composant.
	    * @return {string} Classe.
	    */
	    _getComponentClassName: function _getComponentClassName() {
	        var _props = this.props,
	            shape = _props.shape,
	            color = _props.color,
	            hasRipple = _props.hasRipple,
	            isJs = _props.isJs;
	
	        var SHAPE_CLASS = void 0;
	        switch (shape) {
	            case 'raised':
	                SHAPE_CLASS = BUTTON_PRFX + 'raised';
	                break;
	            case 'fab':
	                SHAPE_CLASS = BUTTON_PRFX + 'fab';
	                break;
	            case 'icon':
	                SHAPE_CLASS = BUTTON_PRFX + 'icon';
	                break;
	            case 'mini-fab':
	                SHAPE_CLASS = BUTTON_PRFX + 'mini-fab ' + BUTTON_PRFX + 'fab';
	                break;
	            default:
	                SHAPE_CLASS = null;
	                break;
	        }
	        var COLOR_CLASS = color ? '' + BUTTON_PRFX + color : '';
	        var JS_CLASS = isJs ? BTN_JS : '';
	        var RIPPLE_EFFECT_CLASS = hasRipple ? RIPPLE_EFFECT : '';
	        return BTN_CLASS + ' ' + COLOR_CLASS + ' ' + SHAPE_CLASS + ' ' + JS_CLASS + ' ' + RIPPLE_EFFECT_CLASS;
	    },
	
	    /**
	    * Render the pressed button.
	    * @return {Component} - Component button.
	    */
	    renderPressedButton: function renderPressedButton() {
	        return _react2.default.createElement(
	            'button',
	            null,
	            'Loading...'
	        );
	    },
	
	    /**
	    * Render an icon.
	    * @return {Component} - Composant icone.
	    */
	    _renderIcon: function _renderIcon() {
	        var _props2 = this.props,
	            icon = _props2.icon,
	            iconLibrary = _props2.iconLibrary;
	
	        switch (iconLibrary) {
	            case 'material':
	                return _react2.default.createElement(
	                    'i',
	                    { className: 'material-icons' },
	                    icon
	                );
	            case 'font-awesome':
	                var faCss = 'fa fa-' + icon;
	                return _react2.default.createElement('i', { className: faCss });
	            case 'font-custom':
	                return _react2.default.createElement('span', { className: 'icon-' + icon });
	            default:
	                return null;
	        }
	    },
	
	    /**
	    * Render the label.
	    * @return {Component} - Tle button label.
	    */
	    _renderLabel: function _renderLabel() {
	        var _props3 = this.props,
	            label = _props3.label,
	            shape = _props3.shape;
	
	        if (label && 'fab' !== shape && 'icon' !== shape && 'mini-fab' !== shape) {
	            return (0, _translation.translate)(label);
	        }
	        return null;
	    },
	
	    /** inheritedDoc */
	    render: function render() {
	        var _props4 = this.props,
	            className = _props4.className,
	            icon = _props4.icon,
	            id = _props4.id,
	            type = _props4.type,
	            label = _props4.label,
	            style = _props4.style,
	            otherProps = _objectWithoutProperties(_props4, ['className', 'icon', 'id', 'type', 'label', 'style']);
	
	        return _react2.default.createElement(
	            'button',
	            _extends({ alt: (0, _translation.translate)(label), className: className + ' ' + this._getComponentClassName(), 'data-focus': 'button-action', id: id, onClick: this.handleOnClick, title: (0, _translation.translate)(label), type: type }, otherProps),
	            icon && this._renderIcon(),
	            this._renderLabel()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(buttonMixin);

/***/ }),
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var Button = __webpack_require__(819).component;
	var i18nMixin = __webpack_require__(293);
	var stylableMixin = __webpack_require__(816);
	
	var _require = __webpack_require__(602),
	    scrollTo = _require.scrollTo,
	    scrollPosition = _require.scrollPosition;
	
	/**
	* Mixin button.
	* @type {Object}
	*/
	
	
	var backToTopMixin = {
	    displayName: 'ButtonBackToTop',
	    mixins: [i18nMixin, stylableMixin],
	    /** inheritedDoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            iconPrefix: 'fa fa-',
	            iconName: 'arrow-circle-up',
	            duration: 100,
	            scrollStart: 100
	        };
	    },
	
	    /**
	    * Props validation
	    */
	    propTypes: {
	        iconPrefix: (0, _types2.default)('string'),
	        iconName: (0, _types2.default)('string'),
	        duration: (0, _types2.default)('number'),
	        scrollStart: (0, _types2.default)('number')
	    },
	    /** inheritedDoc */
	    getInitialState: function getInitialState() {
	        return {
	            isVisible: false
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'ButtonBackToTop\' component from FocusComponents.common is deprecated, please use FocusComponents.components.ButtonBackToTop');
	    },
	
	    /**
	    * Component did mount, attach the scroll spy
	    */
	    componentDidMount: function componentDidMount() {
	        this._scrollCarrier = window;
	        this._scrollCarrier.addEventListener('scroll', this._scrollSpy);
	        this._scrollCarrier.addEventListener('resize', this._scrollSpy);
	        this._scrollSpy();
	    },
	    componentWillUnmount: function componentWillUnmount() {
	        this._scrollCarrier.removeEventListener('scroll', this._scrollSpy);
	        this._scrollCarrier.removeEventListener('resize', this._scrollSpy);
	    },
	
	    /**
	    * The scroll event handler
	    * @private
	    */
	    _scrollSpy: function _scrollSpy() {
	        var currentScrollPosition = scrollPosition();
	        if (currentScrollPosition.top > this.props.scrollStart) {
	            if (!this.state.isVisible) {
	                this.setState({ isVisible: true });
	            }
	        } else {
	            if (this.state.isVisible) {
	                this.setState({ isVisible: false });
	            }
	        }
	    },
	
	    /**
	    * Go back to the top of the page.
	    */
	    goBackToTop: function goBackToTop() {
	        //TODO: Add animation
	        scrollTo(undefined, 0);
	    },
	
	    /** inheritedDoc */
	    render: function render() {
	        var isVisible = this.state.isVisible;
	
	        return isVisible ? React.createElement(
	            'div',
	            { 'data-focus': 'back-to-top' },
	            React.createElement(Button, { color: 'colored', handleOnClick: this.goBackToTop, icon: 'expand_less', shape: 'fab' })
	        ) : null;
	    }
	};
	
	module.exports = (0, _builder2.default)(backToTopMixin);

/***/ }),
/* 821 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _history = __webpack_require__(143);
	
	var _history2 = _interopRequireDefault(_history);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Mixins
	
	// Dependencies
	var i18nMixin = __webpack_require__(293);
	var stylableMixin = __webpack_require__(816);
	
	// Components
	
	var Button = __webpack_require__(819).component;
	
	/**
	* Mixin button.
	* @type {Object}
	*/
	var buttonBackMixin = {
	    /** inheritedDoc */
	    mixins: [i18nMixin, stylableMixin],
	    /** inheritedDoc */
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: this component is deprecated, please use FocusComponents.components.Back');
	    },
	    render: function render() {
	        return _react2.default.createElement(Button, {
	            handleOnClick: function handleOnClick() {
	                _history2.default.history.back();
	            },
	            icon: 'keyboard_backspace',
	            label: this.i18n('button.back'),
	            shape: null,
	            type: 'button' });
	    }
	};
	
	module.exports = (0, _builder2.default)(buttonBackMixin);

/***/ }),
/* 822 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var emptyMixin = {
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Empty\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Empty');
	    },
	    render: function render() {
	        return React.createElement('div', { 'data-focus': 'empty' });
	    }
	};
	
	module.exports = (0, _builder2.default)(emptyMixin);

/***/ }),
/* 823 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Mixins
	var valueBehaviour = __webpack_require__(824);
	var validationBehaviour = __webpack_require__(825);
	// Components
	var builtInComponents = __webpack_require__(828);
	
	/**
	 * Mixin for the field helper.
	 * @type {Object}
	 */
	var FieldMixin = {
	    /** @inheriteDoc */
	    mixins: [valueBehaviour, validationBehaviour, builtInComponents],
	    /** @inheriteDoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            isEdit: true,
	            type: 'text'
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        /**
	        * Edition mode of the field.
	        * @type {Boolean}
	        */
	        isEdit: (0, _types2.default)('bool'),
	        /**
	        * HTML input type.
	        * @type {String}
	        */
	        type: (0, _types2.default)('string'),
	        /**
	        * Field name.
	        * @type {string}
	        */
	        name: (0, _types2.default)('string'),
	        value: (0, _types2.default)(['string', 'number'])
	    },
	    /** @inheritdoc */
	    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	        this.setState({ value: newProps.value, error: newProps.error, values: newProps.values });
	    },
	
	    /**
	    * Get the css class of the field component.
	    */
	    _className: function _className() {
	        var stateClass = this.state.error ? 'is-invalid' : '';
	        return 'mdl-grid ' + stateClass;
	    },
	
	    /** @inheritdoc */
	    render: function render() {
	        var error = this.state.error;
	        var _props = this.props,
	            FieldComponent = _props.FieldComponent,
	            InputLabelComponent = _props.InputLabelComponent,
	            domain = _props.domain,
	            codeResolver = _props.codeResolver,
	            searcher = _props.searcher,
	            keyResolver = _props.keyResolver,
	            querySearcher = _props.querySearcher,
	            isRequired = _props.isRequired,
	            values = _props.values,
	            hasLabel = _props.hasLabel,
	            isEdit = _props.isEdit;
	
	        var isCustomComponent = FieldComponent || InputLabelComponent;
	        var autocomplete = this.autocomplete,
	            autocompleteSelect = this.autocompleteSelect,
	            autocompleteText = this.autocompleteText,
	            label = this.label,
	            input = this.input,
	            select = this.select,
	            display = this.display;
	
	        return _react2.default.createElement(
	            'div',
	            { className: 'mdl-grid', 'data-domain': domain, 'data-focus': 'field', 'data-mode': isEdit ? 'edit' : 'consult', 'data-required': isRequired, 'data-valid': !error },
	            isCustomComponent && this._renderFieldComponent(),
	            !isCustomComponent && hasLabel && label(),
	            !isCustomComponent && _react2.default.createElement(
	                'div',
	                { className: '' + this._getContentGridClassName(), 'data-focus': 'field-value-container' },
	                codeResolver && searcher ? autocomplete() : keyResolver && querySearcher ? autocompleteSelect() : querySearcher ? autocompleteText() : isEdit ? values ? select() : input() : display()
	            )
	        );
	    }
	};
	module.exports = (0, _builder2.default)(FieldMixin);

/***/ }),
/* 824 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _require = __webpack_require__(148),
	    isObject = _require.isObject,
	    isFunction = _require.isFunction,
	    isUndefined = _require.isUndefined;
	
	var EMPTY = '';
	var valueBehaviourMixin = {
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            error: undefined,
	            value: undefined
	        };
	    },
	
	    /** @inheritdoc */
	    getInitialState: function getInitialState() {
	        return {
	            error: this.props.error,
	            value: this.props.value
	        };
	    },
	
	    /**
	    * Gte the value from the field, it will look into the refs for the value, then into the state and then into the props.
	    * If the value is null or empty string the value will be changed to undefined.
	    * @return {object} - The value of the field.
	    */
	    getValue: function getValue() {
	        var value = void 0;
	        if (isObject(this.refs) && isObject(this.refs.input) && isFunction(this.refs.input.getValue)) {
	            value = this.refs.input.getValue();
	        } else if (this.state && this.state.value !== undefined) {
	            value = this.state.value;
	        } else if (this.props && this.props.value !== undefined) {
	            value = this.props.value;
	        }
	        if (isUndefined(value) || EMPTY === value) {
	            value = null;
	        }
	        return value;
	    },
	
	    /**
	    * Handler called when the input Change its value.
	    * @param {event} event - The event to set.
	    * @deprecated
	    */
	    onInputChange: function onInputChange(newValue) {
	        if (this.props.onChange) {
	            console.warn('\n                FOCUS 0.7.0\n                The onChange props signature has changed, instead of providing the DOM event with an object event: {target: \'The new value\'},\n                the new value is directly passed to the onChange function \'The new Value\'.\n                Don\'t forget that in your code you have to change the way you read the new value and you have to update the state of the component with\n                this.setState({error: null, value: newValue});\n            ');
	            return this.props.onChange(newValue);
	        }
	        this.setState({ error: null, value: newValue });
	    }
	};
	module.exports = valueBehaviourMixin;

/***/ }),
/* 825 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _validate = __webpack_require__(826);
	
	var _validate2 = _interopRequireDefault(_validate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var i18nMixin = __webpack_require__(827).mixin;
	
	var _require = __webpack_require__(148),
	    isNull = _require.isNull,
	    isUndefined = _require.isUndefined,
	    isFunction = _require.isFunction;
	
	var validationMixin = {
	    mixins: [i18nMixin],
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            isRequired: false,
	            validator: undefined
	        };
	    },
	    /**
	    * Compute the validation status and merge all errors into one.
	    * @param  {object} validationStatus - The result from the validation.
	    * @return {true | string} - true if the validation is ok and a message if it is not the case.
	    */
	    _computeValidationStatus: function _computeValidationStatus(validationStatus) {
	        if (validationStatus.isValid) {
	            return true;
	        }
	        return validationStatus.errors.join(', ');
	    },
	
	    /**
	    * Validate the input.
	    * @return {object}
	    */
	    validateInput: function validateInputText() {
	        var shouldComponentHandleValidation = this.refs && this.refs.input && isFunction(this.refs.input.validate);
	        var value = this.getValue();
	        var _props = this.props,
	            isRequired = _props.isRequired,
	            validator = _props.validator,
	            label = _props.label;
	
	        if (isRequired && (undefined === value || null === value)) {
	            return this.i18n('field.required', { name: this.i18n(label) });
	        }
	        //The validation is performed only when the field has a value, otherwise, only the required validation is performed.
	        if (validator && !isUndefined(value) && !isNull(value)) {
	            var validStat = this._computeValidationStatus((0, _validate2.default)({ value: value, name: this.i18n(label) }, validator));
	            if (true !== validStat) {
	                validStat = this.i18n(validStat);
	            }
	            return validStat;
	        }
	        return shouldComponentHandleValidation ? this._customValidate(this.refs.input) : true;
	    },
	    _customValidate: function _customValidate(_ref) {
	        var componentValidation = _ref.validate;
	
	        var _componentValidation = componentValidation(),
	            isValid = _componentValidation.isValid,
	            message = _componentValidation.message;
	
	        return isValid ? true : this.i18n(message);
	    },
	
	    /**
	    * Validate the field.
	    * @return {object} - undefined if valid, {name: "errors"} if not valid.
	    */
	    validate: function validate() {
	        var isValid = this.validateInput();
	        if (true !== isValid) {
	            this.setError(isValid);
	            return isValid;
	        }
	    },
	
	    /**
	    * Set the error on the field.
	    * @param error Error to set.
	    */
	    setError: function setErrorOnField(error) {
	        this.setState({ error: error });
	    }
	};
	module.exports = validationMixin;

/***/ }),
/* 826 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_826__;

/***/ }),
/* 827 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    mixin: __webpack_require__(293)
	};

/***/ }),
/* 828 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Dependencies
	
	// Components
	
	
	// Mixins
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _find2 = __webpack_require__(547);
	
	var _find3 = _interopRequireDefault(_find2);
	
	var _result = __webpack_require__(395);
	
	var _result2 = _interopRequireDefault(_result);
	
	var _objectAssign = __webpack_require__(519);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _isReactClassComponent = __webpack_require__(829);
	
	var _field = __webpack_require__(426);
	
	var _field2 = _interopRequireDefault(_field);
	
	var _field3 = __webpack_require__(431);
	
	var _field4 = _interopRequireDefault(_field3);
	
	var _text = __webpack_require__(438);
	
	var _text2 = _interopRequireDefault(_text);
	
	var _text3 = __webpack_require__(830);
	
	var _text4 = _interopRequireDefault(_text3);
	
	var _select = __webpack_require__(451);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _label = __webpack_require__(610);
	
	var _label2 = _interopRequireDefault(_label);
	
	var _field5 = __webpack_require__(814);
	
	var _fieldGridBehaviour = __webpack_require__(831);
	
	var _fieldGridBehaviour2 = _interopRequireDefault(_fieldGridBehaviour);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var fieldBuiltInComponentsMixin = {
	    mixins: [_fieldGridBehaviour2.default],
	    getDefaultProps: function getDefaultProps() {
	        return {
	            /**
	            * Does the component has a Label.
	            * @type {Boolean}
	            */
	            hasLabel: true,
	            /**
	            * Redefine complety the component.
	            * @type {Object}
	            */
	            FieldComponent: undefined,
	            /**
	            * Redefine only the input and label component.
	            * @type {Object}
	            */
	            InputLabelComponent: undefined,
	            /**
	            * Component for the input.
	            * @type {Object}
	            */
	            InputComponent: _text2.default,
	            /**
	             * Autocomplete component
	             * @type {Object}
	             */
	            AutocompleteComponent: _field5.component,
	            AutocompleteSelectComponent: _field2.default,
	            AutocompleteTextComponent: _field4.default,
	            /**
	            * Component for the select.
	            * @type {Object}
	            */
	            SelectComponent: _select2.default,
	            /**
	            * Component for the display.
	            * @type {Object}
	            */
	            DisplayComponent: _text4.default,
	            /**
	            * Component for the label.
	            * @type {Object}
	            */
	            LabelComponent: _label2.default
	        };
	    },
	
	    /** @inheriteDoc */
	    propTypes: {
	        AutocompleteComponent: _react.PropTypes.func,
	        AutocompleteSelectComponent: _react.PropTypes.func,
	        DisplayComponent: _react.PropTypes.func,
	        FieldComponent: _react.PropTypes.func,
	        InputComponent: _react.PropTypes.func,
	        InputLabelComponent: _react.PropTypes.func,
	        LabelComponent: _react.PropTypes.func,
	        SelectComponent: _react.PropTypes.func,
	        hasLabel: _react.PropTypes.bool,
	        labelSize: _react.PropTypes.number
	    },
	    _buildStyle: function _buildStyle() {
	        var style = this.props.style;
	
	        style = style || {};
	        style.className = style && style.className ? style.className : '';
	        return style;
	    },
	
	    /**
	    * Render the label part of the component.
	    * @returns {Component} - The builded label component.
	    */
	    label: function label() {
	        var _props = this.props,
	            name = _props.name,
	            label = _props.label,
	            LabelComponent = _props.LabelComponent,
	            domain = _props.domain,
	            isRequired = _props.isRequired;
	
	        return _react2.default.createElement(
	            'div',
	            {
	                className: '' + this._getLabelGridClassName(),
	                'data-focus': 'field-label-container'
	            },
	            _react2.default.createElement(LabelComponent, {
	                domain: domain,
	                name: name,
	                text: label,
	                isRequired: isRequired
	            })
	        );
	    },
	
	    /**
	    * Rendet the input part of the component.
	    * @return {Component} - The constructed input component.
	    */
	    input: function input() {
	        var _props2 = this.props,
	            id = _props2.name,
	            placeholder = _props2.placeholder;
	        var _state = this.state,
	            value = _state.value,
	            error = _state.error;
	        var onChange = this.onInputChange;
	
	        var inputBuildedProps = _extends({}, this.props, {
	            id: id,
	            onChange: onChange,
	            value: value,
	            error: error,
	            placeholder: placeholder
	        });
	        var finalInputProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.InputComponent, inputBuildedProps, _isReactClassComponent.INPUT);
	        return _react2.default.createElement(this.props.InputComponent, finalInputProps);
	    },
	
	    /**
	     * Autocomplete render
	     * @return {JSX} rendered component
	     */
	    autocomplete: function autocomplete() {
	        var _props3 = this.props,
	            id = _props3.name,
	            placeholder = _props3.placeholder;
	        var _state2 = this.state,
	            value = _state2.value,
	            error = _state2.error;
	        var onChange = this.onInputChange;
	
	        var inputBuildedProps = _extends({}, this.props, {
	            id: id,
	            onChange: onChange,
	            value: value,
	            error: error,
	            placeholder: placeholder
	        });
	        var finalInputProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.AutocompleteComponent, inputBuildedProps, _isReactClassComponent.INPUT);
	        return _react2.default.createElement(this.props.AutocompleteComponent, finalInputProps);
	    },
	    autocompleteSelect: function autocompleteSelect() {
	        var _props4 = this.props,
	            id = _props4.name,
	            placeHolder = _props4.label;
	        var _state3 = this.state,
	            value = _state3.value,
	            error = _state3.error;
	        var onChange = this.onInputChange;
	
	        var inputBuildedProps = _extends({}, this.props, {
	            id: id,
	            onChange: onChange,
	            value: value,
	            error: error,
	            placeHolder: placeHolder
	        });
	        var finalInputProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.AutocompleteSelectComponent, inputBuildedProps, _isReactClassComponent.INPUT);
	        return _react2.default.createElement(this.props.AutocompleteSelectComponent, finalInputProps);
	    },
	    autocompleteText: function autocompleteText() {
	        var _props5 = this.props,
	            id = _props5.name,
	            placeHolder = _props5.label;
	        var _state4 = this.state,
	            value = _state4.value,
	            error = _state4.error;
	        var onChange = this.onInputChange;
	
	        var inputBuildedProps = _extends({}, this.props, {
	            id: id,
	            onChange: onChange,
	            value: value,
	            error: error,
	            placeHolder: placeHolder
	        });
	        var finalInputProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.AutocompleteTextComponent, inputBuildedProps, _isReactClassComponent.INPUT);
	        return _react2.default.createElement(this.props.AutocompleteTextComponent, finalInputProps);
	    },
	
	    /**
	     * Build a select component depending on the domain, definition and props.
	     * @return {Component} - The builded select component.
	     */
	    select: function select() {
	        var _state5 = this.state,
	            error = _state5.error,
	            value = _state5.value;
	
	        var buildedSelectProps = _extends({}, this.props, {
	            value: value,
	            style: this._buildStyle(),
	            onChange: this.onInputChange,
	            error: error
	        });
	        var finalSelectProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.SelectComponent, buildedSelectProps, _isReactClassComponent.INPUT);
	        return _react2.default.createElement(this.props.SelectComponent, finalSelectProps);
	    },
	
	    /**
	    * Render the display part of the component.
	    * @return {object} - The display part of the compoennt if the mode is not edit.
	    */
	    display: function display() {
	        var value = this.state.value;
	        var _props6 = this.props,
	            name = _props6.name,
	            valueKey = _props6.valueKey,
	            labelKey = _props6.labelKey,
	            values = _props6.values;
	
	        var _processValue = values ? (0, _result2.default)((0, _find3.default)(values, _defineProperty({}, valueKey || 'code', value)), labelKey || 'label') : value;
	        var buildedDislplayProps = _extends({}, this.props, {
	            id: name,
	            style: this._buildStyle(),
	            value: _processValue
	        });
	        var finalDisplayProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.DisplayComponent, buildedDislplayProps, _isReactClassComponent.DISPLAY);
	        return _react2.default.createElement(this.props.DisplayComponent, finalDisplayProps);
	    },
	
	    /**
	    * Render the error part of the component.
	    * @return {object} - The error part of the component.
	    */
	    error: function error() {
	        var error = this.state.error;
	
	        if (error) {
	            return _react2.default.createElement(
	                'span',
	                { className: 'mdl-textfield__error' },
	                error
	            );
	        }
	    },
	
	    /**
	    * Render the help component.
	    * @return {object} - The help part of the component.
	    */
	    help: function help() {
	        var _props7 = this.props,
	            help = _props7.help,
	            name = _props7.name;
	
	        if (help) {
	            return _react2.default.createElement(
	                'label',
	                {
	                    className: 'mdl-textfield__label',
	                    htmFor: '' + name
	                },
	                help
	            );
	        }
	    },
	
	    /**
	     * Render the field component if it is overriden in the component definition.
	     * @return {Component} - The builded field component.
	     */
	    _renderFieldComponent: function _renderFieldComponent() {
	        var FieldComponent = this.props.FieldComponent || this.props.InputLabelComponent;
	        var _state6 = this.state,
	            value = _state6.value,
	            error = _state6.error;
	
	        var buildedProps = _extends({}, this.props, {
	            id: this.props.name,
	            value: value,
	            error: error,
	            onChange: this.onInputChange
	        });
	        var finalBuildedProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(this.props.FieldComponent, buildedProps, _isReactClassComponent.INPUT);
	        return _react2.default.createElement(FieldComponent, finalBuildedProps);
	    }
	};
	
	exports.default = fieldBuiltInComponentsMixin;
	module.exports = exports['default'];

/***/ }),
/* 829 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	//This function aims to test if a component is a
	
	// is a component a react class.
	var isReactClassComponent = exports.isReactClassComponent = function isReactClassComponent(ComponentToTest) {
	  var prototype = ComponentToTest.prototype;
	  if (!prototype) {
	    return false;
	  }
	  return typeof prototype.render === 'function';
	};
	
	var addRefToPropsIfNotPure = exports.addRefToPropsIfNotPure = function addRefToPropsIfNotPure(Component, props, ref) {
	  return isReactClassComponent(Component) ? _extends({}, props, { ref: ref }) : props;
	};
	
	var LIST = exports.LIST = 'list';
	var LINE = exports.LINE = 'line';
	var INPUT = exports.INPUT = 'input';
	var DISPLAY = exports.DISPLAY = 'display';

/***/ }),
/* 830 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var defaultProps = {
	    formatter: function formatter(data) {
	        return data;
	    }
	};
	
	var propTypes = {
	    formatter: _react.PropTypes.func,
	    name: _react.PropTypes.string,
	    style: _react.PropTypes.object,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
	};
	
	//v2 : replace div by span
	function DisplayText(_ref) {
	    var formatter = _ref.formatter,
	        style = _ref.style,
	        value = _ref.value;
	
	    return _react2.default.createElement(
	        'div',
	        { className: style },
	        formatter(value)
	    );
	}
	
	//Static props.
	DisplayText.displayName = 'DisplayText';
	DisplayText.defaultProps = defaultProps;
	DisplayText.propTypes = propTypes;
	
	exports.default = DisplayText;
	module.exports = exports['default'];

/***/ }),
/* 831 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var PropTypes = React.PropTypes;
	
	
	var GRID_SIZE = 12,
	    CELL = 'mdl-cell';
	/**
	 * An example of the label and content size, and of label and content offset, with function fieldFor
	 * 
	 * I want to have the label on the first row of the grid, the field on the second one,
	 * with a 'padding' (offset) of one cell on each row.
	 * 
	 * const fieldOptions = { labelSize: 10, contentSize: 10, labelOffset:1, contentOffset:1 };
	 * ...
	 * {this.fieldFor('nom', fieldOptions)}
	 * 
	 **/
	
	var fieldGridBehaviourMixin = {
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            /**
	            * Size of the label in the grid system.
	            * @type {Number}
	            */
	            labelSize: 4,
	            /**
	             * POsition of the label in the cell.
	             * Possible values: top, middle, bottom
	             * @type {String}
	             */
	            labelCellPosition: 'top',
	            /**
	             * Position of the content in the cell.
	             * Possible values: top, middle, bottom
	             * @type {String}
	             */
	            contentCellPosition: 'top'
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        contentCellPosition: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
	        labelCellPosition: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
	        labelSize: PropTypes.number,
	        contentSize: PropTypes.number,
	        labelOffset: PropTypes.number,
	        contentOffset: PropTypes.number
	    },
	    _buildGridClassName: function _buildGridClassName(prop, suffix) {
	        return prop ? ' mdl-cell--' + prop + (suffix ? suffix : '') : '';
	    },
	    _getCellGridClassName: function _getCellGridClassName(position, size, offset) {
	        var cellPosition = this._buildGridClassName(position);
	        var cellSize = this._buildGridClassName(size, '-col');
	        var cellOffset = this._buildGridClassName(offset, '-offset');
	
	        return CELL + cellPosition + cellSize + cellOffset;
	    },
	    /**
	    * Get the label gridClass.
	    * @returns {string} - The label gridSize.
	    */
	    _getLabelGridClassName: function _getLabelGridClassName() {
	        return this._getCellGridClassName(this.props.labelCellPosition, this.props.labelSize, this.props.labelOffset);
	    },
	    /**
	    * Get the content class Name.
	    * @returns {string} - The content gridSize.
	    */
	    _getContentGridClassName: function _getContentGridClassName() {
	        return this._getCellGridClassName(this.props.contentCellPosition, this.props.contentSize || GRID_SIZE - this.props.labelSize, this.props.contentOffset);
	    },
	    /**
	    * Get the content offset className.
	    * @returns {string} - The label gridSize.
	    */
	    _getContentOffsetClassName: function _getContentOffsetClassName() {
	        return CELL + ' mdl-cell--' + this.props.labelSize + '-offset';
	    }
	};
	module.exports = fieldGridBehaviourMixin;

/***/ }),
/* 832 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	// Common mixins.
	var definitionMixin = __webpack_require__(833);
	//let fieldComponentBehaviour = require('../mixin/field-component-behaviour');
	var builtInComponents = __webpack_require__(835);
	var storeBehaviour = __webpack_require__(852);
	var ownIdentifierBehaviour = __webpack_require__(855);
	//Form mixins.
	
	var _require = __webpack_require__(856),
	    actionBehaviour = _require.actionBehaviour,
	    referenceBehaviour = _require.referenceBehaviour,
	    validationBehaviour = _require.validationBehaviour;
	
	/**
	* Mixin to create a block for the rendering.
	* @type {Object}
	*/
	
	
	var formMixin = {
	    mixins: [ownIdentifierBehaviour, definitionMixin, referenceBehaviour, storeBehaviour, validationBehaviour, actionBehaviour, builtInComponents],
	    /** @inheritdoc */
	    getDefaultProps: function getFormDefaultProps() {
	        return {
	            hasForm: true,
	            /**
	            * Defines it the form can have  an edit mode.
	            * @type {Boolean}
	            */
	            hasEdit: true,
	            /**
	            * Defines if the form has a delete action button.
	            * @type {Boolean}
	            */
	            hasDelete: false,
	            /**
	            * Does the form call the load action on componentdid mount.
	            * @type {Boolean}
	            */
	            hasLoad: true,
	            /**
	            * Defines
	            * @type {Boolean}
	            */
	            isEdit: false,
	            /**
	            * Style of the component.
	            * @type {Object}
	            */
	            style: {}
	        };
	    },
	    /** @inheritdoc */
	    getInitialState: function getFormInitialState() {
	        return {
	            /**
	            * Identifier of the entity.
	            * @type {[type]}
	            */
	            id: this.props.id,
	            isEdit: this.props.isEdit
	        };
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	        var newProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var isEdit = newProps.isEdit;
	
	        if (isEdit !== undefined) {
	            this.setState({ isEdit: isEdit });
	        }
	    },
	
	    /** @inheritdoc */
	    callMountedActions: function formCallMountedActions() {
	        if (this.props.hasLoad) {
	            this._loadData();
	        }
	        this._loadReference();
	    },
	    /** @inheritdoc */
	    componentDidMount: function formDidMount() {
	        //Build the definitions.
	        if (this.registerListeners) {
	            this.registerListeners();
	        }
	        if (this.callMountedActions) {
	            this.callMountedActions();
	        }
	    },
	    /** @inheritdoc */
	    componentWillUnmount: function formWillMount() {
	        if (this.unregisterListeners) {
	            this.unregisterListeners();
	        }
	    },
	    _mode: function _mode() {
	        return '' + (this.state.isEdit ? 'edit' : 'consult');
	    },
	    _className: function formClassName() {
	        return 'form-horizontal ' + this.props.style.className;
	    },
	    _renderActions: function renderActions() {
	        if (this.renderActions) {
	            return this.renderActions();
	        }
	        return this.state.isEdit ? this._renderEditActions() : this._renderConsultActions();
	    },
	    _renderEditActions: function _renderEditActions() {
	        return this.renderEditActions ? this.renderEditActions() : React.createElement(
	            'span',
	            null,
	            this.buttonSave(),
	            this.buttonCancel()
	        );
	    },
	    _renderConsultActions: function _renderConsultActions() {
	        return this.renderConsultActions ? this.renderConsultActions() : React.createElement(
	            'div',
	            null,
	            this.props.hasEdit && this.buttonEdit(),
	            this.props.hasDelete && this.buttonDelete()
	        );
	    },
	    /**
	    * Handle the form submission.
	    * @param {Event} e - React sanityze event from the form submit.
	    */
	    _handleSubmitForm: function _handleSubmitForm(e) {
	        e.preventDefault();
	        if (this._validate()) {
	            this.action.save.call(this, this._getEntity());
	        }
	        //return false;
	    },
	
	    /** @inheritdoc */
	    render: function render() {
	        //console.log('state form', this.state);
	        if (this.props.hasForm) {
	            return React.createElement(
	                'form',
	                { className: this._className(), 'data-loading': this.state.isLoading, 'data-mode': this._mode(), noValidate: true, onSubmit: this._handleSubmitForm },
	                React.createElement(
	                    'fieldset',
	                    null,
	                    this.renderContent()
	                )
	            );
	        }
	        return this.renderContent();
	    }
	};
	
	module.exports = (0, _builder2.default)(formMixin);

/***/ }),
/* 833 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(834);
	
	var definitionMixin = {
	    /**
	    * Build the entity definition givent the path of the definition.
	    */
	    _buildDefinition: function buildFormDefinition() {
	        if (!this.definitionPath) {
	            throw new Error('the definition path should be defined to know the domain of your entity property.');
	        }
	        this.definition = (0, _builder.getEntityInformations)(this.definitionPath, this.additionalDefinition);
	    },
	    /** @inheritdoc */
	    componentWillMount: function definitionWillMount() {
	        this._buildDefinition();
	    }
	}; //Dependencies.
	/**
	* Accessor on the entity informations.
	* @type {function} - Get the entity definition for a given key.
	*/
	
	
	module.exports = definitionMixin;

/***/ }),
/* 834 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_834__;

/***/ }),
/* 835 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _application = __webpack_require__(399);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	// Dependencies
	
	var React = __webpack_require__(146);
	
	var assign = __webpack_require__(519);
	var result = __webpack_require__(395);
	var find = __webpack_require__(547);
	// Components
	
	var Field = __webpack_require__(823).component;
	var Text = __webpack_require__(830);
	var Button = __webpack_require__(221);
	var MemoryList = __webpack_require__(836).component;
	var Table = __webpack_require__(838).list.component;
	var List = __webpack_require__(848).list.component;
	
	// Mixins
	
	var fieldComponentBehaviour = __webpack_require__(842);
	
	module.exports = {
	    mixins: [fieldComponentBehaviour],
	    /**
	    * Create a field for the given property metadata.
	    * @param {string} name - property name.
	    * @param {object} options - An object which contains all options for the built of the field.
	    * @returns {object} - A React Field.
	    */
	    fieldFor: function fieldFor(name, options) {
	        options = assign({}, options);
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return this._renderField(fieldProps);
	    },
	    autocompleteFor: function autocompleteFor() {
	        throw new Error('Form\'s autocompleteFor method is deprecated, in order to use the deprecated component, please use this.deprecatedAutocompleteFor. You must migrate all the autocompleteFor to autocompleteSelectFor or autocompleteTextFor in order to follow the library evolutions.');
	    },
	    deprecatedAutocompleteFor: function deprecatedAutocompleteFor(name, _ref) {
	        var codeResolver = _ref.codeResolver,
	            searcher = _ref.searcher;
	        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        options = assign({}, options);
	        options.codeResolver = codeResolver;
	        options.searcher = searcher;
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return this._renderField(fieldProps);
	    },
	    autocompleteSelectFor: function autocompleteSelectFor(name, _ref2) {
	        var keyResolver = _ref2.keyResolver,
	            querySearcher = _ref2.querySearcher;
	        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        options = assign({}, options);
	        options.keyResolver = keyResolver;
	        options.querySearcher = querySearcher;
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return this._renderField(fieldProps);
	    },
	    autocompleteTextFor: function autocompleteTextFor(name, _ref3) {
	        var querySearcher = _ref3.querySearcher;
	        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        options = assign({}, options);
	        options.querySearcher = querySearcher;
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return this._renderField(fieldProps);
	    },
	
	    /**
	    * Display two different fields, depending on wheter the user is editing the form or not
	    * @param  {Object} config the configuration, with the structure {consultField: ..., editField: ...}
	    * @return {Object} the rendered resulting field
	    */
	    dualFieldFor: function dualFieldFor(_ref4) {
	        var consultField = _ref4.consultField,
	            editField = _ref4.editField;
	
	        return this.state.isEdit ? editField : consultField;
	    },
	
	    /**
	    * Select component for the component.
	    * @param {string} name - property name.
	    * @param {string} listName - list name.
	    * @param {object} options - options object.
	    * @returns {object} - A React Field.
	    */
	    selectFor: function selectFor(name, listName, options) {
	        options = options || {};
	        options.listName = listName || options.listName;
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return this._renderField(fieldProps);
	    },
	
	    /**
	    * Display a field.
	    * @param {string} name - property name.
	    * @param {object} options - options object.
	    * @returns {object} - A React Field.
	    */
	    displayFor: function displayFor(name, options) {
	        options = options || {};
	        options.isEdit = false;
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return this._renderField(fieldProps);
	    },
	
	    /**
	    * Display the text for a given property.
	    * @param {string} name  - property name.
	    * @param {object} options - Option object
	    * @returns {object} - A React component.
	    */
	    textFor: function textFor(name, options) {
	        options = options || {};
	        var def = this.definition && this.definition[name] ? this.definition[name] : {};
	        var fieldProps = this._buildFieldProps(name, options, this);
	        var value = this.state[name];
	        var valueKey = fieldProps.valueKey,
	            labelKey = fieldProps.labelKey,
	            values = fieldProps.values;
	
	        var _processValue = values ? result(find(values, _defineProperty({}, valueKey || 'code', value)), labelKey || 'label') : value;
	        return React.createElement(Text, {
	            formatter: options.formatter || def.formatter,
	            name: options.name || this.definitionPath + '.' + name,
	            style: options.style,
	            value: _processValue
	        });
	    },
	
	    /**
	    * Display a list component.
	    * @param {string} name - Property name.
	    * @param {object} options - Options object.
	    * @returns {object} - The react component for the list.
	    */
	    listFor: function listFor(name, options) {
	        options = options || {};
	        options.reference = options.reference || this.state.reference;
	        options.listComponent = options.listComponent || List;
	        var listForProps = assign({}, options, {
	            data: this.state[name],
	            LineComponent: options.lineComponent || options.LineComponent || this.props.LineComponent || this.LineComponent || this.lineComponent,
	            perPage: options.perPage || 5,
	            reference: options.reference,
	            isEdit: options.isEdit !== undefined ? options.isEdit : false
	        });
	        return React.createElement(MemoryList, _extends({ ref: 'list' }, listForProps));
	    },
	
	
	    /**
	    * Display a table component.
	    * @param {string} name - Property name.
	    * @param {object} options - Options object.
	    * @returns {object} - The react component for the list.
	    */
	    tableFor: function tableFor(name, options) {
	        options.listComponent = options.listComponent || Table;
	        return this.listFor(name, options);
	    },
	
	    /**
	    * Button delete generation.
	    * @returns {object} - A Reacte button.
	    */
	    buttonDelete: function buttonDelete() {
	        var _this = this;
	
	        var handleOnClick = function handleOnClick() {
	            _this.action.delete.call(_this, _this._getEntity());
	        };
	        return React.createElement(Button, {
	            handleOnClick: handleOnClick,
	            icon: 'delete',
	            label: 'button.delete',
	            shape: null,
	            type: 'button'
	        });
	    },
	
	    /**
	    * Edition button.
	    * @returns {object} - The React component for the button.
	    */
	    buttonEdit: function buttonEdit() {
	        var _this2 = this;
	
	        var handleOnClick = function handleOnClick() {
	            _this2.setState({ isEdit: !_this2.state.isEdit }, function () {
	                (0, _application.changeMode)('edit', 'consult');
	                _this2.clearError();
	            });
	        };
	        return React.createElement(Button, {
	            handleOnClick: handleOnClick,
	            icon: 'edit',
	            label: 'button.edit',
	            shape: null,
	            type: 'button'
	        });
	    },
	
	    /**
	    * Cancel button.
	    * @returns {object} - The React component for the button.
	    */
	    buttonCancel: function buttonCancel() {
	        var _this3 = this;
	
	        var handleOnClick = function handleOnClick() {
	            _this3.clearError();
	            _this3.setState(_extends({
	                // Change the mode.
	                isEdit: !_this3.state.isEdit
	            }, _this3._getStateFromStores()), function () {
	                (0, _application.changeMode)('consult', 'edit');
	            });
	        };
	        return React.createElement(Button, { handleOnClick: handleOnClick, icon: 'undo', label: 'button.cancel', shape: null, type: 'button' });
	    },
	
	    /**
	    * Button save generation.
	    * @returns {object} - A React  save button.
	    */
	    buttonSave: function buttonSave() {
	        var _this4 = this;
	
	        var handleOnClick = function handleOnClick() {
	            if (_this4._validate()) {
	                _this4.action.save.call(_this4, _this4._getEntity());
	            }
	        };
	        return React.createElement(Button, {
	            handleOnClick: handleOnClick,
	            icon: 'save',
	            label: 'button.save',
	            shape: null,
	            type: 'button'
	        });
	    },
	
	    /**
	    * Render a field with the provided props.
	    * @param  {object} fieldProps the props
	    * @return {XML} rendered field
	    */
	    _renderField: function _renderField(fieldProps) {
	        return React.createElement(Field, fieldProps);
	    }
	};

/***/ }),
/* 836 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	//var SelectionList = Focus.components.list.selection.list.component;
	
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var assign = __webpack_require__(519);
	var omit = __webpack_require__(383);
	var memoryMixin = __webpack_require__(837);
	
	var MemoryListMixin = {
	    mixins: [memoryMixin],
	
	    propTypes: {
	        listComponent: (0, _types2.default)(['func', 'object'])
	    },
	
	    /** @inheritdoc */
	    render: function renderFormList() {
	        var data = this.props.data || [];
	        var hasMoreData = data.length > this.state.maxElements;
	        var childProps = omit(this.props, ['lineComponent', 'data']);
	        return React.createElement(this.props.listComponent, _extends({
	            ref: 'list',
	            data: this.getDataToUse(),
	            hasMoreData: hasMoreData,
	            LineComponent: this.props.LineComponent,
	            isSelection: false,
	            isManualFetch: true,
	            fetchNextPage: this.fetchNextPage,
	            reference: this.getReference()
	        }, childProps));
	    }
	};
	
	module.exports = (0, _builder2.default)(MemoryListMixin);

/***/ }),
/* 837 */
/***/ (function(module, exports) {

	"use strict";
	
	var memoryMixin = {
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            data: [],
	            reference: {},
	            perPage: 5
	        };
	    },
	
	
	    /** @inheritdoc */
	    getInitialState: function getInitialState() {
	        return {
	            page: 1,
	            maxElements: this.props.perPage
	        };
	    },
	
	
	    /**
	     * Calculate the number of element to display in the memory list.
	     * @param page the current page to fetch
	     */
	    fetchNextPage: function fetchNextPage() {
	        var currentPage = this.state.page + 1;
	        this.setState({
	            page: currentPage,
	            maxElements: this.props.perPage * currentPage
	        });
	    },
	
	
	    /**
	     * Calculate the data to display.
	     * @return data list
	     */
	    getDataToUse: function getDataToUse() {
	        if (!this.props.data) {
	            return [];
	        }
	        return this.props.data.slice(0, this.state.maxElements);
	    },
	
	
	    /**
	     * Get the reference lists.
	     * @return {object} object wich contains all reference lists.
	     */
	    getReference: function getReference() {
	        return this.state.reference || this.props.reference;
	    }
	};
	
	module.exports = memoryMixin;

/***/ }),
/* 838 */
[938, 839, 845],
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Mixins
	
	var translationMixin = __webpack_require__(827).mixin; // Dependencies
	
	var referenceMixin = __webpack_require__(840);
	var definitionMixin = __webpack_require__(833);
	var builtInComponentsMixin = __webpack_require__(841);
	
	// Components
	
	var ContextualActions = __webpack_require__(843).component;
	
	var lineMixin = {
	    /**
	     * React component name.
	     */
	    displayName: 'table-line',
	
	    /**
	     * Mixin dependancies.
	     */
	    mixins: [translationMixin, definitionMixin, referenceMixin, builtInComponentsMixin],
	
	    /**@inheritDoc**/
	    getDefaultProps: function getDefaultProps() {
	        return {};
	    },
	
	
	    /**@inheritDoc**/
	    getInitialState: function getInitialState() {
	        return {};
	    },
	
	
	    /**
	     * line property validation.
	     * @type {Object}
	     */
	    propTypes: {
	        data: (0, _types2.default)('object'),
	        saveAction: (0, _types2.default)('func'),
	        deleteAction: (0, _types2.default)('func'),
	        onLineClick: (0, _types2.default)('func'),
	        onSelection: (0, _types2.default)('func'),
	        operationList: (0, _types2.default)('array', true)
	    },
	
	    /**
	     * Render line Actions.
	     */
	    renderLineActions: function renderLineActions() {
	        if (this.props.operationList.length > 0) {
	            return React.createElement(
	                'div',
	                { 'data-focus': 'table-line-actions' },
	                React.createElement(ContextualActions, { operationList: this.props.operationList, operationParam: this.props.data })
	            );
	        }
	    },
	    _onLineClickHandler: function _onLineClickHandler(data) {
	        var _this = this;
	
	        return function () {
	            _this.props.onLineClick(data);
	        };
	    },
	    render: function render() {
	        return this.renderLineContent(this.props.data);
	    }
	};
	
	module.exports = { mixin: lineMixin };

/***/ }),
/* 840 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var referenceMixin = {
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            /**
	             * Size of the label in the grid system.
	             * @type {Number}
	             */
	            reference: {}
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        reference: (0, _types2.default)('object')
	    },
	
	    /**
	     * @returns {object} -
	     */
	    _getReference: function getReference() {
	        return this.props.reference;
	    }
	};
	module.exports = referenceMixin;

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(146);
	var fielBehaviourMixin = __webpack_require__(842);
	var assign = __webpack_require__(519);
	var Field = __webpack_require__(823).component;
	var DisplayText = __webpack_require__(830);
	
	var builtInComponentsMixin = {
	    /**
	     * inherited minxins
	     */
	    mixins: [fielBehaviourMixin],
	
	    /**
	     * @inheritDoc
	     */
	    getDefaultProps: function getbuiltInComponentsMixinDefaultProps() {
	        return {
	            isEdit: false
	        };
	    },
	
	    /**
	     * create an edit field for the given property metadata.
	     * @param {string} name - name of the field.
	     * @param {object} options - An object which contains all options for the built of the field.
	     * @returns {object} - A React Field.
	     */
	    fieldFor: function fieldForInLine(name, options) {
	        options = assign({}, {
	            isEdit: this.props.isEdit,
	            hasLabel: false,
	            value: this.props.data[name],
	            refContainer: this.props.reference,
	            style: { className: 'form-list' }
	        }, options);
	
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return React.createElement(Field, fieldProps);
	    },
	    /**
	     * Add a select with a list name component It is a shortcut for the fieldComponent.
	     * @param {string} name         - The property name.
	     * @param {string} referenceKey - The list name in the references.
	     * @param {object} options - An object which contains all options for the built of the field.
	     * @returns {object} - A React Field.
	     */
	    selectFor: function selectForInLine(name, referenceKey, options) {
	        options = options || {};
	        options.listName = referenceKey;
	        return this.fieldFor(name, options);
	    },
	    /**
	     * Display a field.
	     * @param {string} name - property name.
	     * @param {object} options - options object.
	     * @returns {object} - A React Field in display mode.
	     */
	    displayFor: function displayForInLine(name, options) {
	        options = assign({}, {
	            isEdit: false,
	            hasLabel: false,
	            value: this.props.data[name],
	            refContainer: this.props.reference,
	            style: { className: 'form-list' }
	        }, options);
	
	        var fieldProps = this._buildFieldProps(name, options, this);
	        return React.createElement(Field, fieldProps);
	    },
	
	    /**
	     * Display the text for a given property.
	     * @param {string} name  - property name.
	     * @param {object} options - Option object
	     * @returns {object} - A React component.
	     */
	    textFor: function textFor(name, options) {
	        options = options || {};
	        var def = this.definition && this.definition[name] ? this.definition[name] : {};
	        return React.createElement(DisplayText, {
	            name: options.name || this.definitionPath + '.' + name,
	            style: options.style,
	            FieldComponent: def.FieldComponent,
	            formatter: options.formatter || def.formatter,
	            value: this.props.data[name]
	        });
	    }
	};
	
	module.exports = builtInComponentsMixin;

/***/ }),
/* 842 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assign = __webpack_require__(519);
	
	var _require = __webpack_require__(148),
	    isUndefined = _require.isUndefined,
	    isObject = _require.isObject;
	/**
	 * Identity function
	 * @param  {object} d - data to treat.
	 * @return {object}  - The same object.
	 */
	
	
	function identity(d) {
	    return d;
	}
	
	var fieldBehaviourMixin = {
	    /**
	    * Build the field properties.
	    * @param {string} name - property name.
	    * @param {object} options - An object which contains all options for the built of the field
	    * @param {object} context - Function context, this by default.
	    * @returns {object} - The constructed props for the field.
	    */
	    _buildFieldProps: function _buildFieldProps(name) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	        var context = arguments[2];
	
	        context = context || this;
	        //Properties.
	        var isEdit = options.isEdit !== undefined ? options.isEdit : context.state.isEdit;
	        var value = options.value !== undefined ? options.value : context.state[name];
	        var def = context.definition && context.definition[name] ? context.definition[name] : {};
	        var listName = options.listName || def.listName;
	        //hasLabel
	        var hasLabel = function hasLabel() {
	            if (options.hasLabel !== undefined) {
	                return options.hasLabel;
	            }
	            if (def.hasLabel !== undefined) {
	                return options.hasLabel;
	            }return true;
	        }();
	        //Build a container for the props.
	        name = options.name || this.definitionPath + '.' + name;
	        var propsContainer = {
	            name: name,
	            label: def.label || options.label || name,
	            ref: name,
	            value: value,
	            domain: options.domain || def.domain,
	            error: context.state.error ? context.state.error[name] : undefined,
	            locale: def.locale,
	            format: def.format,
	            //Mode
	            isEdit: isEdit,
	            hasLabel: hasLabel,
	            isRequired: !isUndefined(options.isRequired) && options.isRequired || def.isRequired || def.required, //legacy on required on model generation.
	            //Style
	            style: options.style,
	            // Type
	            type: def.type,
	            //Methods
	            validator: def.validator,
	            formatter: def.formatter || identity,
	            unformatter: def.unformatter || identity,
	            //Component
	            FieldComponent: def.FieldComponent,
	            InputLabelComponent: def.InputLabelComponent,
	            InputComponent: def.InputComponent,
	            SelectComponent: def.SelectComponent,
	            TextComponent: def.TextComponent,
	            DisplayComponent: def.DisplayComponent,
	            options: options.options || def.options //Add options to the fields
	        };
	        //Extend the options object in order to be able to specify more options to thie son's component.
	        var fieldProps = assign(propsContainer, options, options.options || def.options);
	        // Values list.
	        var refContainer = options.refContainer || def.refContainer || context.state.reference;
	
	        // case no props.values and then
	        if (!options.hasOwnProperty('values') && isObject(refContainer) && refContainer.hasOwnProperty(listName)) {
	            assign(fieldProps, { values: refContainer[listName] || [] });
	        }
	        return fieldProps;
	    }
	};
	
	module.exports = fieldBehaviourMixin;

/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var _require = __webpack_require__(529),
	    reduce = _require.reduce;
	
	// Components
	
	var SelectAction = __webpack_require__(844).component;
	
	var actionContextualMixin = {
	
	    /**
	    * Display name.
	    */
	    displayName: 'ActionContextual',
	
	    /**
	    * Init default props.
	    * @returns {object} Default props.
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            buttonComponent: _button2.default,
	            operationList: [],
	            operationParam: undefined
	        };
	    },
	
	    /**
	    * Init default state.
	    * @returns {oject} Initial state.
	    */
	    getInitialState: function getInitialState() {
	        return {
	            isSecondaryActionListExpanded: false // true if secondary actionList is expanded.
	        };
	    },
	
	
	    /**
	    * Handle contextual action on click.
	    * @param {string} key Action key.
	    * @return {function} action handler.
	    */
	    _handleAction: function _handleAction(key) {
	        var _props = this.props,
	            operationList = _props.operationList,
	            operationParam = _props.operationParam;
	
	        return function (event) {
	            event.preventDefault();
	            event.stopPropagation();
	            if (operationParam) {
	                operationList[key].action(operationParam);
	            } else {
	                operationList[key].action();
	            }
	        };
	    },
	
	
	    /**
	    * render the component.
	    * @returns {JSX} Html code.
	    */
	    render: function render() {
	        var _this = this;
	
	        var _props2 = this.props,
	            operationList = _props2.operationList,
	            operationParam = _props2.operationParam,
	            buttonComponent = _props2.buttonComponent;
	        var isSecondaryActionListExpanded = this.state.isSecondaryActionListExpanded;
	
	        var _reduce = reduce(operationList, function (actionLists, operation, key) {
	            var primaryActions = actionLists.primaryActionList,
	                secondaryActions = actionLists.secondaryActionList;
	
	            if (1 === operation.priority) {
	                primaryActions.push(React.createElement(_this.props.buttonComponent, _extends({
	                    handleOnClick: _this._handleAction(key),
	                    icon: operation.icon,
	                    iconLibrary: operation.iconLibrary,
	                    key: key,
	                    label: operation.label,
	                    shape: operation.style && operation.style.shape || 'icon',
	                    style: operation.style || {},
	                    type: 'button'
	                }, _this.props, operation)));
	            } else {
	                secondaryActions.push(operation);
	            }
	            return actionLists;
	        }, { primaryActionList: [], secondaryActionList: [] }, this),
	            primaryActionList = _reduce.primaryActionList,
	            secondaryActionList = _reduce.secondaryActionList;
	
	        return React.createElement(
	            'div',
	            { className: 'list-action-contextual' },
	            React.createElement(
	                'span',
	                null,
	                primaryActionList
	            ),
	            React.createElement(SelectAction, {
	                isExpanded: isSecondaryActionListExpanded,
	                operationList: secondaryActionList,
	                operationParam: operationParam
	            })
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(actionContextualMixin);

/***/ }),
/* 844 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _translation = __webpack_require__(142);
	
	var _uuid = __webpack_require__(401);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Dropdown = {
	
	    /**
	    * Display name.
	    */
	    displayName: 'Dropdown',
	    /**
	    * Default props.
	    * @returns {object} Defauilt props.
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            position: 'right',
	            iconProps: {
	                name: 'more_vert'
	            },
	            shape: 'icon',
	            operationList: []
	        };
	    },
	
	    /**
	    * Scope property validation.
	    * @type {Object}
	    */
	    propTypes: {
	        position: _react.PropTypes.string,
	        iconProps: _react.PropTypes.object,
	        operationList: _react.PropTypes.array,
	        shape: _react.PropTypes.string
	    },
	    /**
	     * Component will mount
	     */
	    componentWillMount: function componentWillMount() {
	        this._htmlId = _uuid2.default.v4();
	    },
	
	    /**
	    * Called when component is mounted.
	    */
	    componentDidMount: function componentDidMount() {
	        if (0 !== this.props.operationList.length && _reactDom2.default.findDOMNode(this.refs.dropdown)) {
	            componentHandler.upgradeElement(_reactDom2.default.findDOMNode(this.refs.dropdown));
	        }
	    },
	
	    /**
	     * Component will receive props.
	     * @param {Object} nextProps the next props
	     */
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        if (0 !== nextProps.operationList.length && _reactDom2.default.findDOMNode(this.refs.dropdown)) {
	            componentHandler.upgradeElement(_reactDom2.default.findDOMNode(this.refs.dropdown));
	        }
	    },
	
	    /**
	    * Called before component is unmounted.
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        if (0 !== this.props.operationList.length && _reactDom2.default.findDOMNode(this.refs.dropdown)) {
	            componentHandler.downgradeElements(_reactDom2.default.findDOMNode(this.refs.dropdown));
	        }
	    },
	
	    /**
	    * Handle action on selected item.
	    * @param {function} action Action to call
	    * @returns {function} Function called when item is selected.
	    * @private
	    */
	    _handleAction: function _handleAction(action) {
	        var _this = this;
	
	        return function () {
	            if (_this.props.operationParam) {
	                action(_this.props.operationParam);
	            } else {
	                action();
	            }
	        };
	    },
	
	    /**
	    * Render the component.
	    * @returns  {XML} Htm code.
	    */
	    render: function render() {
	        var _this2 = this;
	
	        var _props = this.props,
	            iconProps = _props.iconProps,
	            operationList = _props.operationList,
	            position = _props.position,
	            shape = _props.shape;
	
	        var id = this._htmlId;
	        if (0 === operationList.length) {
	            return null;
	        }
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(_button2.default, { icon: iconProps.name, id: id, isJs: true, shape: shape }),
	            _react2.default.createElement(
	                'ul',
	                { className: 'mdl-menu mdl-menu--bottom-' + position + ' mdl-js-menu mdl-js-ripple-effect', htmlFor: id, ref: 'dropdown' },
	                operationList.map(function (operation, idx) {
	                    return _react2.default.createElement(
	                        'li',
	                        { className: 'mdl-menu__item ' + operation.style, key: idx, onClick: _this2._handleAction(operation.action) },
	                        (0, _translation.translate)(operation.label)
	                    );
	                })
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(Dropdown);

/***/ }),
/* 845 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _isReactClassComponent = __webpack_require__(829);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Dependencies
	
	var React = __webpack_require__(146);
	
	var _require = __webpack_require__(341),
	    omit = _require.omit,
	    keys = _require.keys;
	
	var _require2 = __webpack_require__(529),
	    reduce = _require2.reduce;
	//Add a ref to the props if the component is not pure add nothing in the other case.
	
	
	// Table class.
	var TABLE_CSS_CLASS = 'mdl-data-table mdl-js-data-table mdl-shadow--2dp ';
	var TABLE_CELL_CLASS = 'mdl-data-table__cell--non-numeric';
	
	// Mixins
	
	var infiniteScrollMixin = __webpack_require__(846).mixin;
	var translationMixin = __webpack_require__(827).mixin;
	var referenceMixin = __webpack_require__(840);
	var mdlBehaviour = __webpack_require__(521);
	
	// Components
	
	var tableMixin = {
	    /**
	     * React tag name.
	     */
	    displayName: 'Table',
	
	    /**
	     * Mixin dependancies.
	     */
	    mixins: [translationMixin, infiniteScrollMixin, referenceMixin, mdlBehaviour],
	    /** inheriteddoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            data: [],
	            idField: 'id',
	            isLoading: false,
	            operationList: [],
	            isSelectable: false
	        };
	    },
	
	    /** inheriteddoc */
	    proptypes: {
	        data: (0, _types2.default)('array'),
	        isSelectable: (0, _types2.default)('bool'),
	        onLineClick: (0, _types2.default)('func'),
	        idField: (0, _types2.default)('string'),
	        lineComponent: (0, _types2.default)('func').isRequired,
	        operationList: (0, _types2.default)('array'),
	        columns: (0, _types2.default)('object'),
	        sortColumn: (0, _types2.default)('func'),
	        isloading: (0, _types2.default)('bool'),
	        loader: (0, _types2.default)('func')
	    },
	    /**
	     * Render the table header.
	     * @return {Component} - Render the table header.
	     */
	    _renderTableHeader: function _renderTableHeader() {
	        var columns = this.props.columns;
	
	        return React.createElement(
	            'thead',
	            null,
	            React.createElement(
	                'tr',
	                null,
	                reduce(columns, this._renderColumnHeader, [])
	            )
	        );
	    },
	
	    /**
	     * Build a function which is called when there is a click on a table column.
	     * @param  {string} column - Column name.
	     * @param  {string} order  - The order config.
	     * @return {function} - The function to be called when there is a click on it.
	     */
	    _sortColumnAction: function _sortColumnAction(column, order) {
	        var currentComponent = this;
	        return function (event) {
	            event.preventDefault();
	            currentComponent.props.sortColumn(column, order);
	        };
	    },
	
	    /**
	     * Render the column header.
	     * @param {array} accumulator - The array co,ntaining the accumulating component.
	     * @param  {object} colProperties - The column properties.
	     * @param  {string} name - The column name.
	     * @return {Component} - The component header.
	     */
	    _renderColumnHeader: function _renderColumnHeader(accumulator, colProperties, name) {
	        var sort = void 0;
	        if (!this.props.isEdit && !colProperties.noSort) {
	            var order = colProperties.sort ? colProperties.sort : 'asc';
	            var iconName = 'asc' === order ? 'arrow_drop_up' : 'arrow_drop_down';
	            var icon = React.createElement(
	                'i',
	                { className: 'material-icons' },
	                iconName
	            );
	            sort = React.createElement(
	                'a',
	                { className: 'sort', 'data-bypass': true, 'data-name': name, href: '#', onClick: this._sortColumnAction(name, 'asc' === order ? 'desc' : 'asc') },
	                icon
	            );
	        }
	        accumulator.push(React.createElement(
	            'th',
	            { className: TABLE_CELL_CLASS, key: colProperties.label },
	            this.i18n(colProperties.label),
	            sort
	        ));
	        return accumulator;
	    },
	
	    /**
	     * Render the tbody tag and the content.
	     * @return {Component} - The component containing the tbody.
	     */
	    _renderTableBody: function _renderTableBody() {
	        var _this = this;
	
	        var _props = this.props,
	            data = _props.data,
	            TableLineComponent = _props.LineComponent,
	            idField = _props.idField;
	
	        var reference = this._getReference();
	        return React.createElement(
	            'tbody',
	            null,
	            data.map(function (line, idx) {
	                var _props2 = _this.props,
	                    data = _props2.data,
	                    otherLineProps = _objectWithoutProperties(_props2, ['data']);
	
	                var tableBodyFinalProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(TableLineComponent, _extends({
	                    className: TABLE_CELL_CLASS,
	                    data: line,
	                    key: line[idField],
	                    reference: reference
	                }, otherLineProps), '' + _isReactClassComponent.LINE + idx);
	                return React.createElement(TableLineComponent, tableBodyFinalProps);
	            })
	        );
	    },
	
	    /**
	     * Render the loading table
	     * @return {Component} - The table in the loading mode.
	     */
	    _renderLoading: function _renderLoading() {
	        var _props3 = this.props,
	            isLoading = _props3.isLoading,
	            loader = _props3.loader;
	
	        if (isLoading) {
	            if (loader) {
	                return loader();
	            }
	            return React.createElement(
	                'tbody',
	                { className: 'table-loading' },
	                React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                        'td',
	                        null,
	                        '' + this.i18n('list.loading')
	                    )
	                )
	            );
	        }
	    },
	
	    /**
	     * Render the manual fetch mode for the table.
	     * @return {Component} - The footer component when the mode is manual fetch , a show mode button is shown.
	     */
	    _renderManualFetch: function _renderManualFetch() {
	        var _props4 = this.props,
	            isManualFetch = _props4.isManualFetch,
	            hasMoreData = _props4.hasMoreData;
	
	        if (isManualFetch && hasMoreData) {
	            return React.createElement(
	                'tfoot',
	                { className: 'table-manual-fetch' },
	                React.createElement(
	                    'tr',
	                    null,
	                    React.createElement(
	                        'td',
	                        { colSpan: keys(this.props.columns).length },
	                        React.createElement(_button2.default, { handleOnClick: this.fetchNextPage, label: 'list.button.showMore', type: 'button' })
	                    )
	                )
	            );
	        }
	    },
	
	
	    /**
	     * Render the list.
	     * @return {XML} the render of the table list.
	     */
	    render: function render() {
	        var SELECTABLE_CSS = this.props.isSelectable ? 'mdl-data-table--selectable' : '';
	        return React.createElement(
	            'table',
	            { className: TABLE_CSS_CLASS + ' ' + SELECTABLE_CSS, role: 'presentation' },
	            this._renderTableHeader(),
	            this._renderTableBody(),
	            this._renderLoading(),
	            this._renderManualFetch()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(tableMixin);

/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	
	var topOfElement = function topOfElement(element) {
	    if (!element) {
	        return 0;
	    }
	    return element.offsetTop + topOfElement(element.offsetParent);
	};
	
	var paginationMixin = __webpack_require__(847).mixin;
	/**
	 *
	 * Mixin which add infinite scroll behavior.
	 */
	var InfiniteScrollMixin = {
	
	    mixins: [paginationMixin],
	    /**
	     * defaults props for the mixin.
	     * @returns {object} - the default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            isInfiniteScroll: true,
	            initialPage: 1,
	            offset: 250
	        };
	    },
	
	    /**
	     * Before component mount
	     */
	    componentWillMount: function componentWillMount() {
	        this.nextPage = this.props.initialPage;
	    },
	
	    /**
	     * Before component unmount.
	     */
	    componentWillUnmount: function componentWillUnmount() {
	        if (!this.props.isManualFetch) {
	            this.detachScrollListener();
	        }
	    },
	
	    /**
	     * After component Mount.
	     */
	    componentDidMount: function componentDidMount() {
	        this.parentNode = this.props.parentSelector ? document.querySelector(this.props.parentSelector) : window;
	        if (!this.props.isManualFetch) {
	            this.attachScrollListener();
	        }
	    },
	
	    /**
	     * after component update.
	     */
	    componentDidUpdate: function componentDidUpdate() {
	        if (!this.props.isLoading && !this.props.isManualFetch) {
	            this.attachScrollListener();
	        }
	    },
	
	    /**
	     * Handler for the scroll event.
	     */
	    scrollListener: function scrollListener() {
	        var el = ReactDOM.findDOMNode(this);
	        var scrollTop = this.parentNode.pageYOffset !== undefined ? this.parentNode.pageYOffset : this.parentNode.scrollTop;
	        if (topOfElement(el) + el.offsetHeight - scrollTop - (window.innerHeight || this.parentNode.offsetHeight) < this.props.offset) {
	            this.detachScrollListener();
	            this.fetchNextPage(this.nextPage++);
	        }
	
	        //calculate visible index in the list
	        /*const topHeader = topOfElement(el);
	        const pageHeight = topHeader+el.offsetHeight;
	        const scrollHeader = (topHeader / pageHeight)*window.innerHeight;
	        //console.log((scrollTop - (topHeader / pageHeight) / (el.offsetHeight - topHeader) * this.state.data.length);
	        const visibleIndex = (scrollTop - topHeader) / (el.offsetHeight) * this.state.data.length;
	        console.log(visibleIndex);*/
	    },
	
	    /**
	     * Attach scroll listener on the component.
	     */
	    attachScrollListener: function attachScrollListener() {
	        if (!this.props.hasMoreData) {
	            return;
	        }
	        this.parentNode.addEventListener('scroll', this.scrollListener);
	        this.parentNode.addEventListener('resize', this.scrollListener);
	        this.scrollListener();
	    },
	
	    /**
	     * detach scroll listener on the component
	     */
	    detachScrollListener: function detachScrollListener() {
	        this.parentNode.removeEventListener('scroll', this.scrollListener);
	        this.parentNode.removeEventListener('resize', this.scrollListener);
	    }
	};
	
	module.exports = { mixin: InfiniteScrollMixin };

/***/ }),
/* 847 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var paginationMixin = {
	    /**
	     * @inheritDoc
	     */
	    getDefaultProps: function getPaginationDefaultProps() {
	        return {
	            hasMoreData: false,
	            isManualFetch: false
	        };
	    },
	
	    propTypes: {
	        hasMoreData: (0, _types2.default)('bool'),
	        fetchNextPage: (0, _types2.default)('func'),
	        isManualFetch: (0, _types2.default)('bool')
	    },
	
	    /**
	     * Fetch the next page.
	     * @param {number} page the page to fetch
	     * @return {*} the next page
	     */
	    fetchNextPage: function fetchNextPage(page) {
	        if (!this.props.hasMoreData) {
	            return;
	        }
	        if (this.props.fetchNextPage) {
	            return this.props.fetchNextPage(page);
	        }
	    },
	
	    /**
	     * handle manual fetch.
	     * @param {object} event event received
	     */
	    handleShowMore: function handleShowMore(event) {
	        this.nextPage++;
	        this.fetchNextPage(this.nextPage);
	    }
	};
	
	module.exports = { mixin: paginationMixin };

/***/ }),
/* 848 */
[938, 849, 850],
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Dependencies
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _isEqual = __webpack_require__(183);
	
	var _isEqual2 = _interopRequireDefault(_isEqual);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	
	// Components
	
	var ContextualActions = __webpack_require__(843).component;
	
	var _require = __webpack_require__(425),
	    Checkbox = _require.Checkbox;
	
	// Mixins
	
	var translationMixin = __webpack_require__(827).mixin;
	var referenceMixin = __webpack_require__(840);
	var definitionMixin = __webpack_require__(833);
	var builtInComponentsMixin = __webpack_require__(841);
	
	var lineMixin = {
	    /**
	    * React component name.
	    */
	    displayName: 'SelectionLine',
	
	    /**
	    * Mixin dependancies.
	    */
	    mixins: [translationMixin, definitionMixin, referenceMixin, builtInComponentsMixin],
	
	    /**
	     * Get default props
	     * @return {object} default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            isSelection: true,
	            operationList: {}
	        };
	    },
	
	
	    /**
	    * line property validation.
	    * @type {Object}
	    */
	    propTypes: {
	        data: (0, _types2.default)('object'),
	        isSelected: (0, _types2.default)('bool'),
	        isSelection: (0, _types2.default)('bool'),
	        onLineClick: (0, _types2.default)('func'),
	        onSelection: (0, _types2.default)('func'),
	        operationList: (0, _types2.default)(['array', 'object'])
	    },
	
	    /**
	    * State initialization.
	    * @return {object} initial state
	    */
	    getInitialState: function getInitialState() {
	        var data = this.props.data;
	        var isSelected = this.props.isSelected;
	
	        if (this.selectedInitializer) {
	            // this allows to initiate a data specific value for isSelected
	            isSelected = this.selectedInitializer(data);
	        }
	        return {
	            isSelected: isSelected || false
	        };
	    },
	
	
	    /**
	     * Before component is mounted.
	     */
	    componentWillMount: function componentWillMount() {
	        var _props = this.props,
	            data = _props.data,
	            isSelection = _props.isSelection;
	
	        this._isSelectionnable = isSelection;
	        if (this.selectionnableInitializer) {
	            this._isSelectionnable = this.selectionnableInitializer(data);
	        }
	    },
	
	
	    /**
	     * Component will receive props
	     * @param  {object} nextProps new component's props
	     */
	    componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	        var isSelected = _ref.isSelected,
	            data = _ref.data;
	
	        if ((0, _isEqual2.default)(data, this.props.data)) {
	            if (isSelected !== undefined) {
	                this.setState({ isSelected: isSelected });
	            }
	        } else {
	            this.setState({ isSelected: false });
	        }
	    },
	
	
	    /**
	    * Get the line value.
	    * @return {object} the line value
	    */
	    getValue: function getValue() {
	        var item = this.props.data;
	        var isSelected = this.state.isSelected;
	
	        return { item: item, isSelected: isSelected };
	    },
	
	
	    /**
	    * Selection Click handler.
	    */
	    _handleSelectionClick: function _handleSelectionClick() {
	        var isSelected = !this.state.isSelected;
	        var _props2 = this.props,
	            data = _props2.data,
	            onSelection = _props2.onSelection;
	
	        this.setState({ isSelected: isSelected }, function () {
	            if (onSelection) {
	                onSelection(data, isSelected);
	            }
	        });
	    },
	
	
	    /**
	    * Line Click handler.
	    */
	    _handleLineClick: function _handleLineClick() {
	        var _props3 = this.props,
	            data = _props3.data,
	            onLineClick = _props3.onLineClick;
	
	        if (onLineClick) {
	            onLineClick(data);
	        }
	    },
	
	
	    /**
	    * Render the left box for selection
	    * @return {XML} the rendered selection box
	    */
	    _renderSelectionBox: function _renderSelectionBox() {
	        var isSelected = this.state.isSelected;
	
	        if (this._isSelectionnable) {
	            var selectionClass = isSelected ? 'selected' : 'no-selection';
	            return React.createElement(
	                'div',
	                { className: 'sl-selection ' + selectionClass },
	                React.createElement(Checkbox, { onChange: this._handleSelectionClick, value: isSelected })
	            );
	        }
	        return null;
	    },
	
	
	    /**
	    * render content for a line.
	    * @return {XML} the rendered line content
	    */
	    _renderLineContent: function _renderLineContent() {
	        var data = this.props.data;
	        var title = data.title,
	            body = data.body;
	
	        if (this.renderLineContent) {
	            return this.renderLineContent(data);
	        } else {
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    null,
	                    title
	                ),
	                React.createElement(
	                    'div',
	                    null,
	                    body
	                )
	            );
	        }
	    },
	
	
	    /**
	    * Render actions which can be applied on the line
	    * @return {XML} the rendered actions
	    */
	    _renderActions: function _renderActions() {
	        var props = _extends({ operationParam: this.props.data }, this.props);
	        if (0 < props.operationList.length) {
	            return React.createElement(
	                'div',
	                { className: 'sl-actions' },
	                React.createElement(ContextualActions, props)
	            );
	        }
	    },
	
	
	    /**
	    * Render line in list.
	    *  @return {XML} the rendered line
	    */
	    render: function render() {
	        if (this.renderLine) {
	            return this.renderLine();
	        } else {
	            return React.createElement(
	                'li',
	                { 'data-focus': 'sl-line' },
	                this._renderSelectionBox(),
	                React.createElement(
	                    'div',
	                    { className: 'sl-content', onClick: this._handleLineClick },
	                    this._renderLineContent()
	                ),
	                this._renderActions()
	            );
	        }
	    }
	};
	
	module.exports = { mixin: lineMixin };

/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _object = __webpack_require__(851);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _lang = __webpack_require__(148);
	
	var _collection = __webpack_require__(529);
	
	var _isReactClassComponent = __webpack_require__(829);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var find = __webpack_require__(547);
	
	var _require = __webpack_require__(341),
	    omit = _require.omit;
	
	var _require2 = __webpack_require__(148),
	    isArray = _require2.isArray;
	
	//Add a ref to the props if the component is not pure add nothing in the other case.
	
	
	// Mixins
	
	var translationMixin = __webpack_require__(827).mixin;
	var infiniteScrollMixin = __webpack_require__(846).mixin;
	var referenceMixin = __webpack_require__(840);
	
	// Components
	
	var listMixin = {
	    /**
	    * Display name.
	    */
	    displayName: 'SelectionList',
	
	    /**
	    * Mixin dependancies.
	    */
	    mixins: [translationMixin, infiniteScrollMixin, referenceMixin],
	
	    /**
	    * Default properties for the list.
	    * @returns {{isSelection: boolean}} the default properties
	    */
	    getDefaultProps: function getListDefaultProps() {
	        return {
	            data: [],
	            isSelection: true,
	            selectionStatus: 'partial',
	            selectionData: [],
	            isLoading: false,
	            operationList: [],
	            idField: 'id'
	        };
	    },
	
	    /**
	    * list property validation.
	    * @type {Object}
	    */
	    propTypes: {
	        LineComponent: (0, _types2.default)('func'),
	        buttonComponent: (0, _types2.default)('func'),
	        data: (0, _types2.default)('array'),
	        idField: (0, _types2.default)('string'),
	        isLoading: (0, _types2.default)('bool'),
	        isSelection: (0, _types2.default)('bool'),
	        loader: (0, _types2.default)('func'),
	        onLineClick: (0, _types2.default)('func'),
	        onSelection: (0, _types2.default)('func'),
	        operationList: (0, _types2.default)(['array', 'object']),
	        selectionData: (0, _types2.default)('array'),
	        selectionStatus: (0, _types2.default)('string')
	    },
	
	    getInitialState: function getInitialState() {
	        return {
	            selectedItems: null
	        };
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(_ref) {
	        var selectionStatus = _ref.selectionStatus,
	            data = _ref.data;
	
	        switch (selectionStatus) {
	            case 'none':
	                this.setState({ selectedItems: new Map() });
	                break;
	            case 'selected':
	                var selectedItems = new Map();
	                data.forEach(function (item) {
	                    selectedItems.set(JSON.stringify(item), item);
	                });
	                this.setState({ selectedItems: selectedItems });
	                break;
	        }
	    },
	
	
	    /**
	    * Return selected items in the list.
	    * @return {Array} selected items
	    */
	    getSelectedItems: function getSelectedItems() {
	        var selectedItems = this.state.selectedItems;
	
	        if (selectedItems !== null) {
	            var _selectedItems = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = this.state.selectedItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _step$value = _slicedToArray(_step.value, 2),
	                        item = _step$value[0],
	                        isSelected = _step$value[1];
	
	                    if (isSelected) _selectedItems.push(JSON.parse(item));
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	
	            return _selectedItems;
	        } else {
	            return (0, _collection.reduce)(this.refs, function (acc, ref) {
	                if (ref.getValue) {
	                    var _ref$getValue = ref.getValue(),
	                        item = _ref$getValue.item,
	                        isSelected = _ref$getValue.isSelected;
	
	                    if (isSelected) acc.push(item);
	                }
	                return acc;
	            }, []);
	        }
	    },
	    _handleLineSelection: function _handleLineSelection(data, isSelected) {
	        var _this = this;
	
	        var selectedItems = this.state.selectedItems;
	
	        var newSelectedItems = new Map();
	        if (selectedItems !== null) {
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;
	
	            try {
	                for (var _iterator2 = selectedItems[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _step2$value = _slicedToArray(_step2.value, 2),
	                        key = _step2$value[0],
	                        value = _step2$value[1];
	
	                    newSelectedItems.set(key, value);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	        }
	        newSelectedItems.set(JSON.stringify(data), isSelected);
	
	        this.setState({ selectedItems: newSelectedItems }, function () {
	            if (_this.props.onSelection) {
	                _this.props.onSelection(data, isSelected);
	            }
	        });
	    },
	
	
	    /**
	    * Render lines of the list.
	    * @returns {*} DOM for lines
	    */
	    _renderLines: function _renderLines() {
	        var _this2 = this;
	
	        var _props = this.props,
	            data = _props.data,
	            Line = _props.LineComponent,
	            selectionData = _props.selectionData,
	            idField = _props.idField,
	            selectionStatus = _props.selectionStatus,
	            otherProps = _objectWithoutProperties(_props, ['data', 'LineComponent', 'selectionData', 'idField', 'selectionStatus']);
	
	        if (selectionData && selectionData.length > 0) {
	            console.warn('[DEPRECATED] You are using \'selectionData\' prop which is now DEPRECATED. Please use \'selectionnableInitializer\' on line component.');
	        }
	        // LEGACY CODE
	        var customLineComponent = otherProps.lineComponent;
	        if (customLineComponent) {
	            console.warn('%c DEPRECATED : You are using the lineComponent prop in a list component, this will be removed in the next release of Focus Components. Please use LineComponent prop instead.', 'color: #FF9C00; font-weight: bold');
	        }
	        var FinalLineComponent = customLineComponent || Line;
	        // END OF LEGACY CODE
	        if (!isArray(data)) {
	            console.error('List: Lines: it seems data is not an array, please check the value in your store, it could also be related to your action in case of a load (have a look to shouldDumpStoreOnActionCall option).');
	        }
	        return data.map(function (line, idx) {
	            var isSelected = void 0;
	            var selection = find(selectionData, _defineProperty({}, idField, line[idField]));
	            if (selection) {
	                isSelected = selection.isSelected;
	            } else {
	                switch (selectionStatus) {
	                    case 'none':
	                        isSelected = false;
	                        break;
	                    case 'selected':
	                        isSelected = true;
	                        break;
	                    case 'partial':
	                        isSelected = undefined;
	                        break;
	                    default:
	                        isSelected = false;
	                }
	            }
	            var listFinalProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(FinalLineComponent, _extends({}, otherProps, {
	                data: line,
	                isSelected: isSelected,
	                key: line[idField] || idx,
	                onSelection: _this2._handleLineSelection,
	                reference: _this2._getReference()
	            }), '' + _isReactClassComponent.LINE + idx);
	            return React.createElement(FinalLineComponent, listFinalProps);
	        });
	    },
	
	    /**
	    * Render loading state
	    * @return {HTML} the loading state
	    */
	    _renderLoading: function _renderLoading() {
	        var _props2 = this.props,
	            isLoading = _props2.isLoading,
	            loader = _props2.loader;
	
	        if (isLoading) {
	            if (loader) {
	                return loader();
	            }
	            return React.createElement(
	                'li',
	                { className: 'sl-loading' },
	                this.i18n('list.loading'),
	                ' ...'
	            );
	        }
	    },
	
	    /**
	    * Render manual fetch state
	    * @return {HTML} the rendered manual fetch state
	    */
	    _renderManualFetch: function _renderManualFetch() {
	        var _props3 = this.props,
	            isManualFetch = _props3.isManualFetch,
	            hasMoreData = _props3.hasMoreData;
	
	        if (isManualFetch && hasMoreData) {
	            var style = { className: 'primary' };
	            return React.createElement(
	                'li',
	                { className: 'sl-button' },
	                React.createElement(_button2.default, {
	                    handleOnClick: this.handleShowMore,
	                    label: 'list.button.showMore',
	                    style: style,
	                    type: 'button'
	                })
	            );
	        }
	    },
	    shouldComponentUpdate: function shouldComponentUpdate(_ref2, _ref3) {
	        var selectionStatus = _ref2.selectionStatus;
	        var selectedItems = _ref3.selectedItems;
	
	        return selectedItems === this.state.selectedItems || selectedItems.size === 0 || selectionStatus !== this.props.selectionStatus;
	    },
	
	
	    /**
	    * Render the list.
	    * @returns {XML} DOM of the component
	    */
	    render: function render() {
	        var isSelection = this.props.isSelection;
	
	        return React.createElement(
	            'ul',
	            { 'data-focus': 'selection-list', 'data-selection': isSelection },
	            this._renderLines(),
	            this._renderLoading(),
	            this._renderManualFetch()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(listMixin);

/***/ }),
/* 851 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_851__;

/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var capitalize = __webpack_require__(304);
	var assign = __webpack_require__(519);
	
	var _require = __webpack_require__(148),
	    isObject = _require.isObject,
	    isArray = _require.isArray;
	
	var keys = __webpack_require__(155);
	var storeChangeBehaviour = __webpack_require__(853);
	
	var storeMixin = {
	    mixins: [storeChangeBehaviour],
	    /**
	     * Get the state informations from the store.
	     * @returns {object} - The js object constructed from store data.
	     */
	    _getStateFromStores: function formGetStateFromStore() {
	        if (this.getStateFromStore) {
	            return this.getStateFromStore();
	        }
	        var newState = {};
	        this.stores.map(function (storeConf) {
	            storeConf.properties.map(function (property) {
	                newState[property] = storeConf.store['get' + capitalize(property)]();
	            });
	        });
	        var computedState = assign(this._computeEntityFromStoresData(newState), this._getLoadingStateFromStores());
	        return computedState;
	    },
	    /**
	     * Get the error state informations from the store.
	     * @returns {object} - The js error object constructed from the store data.
	     */
	    _getErrorStateFromStores: function formGetErrorStateFromStore() {
	        if (this.getErrorStateFromStore) {
	            return this.getErrorStateFromStore();
	        }
	        var newState = {};
	        this.stores.map(function (storeConf) {
	            storeConf.properties.map(function (property) {
	                var errorState = storeConf.store['getError' + capitalize(property)]();
	                for (var prop in errorState) {
	                    newState[property + '.' + prop] = errorState[prop];
	                }
	            });
	        });
	        return newState;
	    },
	    /**
	     * Get the isLoading state from  all the store.
	     */
	    _getLoadingStateFromStores: function getLoadingStateFromStores() {
	        if (this.getLoadingStateFromStores) {
	            return this.getLoadingStateFromStores();
	        }
	        var isLoading = false;
	        this.stores.forEach(function (storeConf) {
	            if (!isLoading) {
	                storeConf.properties.forEach(function (property) {
	                    if (!isLoading) {
	                        var propStatus = storeConf.store.getStatus(property) || {};
	                        isLoading = propStatus.isLoading;
	                    }
	                });
	            }
	        });
	        //console.info('Processing state', this.stores, 'loading', isLoading);
	        return { isLoading: isLoading };
	    },
	    /**
	     * Compute the data given from the stores.
	     * @param {object} data -  The data ordered by store.
	     * @returns {object} - The js object transformed from store data.
	     */
	    _computeEntityFromStoresData: function _computeEntityFromStoresData(data) {
	        if (this.computeEntityFromStoresData) {
	            return this.computeEntityFromStoresData(data);
	        }
	        var entity = { reference: {} };
	        for (var key in data) {
	            if (this.referenceNames && this.referenceNames.indexOf(key) !== -1) {
	                entity.reference[key] = data[key];
	            } else {
	                var d = data[key];
	                if (isArray(d) || !isObject(d)) {
	                    d = _defineProperty({}, key, d);
	                }
	                assign(entity, d);
	            }
	        }
	        return entity;
	    },
	    /**
	     * Register all the listeners related to the page.
	     */
	    _registerListeners: function registerStoreListeners() {
	        var _this = this;
	
	        if (this.stores) {
	            this.stores.map(function (storeConf) {
	                storeConf.properties.map(function (property) {
	                    if (!storeConf.store || !storeConf.store.definition || !storeConf.store.definition[property]) {
	                        console.warn('You add a property : ' + property + ' in your store which is not in your definition : ' + keys(storeConf.store.definition));
	                    }
	                    storeConf.store['add' + capitalize(property) + 'ChangeListener'](_this._onChange);
	                    storeConf.store['add' + capitalize(property) + 'ErrorListener'](_this._onError);
	                    storeConf.store['add' + capitalize(property) + 'StatusListener'](_this._onStatus);
	                });
	            });
	        }
	    },
	    /**
	    * Unregister all the listeners related to the page.
	    */
	    _unRegisterListeners: function unregisterListener() {
	        var _this2 = this;
	
	        if (this.stores) {
	            this.stores.map(function (storeConf) {
	                storeConf.properties.map(function (property) {
	                    storeConf.store['remove' + capitalize(property) + 'ChangeListener'](_this2._onChange);
	                    storeConf.store['remove' + capitalize(property) + 'ErrorListener'](_this2._onError);
	                    storeConf.store['remove' + capitalize(property) + 'StatusListener'](_this2._onStatus);
	                });
	            });
	        }
	    },
	    /** @inheritdoc */
	    componentWillMount: function storeBehaviourWillMount() {
	        //These listeners are registered before the mounting because they are not correlated to the DOM.
	        //Build the definitions.
	        this._registerListeners();
	    },
	    /** @inheritdoc */
	    componentWillUnmount: function storeBehaviourWillUnmount() {
	        this._unRegisterListeners();
	    }
	};
	
	module.exports = storeMixin;

/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _message = __webpack_require__(854);
	
	var _message2 = _interopRequireDefault(_message);
	
	var _application = __webpack_require__(399);
	
	var _reduce = __webpack_require__(561);
	
	var _reduce2 = _interopRequireDefault(_reduce);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var changeBehaviourMixin = {
	    /**
	    * Display a message when there is a change on a store property resulting from a component action call.
	    * @param  {object} changeInfos - An object containing all the event informations, without the data.
	    * @return {function} - An override function can be called.
	    */
	    _displayMessageOnChange: function displayMessageOnChange(changeInfos) {
	        if (this.displayMessageOnChange) {
	            return this.displayMessageOnChange(changeInfos);
	        }
	        if (changeInfos && changeInfos.status && changeInfos.status.name) {
	            switch (changeInfos.status.name) {
	                /* case 'loading':
	                Focus.message.addInformationMessage('detail.loading');
	                break;
	                case 'loaded':
	                Focus.message.addSuccessMessage('detail.loaded');
	                break;
	                case 'saving':
	                Focus.message.addInformationMessage('detail.saving');
	                break;*/
	                case 'saved':
	                    //Maybe the action result or the event should have a caller notion.
	                    _message2.default.addSuccessMessage('detail.saved');
	                    //Change the page mode as edit
	                    this.setState({ isEdit: false }, function () {
	                        (0, _application.changeMode)('consult', 'edit');
	                    });
	                    break;
	                default:
	                    break;
	            }
	        }
	    },
	    /**
	    * After change informations.
	    * You can override this method using afterChange function.
	    * @param {object} changeInfos - All informations relative to the change.
	    * @returns {undefined} -  The return value is the callback.
	    */
	    _afterChange: function afterChangeForm(changeInfos) {
	        if (this.afterChange) {
	            return this.afterChange(changeInfos);
	        }
	        //If there is no callerId in the event, the display message does not have any sens.
	        //Other component responding to the store property change does not need to react on it.
	        if (changeInfos && changeInfos.informations && changeInfos.informations.callerId && this._identifier === changeInfos.informations.callerId) {
	            return this._displayMessageOnChange(changeInfos);
	        }
	    },
	    /**
	    * Event handler for 'change' events coming from the stores
	    * @param {object} changeInfos - The changing informations.
	    */
	    _onChange: function onFormStoreChangeHandler(changeInfos) {
	        var _this = this;
	
	        var onChange = this.props.onChange || this.onChange;
	        if (onChange) {
	            onChange.call(this, changeInfos);
	        }
	        this.setState(this._getStateFromStores(), function () {
	            return _this._afterChange(changeInfos);
	        });
	    },
	    /**
	    * Event handler for 'error' events coming from the stores.
	    */
	    _onError: function onFormErrorHandler(changeInfos) {
	        var _this2 = this;
	
	        this.setState(this._getLoadingStateFromStores(), function () {
	            return _this2._handleErrors(changeInfos);
	        }); // update errors after status
	    },
	    _handleErrors: function _handleErrors() {
	        var _this3 = this;
	
	        var errorState = this._getErrorStateFromStores();
	        if (this.definitionPath) {
	            var _loop = function _loop(key) {
	                // Let's find that corresponding field, considering that the ref might not directly be 'storeNode.fieldName', but in fact 'entityPath.fieldName'
	                var ref = (0, _reduce2.default)(_this3.refs, function (acc, value, candidateRef) {
	                    var candidate = candidateRef.replace(_this3.definitionPath + '.', ''); // Remove the 'definitionPath.'
	                    if (candidate === key.match(/([^\.]*)$/)[0]) {
	                        // Look for the 'fieldName' part of 'storeNode.fieldName'
	                        acc = value;
	                    }
	                    return acc;
	                }, null);
	                if (ref) {
	                    // If we found it, then bingo
	                    ref.setError(errorState[key]);
	                }
	            };
	
	            // In case we have a definitionPath, we might want to trigger a setError on the corresponding field
	            for (var key in errorState) {
	                _loop(key);
	            }
	        }
	    },
	
	    /**
	    * Read
	    * @param  {[type]} changeInfos [description]
	    * @return {[type]}             [description]
	    */
	    _onStatus: function _onStatus(changeInfos) {
	        if (this._getEntity) {
	            this.setState(_extends({}, this._getEntity(), this._getLoadingStateFromStores()));
	        } else {
	            this.setState(this._getLoadingStateFromStores());
	        }
	    }
	};
	module.exports = changeBehaviourMixin;

/***/ }),
/* 854 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_854__;

/***/ }),
/* 855 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var uuid = __webpack_require__(401);
	/**
	 * Export a method which add an identifier to component;
	 * @type {Object}
	 */
	module.exports = {
	    /** @inheriteDoc */
	    componentWillMount: function componentWillMount() {
	        Object.defineProperty(this, '_identifier', {
	            value: uuid.v4(),
	            writable: false,
	            enumerable: true,
	            configurable: false
	        });
	    }
	};

/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var referenceBehaviour = __webpack_require__(857);
	var actionBehaviour = __webpack_require__(860);
	var validationBehaviour = __webpack_require__(862);
	
	module.exports = {
	    actionBehaviour: actionBehaviour,
	    referenceBehaviour: referenceBehaviour,
	    validationBehaviour: validationBehaviour
	};

/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //Focus.reference.builder.loadListByName('papas').then(function(data){Focus.dispatcher.dispatch({action: {type: "update",data: {papas: data}}})})
	
	var _builtInStore = __webpack_require__(858);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	var _builtInAction = __webpack_require__(859);
	
	var _builtInAction2 = _interopRequireDefault(_builtInAction);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isEmpty = __webpack_require__(198);
	var referenceMixin = {
	    /** @inheritdoc */
	    /*  getDefaultProps: function getReferenceDefaultProps(){
	    return {*/
	    /**
	    * Array which contains all the reference lists.
	    * If the referenceNames are set into the object, they are set into the default props.
	    * @type {Array}
	    */
	    /*  referenceNames: this.referenceNames || []
	    };
	    },*/
	    getInitialState: function getInitialState() {
	        return { reference: {} };
	    },
	
	    /**
	    * Build actions associated to the reference.
	    */
	    _buildReferenceActions: function _buildReferenceActions() {
	        this.action = _extends({
	            loadReference: (0, _builtInAction2.default)(this.referenceNames)
	        }, this.action);
	    },
	    _loadReference: function _loadReference() {
	        return this.action.loadReference();
	    },
	
	    /**
	    * Build the reference names and set the store into the application.
	    */
	    _buildReferenceStoreConfig: function _buildReferenceStoreConfig() {
	
	        //If the reference store is empty don't do anything.
	        if (isEmpty(this.referenceNames)) {
	            return;
	        }
	        this.stores = this.stores || [];
	        //Set as referencestore the referencestore of the application.
	        this.stores.push({
	            store: (0, _builtInStore2.default)(),
	            properties: this.referenceNames
	        });
	    },
	
	    /**
	    * Build store and actions related to the reference.
	    */
	    _buildReference: function _buildReference() {
	        this._buildReferenceStoreConfig();
	        this._buildReferenceActions();
	    },
	
	    /** @inheritdoc */
	    componentWillMount: function componentWillMount() {
	        this.referenceNames = this.props.referenceNames || this.referenceNames;
	        this._buildReference();
	    }
	};
	
	module.exports = referenceMixin;

/***/ }),
/* 858 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_858__;

/***/ }),
/* 859 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_859__;

/***/ }),
/* 860 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _focusException = __webpack_require__(861);
	
	var _focusException2 = _interopRequireDefault(_focusException);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var assign = __webpack_require__(519);
	var isFunction = __webpack_require__(158);
	var omit = __webpack_require__(383);
	
	var actionMixin = {
	
	    /**
	       * Get the entity identifier for the form loading.
	       * @returns {object} - The identifier of the entity.
	       */
	    _getId: function _getId() {
	        if (this.getId) {
	            return this.getId();
	        }
	        return this.state.id;
	    },
	
	    /**
	     * Get a clean state to send data to the server.
	     * @returns {object} - The state json cleanded
	     */
	    _getCleanState: function _getCleanState() {
	        return omit(this.state, ['reference', 'isLoading', 'isEdit']);
	    },
	
	    /**
	     * Compute the entity read from the html givent the keys and the definition Path, this operation is reversed from the _computeEntityFromStore operation.
	     * @param {object} htmlData - Data read from the html form.
	     * @returns {object} - The computed entity from html.
	     */
	    _computeEntityFromHtml: function _computeEntityFromHtml(htmlData) {
	        var DEF = this.definitionPath + '.';
	        var EMPTY = '';
	        var computedEntity = {};
	        for (var prop in htmlData) {
	            computedEntity[prop.replace(DEF, EMPTY)] = htmlData[prop];
	        }
	        return computedEntity;
	    },
	
	    /**
	     * Get entity from the state, and the HTML.
	     * @return {object} - Combinaison of state and HTML builded entity.
	     */
	    _getEntityFromHTMLAndState: function _getEntityFromHTMLAndState() {
	        //Build the entity value from the ref getVaue.
	        var htmlData = {};
	        var refs = this.refs;
	
	        for (var r in refs) {
	            //If the reference has a getValue function if is read.
	            if (refs[r] && isFunction(refs[r].getValue)) {
	                htmlData[r] = refs[r].getValue();
	            }
	        }
	        //Maybe a merge cold be done if we need a deeper property merge.
	        return assign({}, this._getCleanState(), this._computeEntityFromHtml(htmlData));
	    },
	
	    /**
	     * Get the constructed entity from the state.
	     * If you need to perform a custom getEntity just write a getEntity function in your mixin.
	     * @returns {object} - the entity informations.
	     */
	    _getEntity: function _getEntity() {
	        if (this.getEntity) {
	            return this.getEntity();
	        }
	        return this._getEntityFromHTMLAndState();
	    },
	
	    /**
	     * This is the load action of the form.
	     */
	    _loadData: function _loadData() {
	        if (!this.action || !isFunction(this.action.load)) {
	            throw new _focusException2.default('It seems your form component does not have a load action, and your props is set to hasLoad={true}.', this);
	        }
	        this.action.load.call(this, this._getId());
	    },
	    clearError: function clearError() {
	        for (var r in this.refs) {
	            //If the reference has a getValue function if is read.
	            if (this.refs[r] && isFunction(this.refs[r].setError)) {
	                this.refs[r].setError(undefined);
	            }
	        }
	    }
	};
	
	module.exports = actionMixin;

/***/ }),
/* 861 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_861__;

/***/ }),
/* 862 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	//Dependencies.
	var _require = __webpack_require__(148),
	    isEmpty = _require.isEmpty,
	    isFunction = _require.isFunction;
	
	var assign = __webpack_require__(519);
	
	/**
	* Validate each field of the form.
	* In case of errors the state is modified.
	* @returns {boolean} - A boolean true if the validation is correct.
	*/
	function _fieldsValidation() {
	    var validationMap = {};
	    for (var inptKey in this.refs) {
	        //validate only the reference elements which have valide function
	        if (isFunction(this.refs[inptKey].validate)) {
	            var validationRes = this.refs[inptKey].validate();
	            if (validationRes !== undefined) {
	                assign(validationMap, _defineProperty({}, inptKey, validationRes));
	            }
	        }
	    }
	    if (isEmpty(validationMap)) {
	        return true;
	    }
	    return false;
	}
	/**
	 * Custom validation of the field.
	 * @return {true} -  If the custom validation is defined.
	 */
	function _customValidation() {
	    if (this.customValidation) {
	        return this.customValidation();
	    }
	    return true;
	}
	/**
	 * Validate .
	 * @return {boolean} - True if the validation is ok.
	 */
	function _validate() {
	    return this._fieldsValidation() && this._customValidation();
	}
	
	/**
	 * Validate the form
	 * @deprecated
	 * @return {object} - The validation  result.
	 */
	function validate() {
	    console.warn('This function will be deprecated in the version 0.6.0 the validate function should be custom for the project, instead call this._validate');
	    return this._validate();
	}
	
	module.exports = {
	    _fieldsValidation: _fieldsValidation,
	    _customValidation: _customValidation,
	    _validate: _validate,
	    validate: validate
	};

/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    markdown: __webpack_require__(864),
	    radio: __webpack_require__(865)
	};

/***/ }),
/* 864 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146); //Dependencies.
	
	var ReactDOM = __webpack_require__(147);
	
	var markdownEditorMixin = {
	    /** @inherideddoc */
	    getInitialState: function getMarkdownInitialState() {
	        return { value: this.props.value };
	    },
	    /** @inherideddoc */
	    componentDidMount: function markdownComponentDidMount() {
	        if (!window.Showdown) {
	            console.warn('The showdown library should be imported. See https://github.com/showdownjs/showdown');
	        }
	    },
	    /**
	     * Handle the change of the value.
	     */
	    handleChange: function handleMarkdownChange() {
	        this.setState({ value: ReactDOM.findDOMNode(this.refs.textarea).value });
	    },
	    /** @inherideddoc */
	    render: function renderMarkdownComponent() {
	        var converter = window.Showdown ? function (data) {
	            console.warn('showdown should be imported/');return data;
	        } : new window.Showdown.converter();
	        return React.createElement(
	            'div',
	            { className: 'MarkdownEditor' },
	            React.createElement('textarea', {
	                onChange: this.handleChange,
	                ref: 'textarea',
	                defaultValue: this.state.value }),
	            React.createElement('div', {
	                className: 'content',
	                dangerouslySetInnerHTML: {
	                    __html: converter.makeHtml(this.state.value)
	                }
	            })
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(markdownEditorMixin);

/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var React = __webpack_require__(146);
	
	var i18nBehaviour = __webpack_require__(293);
	var fieldGridBehaviourMixin = __webpack_require__(831);
	var mdlBehaviour = __webpack_require__(521);
	
	var _require = __webpack_require__(148),
	    isUndefined = _require.isUndefined;
	
	var radioMixin = {
	    mixins: [i18nBehaviour, fieldGridBehaviourMixin, mdlBehaviour],
	    /**
	    * Tag name.
	    */
	    displayName: 'input-radio',
	
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            value: false
	        };
	    },
	
	    /**
	    * Properties validation.
	    * @type {Object}
	    */
	    propTypes: {
	        label: (0, _types2.default)('string').isRequired,
	        name: (0, _types2.default)('string'),
	        value: (0, _types2.default)('bool'),
	        onChange: (0, _types2.default)('func')
	    },
	    /** @inheritdoc */
	    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	        this.setState({ isChecked: newProps.value });
	    },
	
	    /** @inheritDoc */
	    getInitialState: function getInitialState() {
	        var value = this.props.value;
	
	        return {
	            isChecked: isUndefined(value) ? false : value
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        var inputMdl = this.refs.inputMdl;
	        var isChecked = this.state.isChecked;
	
	        if (inputMdl) {
	            var classList = inputMdl.classList;
	
	            if (isChecked === true) classList.add('is-checked');
	            if (isChecked === false) classList.remove('is-checked');
	        }
	    },
	
	    /**
	    * Executed actions on change event.
	    * @param  {event} event
	    */
	    _onChange: function _onChange() {
	        var _this = this;
	
	        this.setState({
	            isChecked: !this.state.isChecked
	        }, function () {
	            if (_this.props.onChange) {
	                _this.props.onChange(_this.state.isChecked);
	            }
	        });
	    },
	
	    /**
	    * Get the value from the input in  the DOM.
	    * @returns The DOM node value.
	    */
	    getValue: function getValue() {
	        return this.state.isChecked;
	    },
	
	    /**
	    * Render the Checkbox HTML.
	    * @return {VirtualDOM} - The virtual DOM of the checkbox.
	    */
	    render: function render() {
	        var isChecked = this.state.isChecked;
	
	        var _props = this.props,
	            label = _props.label,
	            name = _props.name,
	            otherProps = _objectWithoutProperties(_props, ['label', 'name']);
	        // we use inputProps to be able to display 'checked' property. it is required to be able to use MDL.
	
	
	        var checkedProps = isChecked ? { checked: 'checked' } : {};
	        var inputProps = _extends({ className: 'mdl-radio__button', name: name, onChange: this._onChange, type: 'radio' }, checkedProps, otherProps);
	
	        return React.createElement(
	            'label',
	            { className: 'mdl-radio mdl-js-radio mdl-js-ripple-effect', 'data-focus': 'input-radio', ref: 'inputMdl' },
	            React.createElement('input', inputProps),
	            React.createElement(
	                'span',
	                { className: 'mdl-radio__label' },
	                this.i18n(label)
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(radioMixin);

/***/ }),
/* 866 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var styleBehaviour = __webpack_require__(816);
	
	/**
	* Label mixin for form.
	* @type {Object}
	*/
	var labelMixin = {
	    mixins: [styleBehaviour],
	
	    /** @inheritdoc */
	    propTypes: {
	        name: _react.PropTypes.string.isRequired,
	        text: _react.PropTypes.string
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Label\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Label');
	    },
	
	    /** @inheritdoc */
	    render: function render() {
	        var _props = this.props,
	            name = _props.name,
	            text = _props.text,
	            style = _props.style;
	
	        var content = text || name;
	        return _react2.default.createElement(
	            'label',
	            { className: style.className, 'data-focus': 'label', htmlFor: name },
	            (0, _translation.translate)(content)
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(labelMixin);

/***/ }),
/* 867 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	/**
	 * Mixin used in order to create a block.
	 * @type {Object}
	 */
	var panelMixin = {
	    getDefaultProps: function getDefaultProps() {
	        return {
	            style: {}
	        };
	    },
	    /**
	     * Header of theblock function.
	     * @return {[type]} [description]
	     */
	    heading: function heading() {
	        if (this.props.title) {
	            return React.createElement(
	                'div',
	                { className: 'panel-heading' },
	                this.props.title
	            );
	        }
	    },
	    /**
	     * Render the a block container and the cild content of the block.
	     * @return {DOM}
	     */
	    render: function renderBlock() {
	        return React.createElement(
	            'div',
	            { className: 'panel panel-default ' + this.props.style.className },
	            this.heading(),
	            React.createElement(
	                'div',
	                { className: 'panel-body' },
	                this.props.children
	            )
	        );
	    }
	};
	module.exports = (0, _builder2.default)(panelMixin);

/***/ }),
/* 868 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    classic: __webpack_require__(869),
	    radio: __webpack_require__(870),
	    checkbox: __webpack_require__(871)
	};

/***/ }),
/* 869 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } //Dependencies.
	
	
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	var i18nMixin = __webpack_require__(293);
	var stylableMixin = __webpack_require__(816);
	var union = __webpack_require__(495);
	
	var _require = __webpack_require__(148),
	    isUndefined = _require.isUndefined,
	    isNull = _require.isNull,
	    isNumber = _require.isNumber;
	
	var UNSELECTED_KEY = 'UNSELECTED_KEY';
	
	/**
	* Input text mixin.
	* @type {Object}
	*/
	var selectMixin = {
	    /** @inheritdoc */
	    displayName: 'Select',
	    /** @inheritdoc */
	    mixins: [i18nMixin, stylableMixin],
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            labelKey: 'label',
	            multiple: false,
	            values: [],
	            valueKey: 'code',
	            hasUndefined: true,
	            disabled: false
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        multiple: (0, _types2.default)('bool'),
	        labelKey: (0, _types2.default)('string'),
	        name: (0, _types2.default)('string'),
	        isRequired: (0, _types2.default)('bool'),
	        onChange: (0, _types2.default)('func'),
	        value: (0, _types2.default)(['number', 'string', 'array']),
	        values: (0, _types2.default)('array'),
	        valueKey: (0, _types2.default)('string'),
	        disabled: (0, _types2.default)('bool')
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents 0.7.0: this component is deprecated, please use FocusComponents.components.input.Select');
	    },
	
	    /** @inheritdoc */
	    getInitialState: function getInitialState() {
	        var _props = this.props,
	            hasUndefined = _props.hasUndefined,
	            value = _props.value,
	            values = _props.values,
	            valueKey = _props.valueKey,
	            isRequired = _props.isRequired;
	
	        var hasValue = !isUndefined(value) && !isNull(value);
	        var isRequiredAndHasValue = true === isRequired && hasValue;
	        return {
	            value: value,
	            hasUndefined: false === hasUndefined || isRequiredAndHasValue ? false : true, //!value
	            isNumber: values && 0 < values.length && values[0] && values[0][valueKey] && isNumber(values[0][valueKey])
	        };
	    },
	
	    /** @inheritdoc */
	    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	        this.setState({ value: newProps.value });
	    },
	
	    /**
	    * Get the value of the component.
	    * @return {object} - Return the value of the component.
	    */
	    getValue: function getValue() {
	        var select = this.refs.select;
	
	        var domValue = ReactDOM.findDOMNode(select).value;
	        if (domValue === UNSELECTED_KEY) {
	            return null;
	        }
	        return this.state.isNumber ? +domValue : domValue;
	    },
	
	    /**
	    * Handle the change value of the input.
	    * @param {object} event - The sanitize event of input.
	    */
	    _handleOnChange: function _handleOnChange(event) {
	        //On change handler.
	        var _props2 = this.props,
	            onChange = _props2.onChange,
	            multiple = _props2.multiple;
	
	        if (onChange) {
	            onChange(event);
	        } else {
	            var domValue = event.target.value;
	            var value = this.state.isNumber ? +domValue : domValue;
	            //Set the state then call the change handler.
	            if (multiple) {
	                var vals = this.state.value;
	                vals.push(value);
	                return this.setState({ value: vals });
	            }
	            return this.setState({ value: value });
	        }
	    },
	
	    /** @inheritdoc */
	    renderOptions: function renderOptions() {
	        var _this = this;
	
	        var processValues = void 0;
	        var _props3 = this.props,
	            labelKey = _props3.labelKey,
	            valueKey = _props3.valueKey,
	            values = _props3.values;
	        var hasUndefined = this.state.hasUndefined;
	
	        if (hasUndefined) {
	            var _ref;
	
	            processValues = union([(_ref = {}, _defineProperty(_ref, labelKey, 'select.unSelected'), _defineProperty(_ref, valueKey, UNSELECTED_KEY), _ref)], values);
	        } else {
	            processValues = values;
	        }
	        return processValues.map(function (val, idx) {
	            var value = '' + val[valueKey];
	            var label = val[labelKey] || 'select.noLabel';
	            return React.createElement(
	                'option',
	                { key: idx, value: value },
	                _this.i18n(label)
	            );
	        });
	    },
	
	    /**
	    * Render an input.
	    * @return {DOM} - The dom of an input.
	    */
	    render: function render() {
	        var props = this.props,
	            state = this.state,
	            _getStyleClassName = this._getStyleClassName,
	            _handleOnChange = this._handleOnChange;
	        var disabled = props.disabled,
	            error = props.error,
	            multiple = props.multiple,
	            name = props.name;
	        var value = state.value;
	
	        var disabledProps = disabled ? { disabled: 'disabled' } : {};
	        var selectProps = _extends({ multiple: multiple, value: '' + value, name: name, onChange: _handleOnChange, className: _getStyleClassName(), ref: 'select' }, disabledProps);
	        return React.createElement(
	            'div',
	            { 'data-focus': 'select', 'data-valid': !error },
	            React.createElement(
	                'select',
	                selectProps,
	                this.renderOptions()
	            ),
	            error && React.createElement(
	                'div',
	                { className: 'label-error', ref: 'error' },
	                error
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(selectMixin);

/***/ }),
/* 870 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var i18nBehaviour = __webpack_require__(293);
	var mdlBehaviour = __webpack_require__(521);
	
	var _require = __webpack_require__(406),
	    uniqueId = _require.uniqueId;
	
	var InputRadio = __webpack_require__(865).component;
	
	var selectRadioMixin = {
	    mixins: [i18nBehaviour, mdlBehaviour],
	    /**
	    * Tag name.
	    */
	    displayName: 'SelectRadio',
	
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            values: [],
	            valueKey: 'code',
	            labelKey: 'label',
	            disabled: false
	        };
	    },
	
	
	    /** @inheritdoc */
	    propTypes: {
	        values: (0, _types2.default)('array'),
	        value: (0, _types2.default)(['number', 'string', 'array']),
	        valueKey: (0, _types2.default)('string'),
	        labelKey: (0, _types2.default)('string'),
	        onChange: (0, _types2.default)('func'),
	        disabled: (0, _types2.default)('bool')
	    },
	
	    /** @inheritdoc */
	    getInitialState: function getInitialState() {
	        return {
	            uniqueName: uniqueId('options_'),
	            value: this.props.value
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'select-radio\' component from FocusComponents.common is deprecated, please use FocusComponents.components.select.SelectRadio');
	    },
	
	
	    /** @inheritdoc */
	    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	        this.setState({
	            value: newProps.value
	        });
	    },
	
	
	    /**
	     * Get the value from the select in the DOM.
	     * @return {string, number} selected value
	     */
	    getValue: function getValue() {
	        return this.state.value;
	    },
	
	
	    /**
	    * handle click on radio
	    * @param {object} event - the click event
	    */
	    _handleRadioChange: function _handleRadioChange(newValue) {
	        var onChange = this.props.onChange;
	
	        if (onChange) {
	            onChange(newValue);
	            return;
	        }
	        //Set the state then call the change handler.
	        this.setState({ value: newValue });
	    },
	
	    /**
	     * Closure to capture key and radio status.
	     * @param  {string} key the key of radio
	     * @return {func} status closure
	     */
	    _getRadioChangeHandler: function _getRadioChangeHandler(key) {
	        var _this = this;
	
	        return function () {
	            _this._handleRadioChange(key);
	        };
	    },
	
	    /**
	    * Render radio for each values
	    * @return {XML} the different radio values
	    */
	    renderSelectRadios: function renderSelectRadios() {
	        var _this2 = this;
	
	        var uniqueName = this.state.uniqueName;
	
	        return this.props.values.map(function (val, idx) {
	            var value = val[_this2.props.valueKey];
	            var label = val[_this2.props.labelKey];
	            var disabled = _this2.props.disabled;
	            var isChecked = value === _this2.state.value;
	            return React.createElement(InputRadio, { key: idx, label: _this2.i18n(label), name: uniqueName, onChange: _this2._getRadioChangeHandler(value), value: isChecked, disabled: disabled });
	        });
	    },
	
	    /** @inheritdoc */
	    render: function render() {
	        var error = this.props.error;
	
	        return React.createElement(
	            'div',
	            { 'data-focus': 'select-radio', 'data-valid': !error },
	            this.renderSelectRadios(),
	            error && React.createElement(
	                'div',
	                { className: 'label-error', ref: 'error' },
	                error
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(selectRadioMixin);

/***/ }),
/* 871 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var Checkbox = __webpack_require__(434);
	var i18nBehaviour = __webpack_require__(293);
	
	var _require = __webpack_require__(452),
	    pull = _require.pull;
	
	var selectCheckboxMixin = {
	    mixins: [i18nBehaviour],
	    /**
	    * Tag name.
	    */
	    displayName: 'SelectCheckbox',
	
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            values: [], // all values
	            value: [], // selected values list
	            valueKey: 'value', // key for the displayed value
	            labelKey: 'label' // key for the displayed label
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: function propTypes() {
	        return {
	            values: (0, _types2.default)('array'),
	            value: (0, _types2.default)('array'),
	            valueKey: (0, _types2.default)('string'),
	            labelKey: (0, _types2.default)('string'),
	            onChange: (0, _types2.default)('func')
	        };
	    },
	
	
	    /** @inheritdoc */
	    getInitialState: function getInitialState() {
	        return {
	            selectedValues: this.props.value
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'select-checkbox\' component from FocusComponents.common is deprecated, please use FocusComponents.components.select.SelectCheckbox');
	    },
	
	
	    /** @inheritdoc */
	    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	        if (newProps) {
	            this.setState({ selectedValues: newProps.value });
	        }
	    },
	
	
	    /**
	    * Get the value from the select in the DOM.
	    * @return {string} value
	    */
	    getValue: function getValue() {
	        return this.state.selectedValues;
	    },
	
	
	    /**
	     * Handle a change of value.
	     * @param  {[type]} key       the key
	     * @param  {[type]} newStatus the new status
	     */
	    _handleCheckboxChange: function _handleCheckboxChange(key, newStatus) {
	        if (this.props.onChange) {
	            this.props.onChange(key, newStatus);
	            return;
	        }
	        var selectedValues = this.state.selectedValues;
	        if (newStatus) {
	            selectedValues.push(key);
	        } else {
	            pull(selectedValues, key);
	        }
	        this.setState({ value: selectedValues });
	    },
	
	    /**
	     * Closure to capture key and checbox status.
	     * @param  {[type]} key the key of checkbox
	     * @return {[type]} status closure
	     */
	    _getCheckboxChangeHandler: function _getCheckboxChangeHandler(key) {
	        var _this = this;
	
	        return function (status) {
	            _this._handleCheckboxChange(key, status);
	        };
	    },
	
	    /**
	     * Render all selection checkbox.
	     * @return {ReactDOMNode} list of ReactDomNode
	     */
	    renderCheckboxes: function renderCheckboxes() {
	        var _this2 = this;
	
	        return this.props.values.map(function (val, idx) {
	            var value = val[_this2.props.valueKey];
	            var label = val[_this2.props.labelKey];
	            var isChecked = 0 <= _this2.state.selectedValues.indexOf(value);
	            return React.createElement(Checkbox, { key: idx, label: _this2.i18n(label), onChange: _this2._getCheckboxChangeHandler(value), value: isChecked });
	        });
	    },
	
	
	    /** @inheritdoc */
	    render: function render() {
	        return React.createElement(
	            'div',
	            { 'data-focus': 'select-checkbox' },
	            this.renderCheckboxes()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(selectCheckboxMixin);

/***/ }),
/* 872 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	
	
	// Mixins
	var Stylabe = __webpack_require__(816);
	
	var _require = __webpack_require__(602),
	    scrollTo = _require.scrollTo,
	    scrollPosition = _require.scrollPosition;
	
	var _require2 = __webpack_require__(529),
	    filter = _require2.filter;
	
	var _require3 = __webpack_require__(452),
	    first = _require3.first,
	    last = _require3.last;
	
	/**
	* Scrollspy component.
	* Listen to a scroll, and sets an active class to the currently displayed element.
	*/
	
	
	var Scrollspy = {
	    /**
	    * Stylable mixin.
	    */
	    mixins: [Stylabe],
	    /**
	    * Get the default props.
	    * By default, listen to the body element
	    * @return {Object} the default properties
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            titleSelector: '[data-spy]',
	            affixOffset: 0
	        };
	    },
	
	    /**
	    * Props validation
	    */
	    propTypes: {
	        titleSelector: (0, _types2.default)('string'),
	        affixOffset: (0, _types2.default)('number')
	    },
	    /** @inheritDoc */
	    getInitialState: function getInitialState() {
	        return {
	            titleList: []
	        };
	    },
	
	    /** @inheritDoc */
	    componentDidMount: function componentDidMount() {
	        this.setState({
	            titleList: this._getTitleList()
	        });
	        this._scrollCarrier = window;
	        this._scrollCarrier.addEventListener('scroll', this._scrollSpy);
	        this._scrollCarrier.addEventListener('resize', this._scrollSpy);
	        this._scrollSpy();
	    },
	
	    /** @inheritDoc */
	    componentWillUnmount: function componentWillUnmount() {
	        this._scrollCarrier.removeEventListener('scroll', this._scrollSpy);
	        this._scrollCarrier.removeEventListener('resize', this._scrollSpy);
	    },
	
	    /**
	    * Get the menu items list
	    * @return {Array} the menu items
	    * @private
	    */
	    _getTitleList: function _getTitleList() {
	        var titleSelector = this.props.titleSelector;
	
	        var rawTitleList = document.querySelectorAll(titleSelector);
	        return [].map.call(rawTitleList, function (titleElement, index) {
	            return {
	                index: index,
	                label: titleElement.innerHTML,
	                id: titleElement.getAttribute('data-spy'),
	                offsetTop: titleElement.parentElement.parentElement.offsetTop // TODO TGN : to rewrite
	            };
	        });
	    },
	
	    /**
	    * Item click handler.
	    * Set the scroll to display the clicked item
	    * @param {Object} title - the clicked item object
	    * @return {Function} hte click handler
	    * @private
	    */
	    _linkClickHandler: function _linkClickHandler(title) {
	        var _this = this;
	
	        return function () {
	            var selectedTitle = document.querySelector('[data-spy=\'' + title.id + '\']');
	            scrollTo(undefined, selectedTitle.offsetTop - _this.props.affixOffset);
	        };
	    },
	
	    /**
	    * Render the items list
	    * @return {XML} the rendered HTML
	    * @private
	    */
	    _renderList: function _renderList() {
	        var _this2 = this;
	
	        var _state = this.state,
	            activeTitleId = _state.activeTitleId,
	            titleList = _state.titleList;
	
	        return React.createElement(
	            'ul',
	            null,
	            ' ',
	            titleList.map(function (title) {
	                var lineProps = {
	                    className: activeTitleId === title.id && 'active',
	                    key: title.id,
	                    onClick: _this2._linkClickHandler(title)
	                };
	                return React.createElement(
	                    'li',
	                    lineProps,
	                    title.label
	                );
	            }),
	            ' '
	        );
	    },
	
	    /**
	    * Render the component
	    * @return {XML} the rendered component
	    */
	    render: function render() {
	        var affix = this.state.affix;
	
	        return React.createElement(
	            'div',
	            { 'data-focus': 'scrollspy', ref: 'scrollSpy' },
	            React.createElement(
	                'nav',
	                { 'data-affix': !!affix, style: affix ? { position: 'fixed', top: this.props.affixOffset + 'px' } : null },
	                this._renderList()
	            ),
	            React.createElement(
	                'div',
	                null,
	                this.props.children
	            )
	        );
	    },
	
	    /**
	    * The scroll event handler
	    * @private
	    */
	    _scrollSpy: function _scrollSpy() {
	        var _this3 = this;
	
	        var titleList = this._getTitleList();
	        if (0 === titleList.length) {
	            return;
	        }
	        //---
	        var scrollposition = scrollPosition();
	
	        var nextTitles = filter(titleList, function (n) {
	            return scrollposition.top < n.offsetTop - _this3.props.affixOffset;
	        });
	
	        //by default, first node is indexed
	        var currentId = titleList[0].id;
	        if (0 < nextTitles.length) {
	            //check the first node
	            var firstNode = first(nextTitles);
	            var index = firstNode.index;
	            if (0 < index) {
	                currentId = titleList[index - 1].id;
	            }
	        } else {
	            //means that the position is the last title
	            currentId = last(titleList).id;
	        }
	        //save current state
	        var scrollSpy = this.refs.scrollSpy;
	
	        if (scrollSpy) {
	            var componentTopPosition = ReactDOM.findDOMNode(scrollSpy).offsetTop;
	            this.setState({
	                activeTitleId: currentId,
	                affix: componentTopPosition + this.props.affixOffset < scrollposition.top
	            });
	        }
	    }
	};
	
	module.exports = (0, _builder2.default)(Scrollspy);

/***/ }),
/* 873 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _translation = __webpack_require__(142);
	
	var _collection = __webpack_require__(529);
	
	var _action = __webpack_require__(819);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TopicDisplayer = {
	    displayName: 'TopicDisplayer',
	
	    /**
	     * Default props.
	     * @returns {object} default props.
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            style: undefined, // Component css style.
	            topicClickAction: function topicClickAction() {},
	            // Action when click on topic
	            topicList: {}, // {topic1: "Label of topic one", topic2:"Label of topic 2"} List f topics,
	            displayLabels: false
	        };
	    },
	
	
	    /**
	     * Render the component.
	     * @returns {JSX} Htm code.
	     */
	    render: function render() {
	        var _this = this;
	
	        var _props = this.props,
	            displayLabels = _props.displayLabels,
	            topicList = _props.topicList;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'topic-displayer' },
	            (0, _collection.map)(topicList, function (topic, key) {
	                var text = displayLabels ? (0, _translation.translate)(topic.label) + ': ' + (0, _translation.translate)(topic.value) : (0, _translation.translate)(topic.value);
	                return _react2.default.createElement(_action.component, {
	                    handleOnClick: _this.topicClickHandler(key),
	                    icon: 'clear',
	                    key: key,
	                    label: text
	                });
	            })
	        );
	    },
	
	
	    /**
	     * Action on the topic click.
	     * @param  {String} key  topic key
	     * @return {Function}     Click handler
	     */
	    topicClickHandler: function topicClickHandler(key) {
	        var _this2 = this;
	
	        return function (event) {
	            if (event) {
	                event.preventDefault();
	            }
	            _this2.props.topicClickAction(key);
	        };
	    }
	};
	
	// Components
	
	
	module.exports = (0, _builder2.default)(TopicDisplayer);

/***/ }),
/* 874 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    definition: __webpack_require__(833),
	    fieldComponentBehaviour: __webpack_require__(842),
	    fieldGridBehaviour: __webpack_require__(831),
	    referenceProperty: __webpack_require__(840),
	    storeBehaviour: __webpack_require__(852),
	    builtInComponents: __webpack_require__(835),
	    ownIdentifier: __webpack_require__(855)
	};

/***/ }),
/* 875 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    text: __webpack_require__(876),
	    checkbox: __webpack_require__(877)
	};

/***/ }),
/* 876 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//Dependencies.
	var React = __webpack_require__(146);
	var i18nBehaviour = __webpack_require__(293);
	
	/**
	* Input text mixin.
	* @type {Object}
	*/
	var displayTextMixin = {
	    mixins: [i18nBehaviour],
	    displayName: 'DeprecatedDisplayText',
	    /** @inheritdoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            formatter: function formatter(data) {
	                return data;
	            }
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        type: (0, _types2.default)('string'),
	        value: (0, _types2.default)(['string', 'number']),
	        name: (0, _types2.default)('string'),
	        style: (0, _types2.default)('object')
	    },
	    /**
	    * Render the value.
	    * @return {string} The formated value.
	    */
	    renderValue: function renderValue() {
	        var _props = this.props,
	            formatter = _props.formatter,
	            value = _props.value;
	
	        return formatter(value);
	    },
	
	    /** @inheritdoc */
	    render: function renderInput() {
	        return React.createElement(
	            'div',
	            this.props,
	            this.renderValue()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(displayTextMixin);

/***/ }),
/* 877 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146); //Dependencies.
	
	var i18nBehaviour = __webpack_require__(293);
	/**
	 * Input text mixin.
	 * @type {Object}
	 */
	var displayCheckboxMixin = {
	    mixins: [i18nBehaviour],
	    /** @inheritdoc */
	    getDefaultProps: function getInputDefaultProps() {
	        return {
	            value: undefined,
	            name: undefined,
	            style: {}
	        };
	    },
	    /** @inheritdoc */
	    propTypes: {
	        type: (0, _types2.default)('string'),
	        value: (0, _types2.default)('bool'),
	        name: (0, _types2.default)('string'),
	        style: (0, _types2.default)('object')
	    },
	    /**
	     * Render the boolean value.
	     */
	    renderValue: function renderValueDisplayText() {
	        var stringValue = this.props.value === true ? 'true' : 'false';
	        return this.i18n('display.checkbox.' + stringValue);
	    },
	    /**
	     * Render a display field.
	     * @return {DOM} - The dom of an input.
	     */
	    render: function renderInput() {
	        return React.createElement(
	            'div',
	            {
	                id: this.props.name,
	                name: this.props.name,
	                className: this.props.style.class
	            },
	            this.renderValue()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(displayCheckboxMixin);

/***/ }),
/* 878 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _user = __webpack_require__(599);
	
	var _user2 = _interopRequireDefault(_user);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var intersection = __webpack_require__(475);
	var isArray = __webpack_require__(167);
	
	
	/**
	 * Mixin button.
	 * @type {Object}
	 */
	var roleMixin = {
	    propTypes: {
	        hasOne: (0, _types2.default)('array'),
	        hasAll: (0, _types2.default)('array')
	    },
	    render: function render() {
	        var userRoles = _user2.default.getRoles();
	        if (isArray(this.props.hasAll) && intersection(userRoles, this.props.hasAll).length === this.props.hasAll.length) {
	            return this.props.children;
	        } else if (isArray(this.props.hasOne) && intersection(userRoles, this.props.hasOne).length > 0) {
	            return this.props.children;
	        }
	        return null;
	    }
	};
	
	module.exports = (0, _builder2.default)(roleMixin);

/***/ }),
/* 879 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// see http://www.getmdl.io/components/index.html#layout-section/grid
	//dependencies
	var React = __webpack_require__(146);
	var Component = React.Component;
	
	/**
	 * Grid component.
	 */
	var Grid = function (_Component) {
	    _inherits(Grid, _Component);
	
	    function Grid(props) {
	        _classCallCheck(this, Grid);
	
	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }
	
	    Grid.prototype.componentWillMount = function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Grid\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Grid');
	    };
	    /** @inheriteDoc */
	
	
	    Grid.prototype.render = function render() {
	        var _props = this.props,
	            children = _props.children,
	            otherProps = _objectWithoutProperties(_props, ['children']);
	
	        return React.createElement(
	            'div',
	            _extends({ className: 'mdl-grid' }, otherProps),
	            children
	        );
	    };
	
	    return Grid;
	}(Component);
	
	Grid.propTypes = {};
	
	//Static props.
	Grid.displayName = 'Grid';
	module.exports = Grid;

/***/ }),
/* 880 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	// see http://www.getmdl.io/components/index.html#layout-section/grid
	//dependencies
	var React = __webpack_require__(146);
	var Component = React.Component;
	
	/**
	 * Column component.
	 */
	var Column = function (_Component) {
	    _inherits(Column, _Component);
	
	    function Column(props) {
	        _classCallCheck(this, Column);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	        _this._className = _this._className.bind(_this);
	        return _this;
	    }
	
	    Column.prototype.componentWillMount = function componentWillMount() {
	        console.warn('FocusComponents v0.15: the \'Column\' component from FocusComponents.common is deprecated, please use FocusComponents.components.Column');
	    };
	
	    Column.prototype._className = function _className() {
	        var _props = this.props,
	            size = _props.size,
	            className = _props.className;
	
	        if (className) {
	            return className;
	        }
	        var SIZE_CSS = size ? 'mdl-cell--' + size + '-col' : '';
	        return 'mdl-cell ' + SIZE_CSS + ' ';
	    };
	    /** @inheriteDoc */
	
	
	    Column.prototype.render = function render() {
	        var _props2 = this.props,
	            children = _props2.children,
	            otherProps = _objectWithoutProperties(_props2, ['children']);
	
	        var className = this._className();
	        return React.createElement(
	            'div',
	            _extends({ className: className }, otherProps),
	            children
	        );
	    };
	
	    return Column;
	}(Component);
	
	//Static props.
	
	
	Column.displayName = 'Column';
	Column.defaultProps = {
	    size: 6
	};
	Column.propTypes = {
	    size: (0, _types2.default)('number'),
	    className: (0, _types2.default)('string')
	};
	
	module.exports = Column;

/***/ }),
/* 881 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
		actionBar: __webpack_require__(882),
		actionContextual: __webpack_require__(843),
		selection: __webpack_require__(848),
		summary: __webpack_require__(883),
		timeline: __webpack_require__(885),
		table: __webpack_require__(838),
		mixin: __webpack_require__(888)
	};

/***/ }),
/* 882 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _topicDisplayer = __webpack_require__(612);
	
	var _topicDisplayer2 = _interopRequireDefault(_topicDisplayer);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _grid = __webpack_require__(604);
	
	var _grid2 = _interopRequireDefault(_grid);
	
	var _column = __webpack_require__(605);
	
	var _column2 = _interopRequireDefault(_column);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var _require = __webpack_require__(529),
	    reduce = _require.reduce;
	
	// Components
	
	var Dropdown = __webpack_require__(844).component;
	var ActionContextual = __webpack_require__(843).component;
	
	
	// Mixins
	
	var translationMixin = __webpack_require__(293);
	
	var ActionBar = {
	
	  /**
	  * Display name.
	  */
	  displayName: 'ListActionBar',
	
	  mixins: [translationMixin],
	
	  propTypes: {
	    facetClickAction: _react.PropTypes.func,
	    facetList: _react.PropTypes.object,
	    groupAction: _react.PropTypes.func,
	    groupLabelPrefix: _react.PropTypes.string,
	    groupSelectedKey: _react.PropTypes.string,
	    groupableColumnList: _react.PropTypes.object,
	    hasGrouping: _react.PropTypes.bool.isRequired,
	    isSelection: _react.PropTypes.bool.isRequired,
	    operationList: _react.PropTypes.array,
	    orderAction: _react.PropTypes.func,
	    orderSelected: _react.PropTypes.object,
	    orderableColumnList: _react.PropTypes.array, // [{key:'columnKey', label:'columnLabel'}]
	    selectionAction: _react.PropTypes.func,
	    selectionStatus: _react.PropTypes.string // none, selected, partial
	  },
	
	  /**
	  * INit default props
	  * @returns {object} Defautkl props.
	  */
	  getDefaultProps: function getDefaultProps() {
	    return {
	      isSelection: true,
	      hasGrouping: true,
	      selectionStatus: 'none', // none, selected, partial
	      selectionAction: function selectionAction(selectionStatus) {
	        console.warn(selectionStatus);
	      },
	      // Action on selection click
	      orderableColumnList: undefined, // [{key:'columnKey', label:'columnLabel'}]
	      orderAction: function orderAction(key, order) {
	        console.warn(key + '-' + order);
	      },
	      // Action on click on order function
	      orderSelected: {},
	      facetClickAction: function facetClickAction(key) {
	        console.warn(key);
	      },
	      // Action when click on facet
	      facetList: {}, // {facet1: 'Label of facet one', facet2:'Label of facet 2'} List of facets
	      groupableColumnList: {}, // {col1: 'Label1', col2: 'Label2'}
	      groupAction: function groupAction(key) {
	        console.warn(key);
	      },
	      // Action on group function
	      operationList: [], // List of contextual operations
	      groupLabelPrefix: ''
	    };
	  },
	
	
	  /**
	  * @returns {JSX} Selection component.
	  * @private
	  */
	  _getSelectionObject: function _getSelectionObject() {
	    var _this = this;
	
	    var onIconClick = function onIconClick() {
	      var newSelectionStatus = _this.props.selectionStatus === 'none' ? 'selected' : 'none';
	      _this.props.selectionAction(newSelectionStatus);
	    };
	    return _react2.default.createElement(_button2.default, { shape: 'icon', icon: this._getSelectionObjectIcon(), handleOnClick: onIconClick });
	  },
	
	
	  /**
	  * @returns {JSX} Order component.
	  * @private
	  */
	  _getOrderObject: function _getOrderObject() {
	    if (this.props.orderableColumnList) {
	      var orderSelectedParsedKey = this.props.orderSelected.key + this.props.orderSelected.order;
	      var orderOperationList = []; // [{key:'columnKey', order:'asc', label:'columnLabel'}]
	      for (var key in this.props.orderableColumnList) {
	        var description = this.props.orderableColumnList[key];
	        orderOperationList.push({
	          action: this._orderFunction(description.key, description.order),
	          label: description.label,
	          style: this._getSelectedStyle(description.key + description.order, orderSelectedParsedKey)
	        });
	      }
	      var orderIcon = 'sort_by_alpha';
	      return _react2.default.createElement(Dropdown, { iconProps: { name: orderIcon }, key: 'down', operationList: orderOperationList });
	    }
	    return null;
	  },
	
	
	  /**
	  * @returns {JSX} Grouping component.
	  * @private
	  */
	  _getGroupObject: function _getGroupObject() {
	    var _this2 = this;
	
	    var hasGrouping = this.props.hasGrouping;
	
	    if (hasGrouping) {
	      var _props = this.props,
	          groupLabelPrefix = _props.groupLabelPrefix,
	          groupSelectedKey = _props.groupSelectedKey,
	          groupableColumnList = _props.groupableColumnList,
	          style = _props.style;
	
	      var groupOperationList = reduce(groupableColumnList, function (operationList, label, key) {
	        operationList.push({
	          action: _this2._groupFunction(key),
	          label: _this2.i18n(groupLabelPrefix + label),
	          style: _this2._getSelectedStyle(key, groupSelectedKey)
	        });
	        return operationList;
	      }, []).concat([{
	        label: this.i18n('list.actionBar.ungroup'),
	        action: this._groupFunction()
	      }]);
	      var groupIcon = 'folder_open';
	      return _react2.default.createElement(Dropdown, { iconProps: { name: groupIcon }, operationList: groupOperationList });
	    }
	    return null;
	  },
	
	
	  /**
	  * @param {string} currentKey Current selected key.
	  * @param {string} selectedKey Key corresponding to the selected one.
	  * @returns {string} Class selected if currentKey corresponds to the selectedKey.
	  * @private
	  */
	  _getSelectedStyle: function _getSelectedStyle(currentKey, selectedKey) {
	    if (currentKey === selectedKey) {
	      return ' selected ';
	    }
	    return undefined;
	  },
	
	
	  /**
	  * @return {string} Class of the selection component icon.
	  * @private
	  */
	  _getSelectionObjectIcon: function _getSelectionObjectIcon() {
	    if ('none' === this.props.selectionStatus) {
	      return 'check_box_outline_blank';
	    } else if ('selected' === this.props.selectionStatus) {
	      return 'check_box';
	    }
	    return 'indeterminate_check_box';
	  },
	  _orderFunction: function _orderFunction(key, order) {
	    var _this3 = this;
	
	    return function () {
	      _this3.props.orderAction(key, order);
	    };
	  },
	  _groupFunction: function _groupFunction(key) {
	    var _this4 = this;
	
	    return function () {
	      _this4.props.groupAction(key);
	    };
	  },
	
	
	  /**
	  * Render the html
	  * @returns {JSX} Htm content.
	  */
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      { className: 'mdl-grid', 'data-focus': 'list-action-bar' },
	      _react2.default.createElement(
	        'div',
	        { className: 'mdl-cell', 'data-focus': 'global-list-content' },
	        this.props.isSelection && this._getSelectionObject(),
	        this._getOrderObject(),
	        this._getGroupObject()
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'mdl-cell mdl-cell--hide-tablet mdl-cell--hide-phone', 'data-focus': 'selected-facet-content' },
	        _react2.default.createElement(_topicDisplayer2.default, {
	          displayLabels: true,
	          topicClickAction: this.props.facetClickAction,
	          topicList: this.props.facetList })
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'mdl-cell', 'data-focus': 'contextual-action-content' },
	        _react2.default.createElement(ActionContextual, { operationList: this.props.operationList })
	      )
	    );
	  }
	};
	
	module.exports = (0, _builder2.default)(ActionBar);

/***/ }),
/* 883 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _translation = __webpack_require__(142);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _number = __webpack_require__(884);
	
	var _number2 = _interopRequireDefault(_number);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styleBehaviour = __webpack_require__(816);
	var TopicDisplayer = __webpack_require__(612);
	
	
	var listSummaryMixin = {
	    mixins: [styleBehaviour],
	    /**
	     * Display name.
	     */
	    displayName: 'ListSummary',
	
	    /**
	     * Init the default props.
	     * @returns {objet} default props.
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            scopeList: {}
	        };
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        nb: (0, _types2.default)('number'),
	        queryText: (0, _types2.default)('string'),
	        scopeList: (0, _types2.default)('object').isRequired,
	        scopeClickAction: (0, _types2.default)('func'),
	        exportAction: (0, _types2.default)('func')
	    },
	    /**
	     * Return result sentence.
	     * @return {object} Result sentence
	     */
	    _getResultSentence: function _getResultSentence() {
	        var _props = this.props,
	            nb = _props.nb,
	            queryText = _props.queryText;
	
	        var hasText = queryText && queryText.trim().length > 0;
	        var sentence = nb > 1 ? hasText ? 'results.for' : 'results.all' : hasText ? 'result.for' : 'result.all';
	        return _react2.default.createElement(
	            'span',
	            null,
	            _react2.default.createElement(
	                'strong',
	                null,
	                _number2.default.format(nb),
	                '\xA0'
	            ),
	            _react2.default.createElement(
	                'span',
	                null,
	                (0, _translation.translate)(sentence),
	                hasText && _react2.default.createElement(
	                    'span',
	                    { className: 'search-text' },
	                    '\xAB\xA0',
	                    queryText,
	                    '\xA0\xBB'
	                )
	            )
	        );
	    },
	
	    /**
	     * Render the html.
	     * @returns {JSX} Html rendering.
	     */
	    render: function render() {
	        var _props2 = this.props,
	            exportAction = _props2.exportAction,
	            scopeList = _props2.scopeList,
	            scopeClickAction = _props2.scopeClickAction;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'list-summary' },
	            exportAction && _react2.default.createElement(
	                'div',
	                { className: 'print' },
	                _react2.default.createElement(_button2.default, { handleOnClick: exportAction, icon: 'print', label: 'result.export', shape: null })
	            ),
	            _react2.default.createElement(
	                'span',
	                { className: 'sentence' },
	                this._getResultSentence()
	            ),
	            _react2.default.createElement(
	                'span',
	                { className: 'topics' },
	                _react2.default.createElement(TopicDisplayer, { topicClickAction: scopeClickAction, topicList: scopeList })
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(listSummaryMixin);

/***/ }),
/* 884 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_884__;

/***/ }),
/* 885 */
[938, 886, 887],
/* 886 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**@jsx*/
	var React = __webpack_require__(146);
	
	var translationMixin = __webpack_require__(827).mixin;
	var referenceMixin = __webpack_require__(840);
	var definitionMixin = __webpack_require__(833);
	var builtInComponentsMixin = __webpack_require__(841);
	
	var lineMixin = {
	    /**
	     * React component name.
	     */
	    displayName: 'timeline-line',
	
	    /**
	     * Mixin dependancies.
	     */
	    mixins: [translationMixin, definitionMixin, referenceMixin, builtInComponentsMixin],
	
	    getInitialState: function getInitialSate() {
	        return {};
	    },
	
	    /**
	     * line property validation.
	     * @type {Object}
	     */
	    propTypes: {
	        data: (0, _types2.default)('object'),
	        dateField: (0, _types2.default)('string'),
	        dateComponent: (0, _types2.default)('object'),
	        onLineClick: (0, _types2.default)('func')
	    },
	
	    /**
	     * Get the line value.
	     * @returns {object} - the data od the line.
	     */
	    getValue: function getLineValue() {
	        return {
	            item: this.props.data
	        };
	    },
	
	    /**
	     * Line Click handler.
	     * @param {object} event - the event
	     */
	    _handleLineClick: function handleLineClick(event) {
	        if (this.props.onLineClick) {
	            this.props.onLineClick(this.props.data);
	        }
	    },
	
	    /**
	     * render content for a line.
	     * @returns {XML} the line content
	     */
	    _renderLineContent: function renderLineContent() {
	        if (this.renderLineContent) {
	            return this.renderLineContent(this.props.data);
	        } else {
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    { className: 'timeline-heading' },
	                    React.createElement(
	                        'h4',
	                        { className: 'timeline-title' },
	                        this.props.data.title
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'timeline-body' },
	                    React.createElement(
	                        'p',
	                        null,
	                        this.props.data.body
	                    )
	                )
	            );
	        }
	    },
	
	    /**
	     * Render line in list.
	     * @returns {XML} - the render of the line
	     */
	    render: function renderLine() {
	        if (this.renderLine) {
	            return this.renderLine();
	        } else {
	            return React.createElement(
	                'li',
	                null,
	                React.createElement(
	                    'div',
	                    { className: 'timeline-date' },
	                    this.textFor(this.props.dateField, {})
	                ),
	                React.createElement('div', { className: 'timeline-badge' }),
	                React.createElement(
	                    'div',
	                    { className: 'timeline-panel', onClick: this._handleLineClick },
	                    this._renderLineContent()
	                )
	            );
	        }
	    }
	};
	
	module.exports = { mixin: lineMixin };

/***/ }),
/* 887 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _object = __webpack_require__(851);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _isReactClassComponent = __webpack_require__(829);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var React = __webpack_require__(146);
	
	var Line = __webpack_require__(886).mixin;
	var uuid = __webpack_require__(401);
	var translationMixin = __webpack_require__(827).mixin;
	var infiniteScrollMixin = __webpack_require__(846).mixin;
	var referenceMixin = __webpack_require__(840);
	//Add a ref to the props if the component is not pure add nothing in the other case.
	
	
	var listMixin = {
	    /**
	    * Tag name
	    */
	    displayName: 'timeline',
	
	    /**
	    * Mixin dependancies.
	    */
	    mixins: [translationMixin, infiniteScrollMixin, referenceMixin],
	
	    /**
	    * Default properties for the list.
	    * @return {object} default props.
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            data: [],
	            idField: 'id',
	            dateField: 'date',
	            isLoading: false
	        };
	    },
	
	    /**
	    * list property validation.
	    */
	    propTypes: {
	        data: (0, _types2.default)('array'),
	        idField: (0, _types2.default)('string'),
	        dateField: (0, _types2.default)('string'),
	        dateComponent: (0, _types2.default)('object'),
	        lineComponent: (0, _types2.default)('func'),
	        isloading: (0, _types2.default)('bool'),
	        loader: (0, _types2.default)('func'),
	        onLineClick: (0, _types2.default)('func')
	    },
	
	    /**
	    * Render lines of the list.
	    * @returns {*} the lines
	    */
	    _renderLines: function _renderLines() {
	        var _this = this;
	
	        var _props = this.props,
	            _props$LineComponent = _props.LineComponent,
	            LineComponent = _props$LineComponent === undefined ? React.createClass(Line) : _props$LineComponent,
	            idField = _props.idField,
	            dateField = _props.dateField,
	            onLineClick = _props.onLineClick,
	            data = _props.data,
	            otherProps = _objectWithoutProperties(_props, ['LineComponent', 'idField', 'dateField', 'onLineClick', 'data']);
	        // LEGACY CODE
	
	
	        var customLineComponent = otherProps.lineComponent;
	        if (customLineComponent) {
	            console.warn('%c DEPRECATED : You are using the lineComponent prop in a timeline component, this will be removed in the next release of Focus Components. Please use LineComponent prop instead.', 'color: #FF9C00; font-weight: bold');
	        }
	        var FinalLineComponent = customLineComponent || LineComponent;
	        // END OF LEGACY CODE
	
	        return data.map(function (line, idx) {
	            var timelineFinalProps = (0, _isReactClassComponent.addRefToPropsIfNotPure)(FinalLineComponent, _extends({}, otherProps, {
	                data: line,
	                dateField: dateField,
	                key: line[idField] || uuid.v4(),
	                onLineClick: onLineClick,
	                reference: _this._getReference()
	            }), '' + _isReactClassComponent.LINE + idx);
	            return React.createElement(FinalLineComponent, timelineFinalProps);
	        });
	    },
	
	
	    _renderLoading: function renderLoading() {
	        if (this.props.isLoading) {
	            if (this.props.loader) {
	                return this.props.loader();
	            }
	            return React.createElement(
	                'li',
	                { className: 'timeline-loading' },
	                this.i18n('list.loading'),
	                ' ...'
	            );
	        }
	    },
	
	    _renderManualFetch: function renderManualFetch() {
	        if (this.props.isManualFetch && this.props.hasMoreData) {
	            var style = { className: 'primary' };
	            return React.createElement(
	                'li',
	                { className: 'timeline-button' },
	                React.createElement(_button2.default, { label: 'list.button.showMore',
	                    type: 'button',
	                    handleOnClick: this.handleShowMore,
	                    style: style })
	            );
	        }
	    },
	
	    /**
	    * Render the list.
	    * @returns {XML} the list component
	    */
	    render: function renderList() {
	        return React.createElement(
	            'ul',
	            { className: 'timeline' },
	            this._renderLines(),
	            this._renderLoading(),
	            this._renderManualFetch()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(listMixin);

/***/ }),
/* 888 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    infiniteScroll: __webpack_require__(846),
	    builtInComponents: __webpack_require__(841),
	    memoryScroll: __webpack_require__(837),
	    pagination: __webpack_require__(847)
	};

/***/ }),
/* 889 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    facetBox: __webpack_require__(890),
	    searchBar: __webpack_require__(893)
	};

/***/ }),
/* 890 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var assign = __webpack_require__(519);
	var omit = __webpack_require__(383);
	
	// Components
	var Facet = __webpack_require__(891).component;
	
	// Mixins
	var stylable = __webpack_require__(816);
	
	var FacetBox = {
	    /**
	     * Component's mixins
	     */
	    mixins: [stylable],
	    /**
	     * Display name.
	     */
	    displayName: 'facet-box',
	    /**
	     * Init the default properties
	     * @returns {object} Initial properties.
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            facetList: {},
	            selectedFacetList: {},
	            openedFacetList: {},
	            config: {}
	        };
	    },
	    /**
	     * List property validation.
	     */
	    propTypes: {
	        facetList: (0, _types2.default)('object'),
	        selectedFacetList: (0, _types2.default)('object'),
	        openedFacetList: (0, _types2.default)('object'),
	        config: (0, _types2.default)('object'),
	        dataSelectionHandler: (0, _types2.default)('func')
	    },
	    /**
	     * Init the state of the component.
	     * @returns {object} Iitial state.
	     */
	    getInitialState: function getInitialState() {
	        var openedFacetList = this.props.openedFacetList;
	        if (Object.keys(openedFacetList).length == 0) {
	            this._generateOpenedFacetList(this.props.facetList);
	        }
	        return {
	            isExpanded: true,
	            openedFacetList: openedFacetList
	        };
	    },
	    /**
	     * New properties set event handle
	     * @param {Object} nextProps
	     */
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        var openedFacetList = nextProps.openedFacetList;
	        if (Object.keys(openedFacetList).length == 0) {
	            openedFacetList = this._generateOpenedFacetList(nextProps.facetList);
	        }
	        this.setState({ openedFacetList: openedFacetList });
	    },
	    _generateOpenedFacetList: function _generateOpenedFacetList(facetList) {
	        return Object.keys(facetList).reduce(function (list, facetKey) {
	            list[facetKey] = true;
	            return list;
	        }, {});
	    },
	
	    /**
	     * Render the component.
	     * @returns {XML} Html code.
	     */
	    render: function render() {
	        var className = '';
	        if (this.state.isExpanded) {
	            className += ' expanded';
	        } else {
	            className += ' collapsed';
	        }
	        return _react2.default.createElement(
	            'div',
	            { className: '' + (this._getStyleClassName() + className), 'data-focus': 'facet-box' },
	            this._renderFacetBoxTitle(),
	            this._renderFacetList()
	        );
	    },
	
	    /**
	     * Render the div title of the component.
	     * @returns {XML} Html content.
	     */
	    _renderFacetBoxTitle: function _renderFacetBoxTitle() {
	        var title = this.state.isExpanded ? (0, _translation.translate)('live.filter.title') : '';
	        //TODO onClick={this._facetBoxTitleClickHandler} (le repli doit aussi etre porté par le data-focus=advanced-search
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'facet-box-heading', onClick: this._facetBoxTitleClickHandler },
	            _react2.default.createElement(
	                'h2',
	                null,
	                title
	            )
	        );
	    },
	
	    /**
	     * Render the list of the facets.
	     * @returns {XML} Html content.
	     */
	    _renderFacetList: function _renderFacetList() {
	        var _this = this;
	
	        if (!this.state.isExpanded) {
	            return '';
	        }
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'facet-box-body' },
	            Object.keys(this.props.facetList).map(function (facetKey) {
	                var facet = _this.props.facetList[facetKey];
	                var selectedDataKey = _this.props.selectedFacetList[facetKey] ? _this.props.selectedFacetList[facetKey].key : undefined;
	                if (selectedDataKey || Object.keys(facet).length > 1) {
	                    return _react2.default.createElement(Facet, { facetKey: facetKey, key: facetKey,
	                        facet: facet,
	                        selectedDataKey: selectedDataKey,
	                        isExpanded: _this.state.openedFacetList[facetKey],
	                        expandHandler: _this._facetExpansionHandler,
	                        selectHandler: _this._facetSelectionHandler,
	                        type: _this.props.config[facetKey]
	                    });
	                }
	            })
	        );
	    },
	
	    /**
	     * Action on title click.
	     * Hide / Expand the component.
	     */
	    _facetBoxTitleClickHandler: function _facetBoxTitleClickHandler() {
	        this.setState({ isExpanded: !this.state.isExpanded });
	    },
	
	    /**
	     * Facet selection action handler.
	     * @param {string} facetKey Key of the selected facet.
	     * @param {string} dataKey Key of the selceted data.
	     * @param {object} data Content of the selected data facet.
	     */
	    _facetSelectionHandler: function _facetSelectionHandler(facetKey, dataKey, data) {
	        var result = { openedFacetList: this.state.openedFacetList };
	        if (dataKey == undefined) {
	            result.selectedFacetList = omit(this.props.selectedFacetList, facetKey);
	        } else {
	            result.selectedFacetList = assign(this.props.selectedFacetList, _defineProperty({}, facetKey, { key: dataKey, data: data }));
	        }
	        this.props.dataSelectionHandler(result);
	    },
	
	    /**
	     * Expand facet action handler.
	     * @param {string} facetKey Key of the facet.
	     * @param {string} isExpanded true if expand action, false if collapse action.
	     */
	    _facetExpansionHandler: function _facetExpansionHandler(facetKey, isExpanded) {
	        var openedFacetList = this.state.openedFacetList;
	        openedFacetList[facetKey] = isExpanded;
	        this.setState({ openedFacetList: openedFacetList });
	    }
	};
	
	module.exports = (0, _builder2.default)(FacetBox);

/***/ }),
/* 891 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _translation = __webpack_require__(142);
	
	var _isObject = __webpack_require__(159);
	
	var _isObject2 = _interopRequireDefault(_isObject);
	
	var _keys = __webpack_require__(155);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _uniqueId = __webpack_require__(419);
	
	var _uniqueId2 = _interopRequireDefault(_uniqueId);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Components
	var FacetData = __webpack_require__(892).component;
	
	var Facet = {
	    /**
	     * Display name.
	     */
	    displayName: 'Facet',
	    /**
	     * Init the component state.
	     * @returns {object} Initial state.
	     */
	    getInitialState: function getInitialState() {
	        return {
	            isShowAll: false
	        };
	    },
	
	    /**
	     * Init the default props.
	     * @returns {object} Initial state.
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            nbDefaultDataList: 6
	        };
	    },
	
	    propTypes: {
	        facet: _react.PropTypes.array,
	        isShowAll: _react.PropTypes.bool,
	        nbDefaultDataList: _react.PropTypes.number
	    },
	    /**
	     * Render the component.
	     * @returns {XML} Html component code.
	     */
	    render: function render() {
	        var className = 'facet';
	        if (this.props.selectedDataKey) {
	            className += '-selected';
	        } else if (this.props.isExpanded) {
	            className += '-expanded';
	        } else {
	            className += '-collapsed';
	        }
	        return _react2.default.createElement(
	            'div',
	            { className: className, 'data-focus': 'facet' },
	            this._renderFacetTitle(),
	            this._renderFacetDataList()
	        );
	    },
	
	    /**
	     * Render the component title.
	     * @returns {XML} Html component code.
	     */
	    _renderFacetTitle: function _renderFacetTitle() {
	        var _this = this;
	
	        var title = (0, _translation.translate)('live.filter.facets.' + this.props.facetKey); // Default facet translation path is live.filter.facets.
	        if (this.props.selectedDataKey) {
	            var facetLabel = this.props.facet && (0, _isObject2.default)(this.props.facet[this.props.selectedDataKey]) ? this.props.facet[this.props.selectedDataKey].label : this.props.facet.find(function (elm) {
	                return elm.label === _this.props.selectedDataKey;
	            }).label;
	            title = title + ' : ' + facetLabel;
	        }
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'facet-title', onClick: this._facetTitleClickHandler },
	            _react2.default.createElement(
	                'h3',
	                null,
	                title
	            )
	        );
	    },
	
	    /**
	     * Action on facet title click.
	     */
	    _facetTitleClickHandler: function _facetTitleClickHandler() {
	        this.props.expandHandler(this.props.facetKey, !this.props.isExpanded);
	        if (this.props.selectedDataKey) {
	            this.props.selectHandler(this.props.facetKey, undefined, undefined);
	        }
	        this.setState({
	            isExpanded: !this.props.isExpanded,
	            isShowAll: false
	        });
	    },
	
	    /**
	     * Render the list of data of the facet.
	     * @returns {XML} Html component code.
	     */
	    _renderFacetDataList: function _renderFacetDataList() {
	        var _this2 = this;
	
	        if (!this.props.isExpanded || this.props.selectedDataKey) {
	            return '';
	        }
	        // The parsed facets are now an array
	        var facetValues = this.state.isShowAll ? this.props.facet : this.props.facet.slice(0, this.props.nbDefaultDataList);
	        return _react2.default.createElement(
	            'div',
	            { className: '', 'data-focus': 'facet-data-list' },
	            _react2.default.createElement(
	                'ul',
	                null,
	                facetValues.map(function (facetValue) {
	                    return _react2.default.createElement(
	                        'li',
	                        { key: (0, _uniqueId2.default)('facet-item') },
	                        _react2.default.createElement(FacetData, {
	                            dataKey: facetValue.label,
	                            data: facetValue,
	                            selectHandler: _this2._facetDataSelectionHandler,
	                            type: _this2.props.type
	                        })
	                    );
	                })
	            ),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'facet-data-show-all' },
	                this._renderShowAllDataList()
	            )
	        );
	    },
	
	    /**
	     * Action on facet data selection.
	     * @param {string} dataKey Key of the selected data.
	     * @param {string} data Selected data.
	     */
	    _facetDataSelectionHandler: function _facetDataSelectionHandler(dataKey, data) {
	        this.props.expandHandler(this.props.facetKey, false);
	        this.props.selectHandler(this.props.facetKey, dataKey, data);
	    },
	
	    /**
	     * Render all the data facets.
	     * @returns {XML} Html component code.
	     */
	    _renderShowAllDataList: function _renderShowAllDataList() {
	        if (!this.state.isShowAll && Object.keys(this.props.facet).length > this.props.nbDefaultDataList) {
	            return _react2.default.createElement(
	                'a',
	                { href: 'javascript:void(0);', 'data-focus': 'facet-show-all', onClick: this._showAllHandler },
	                (0, _translation.translate)('show.all')
	            );
	        }
	    },
	
	    /**
	     * Action on 'show all' action.
	     */
	    _showAllHandler: function _showAllHandler() {
	        this.setState({ isShowAll: !this.state.isShowAll });
	    }
	};
	
	module.exports = (0, _builder2.default)(Facet);

/***/ }),
/* 892 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _exception = __webpack_require__(295);
	
	var _number = __webpack_require__(884);
	
	var _number2 = _interopRequireDefault(_number);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FacetData = {
	    getDefaultProps: function getDefaultProps() {
	        return {
	            type: 'text'
	        };
	    },
	
	    /**
	     * Display name.
	     */
	    displayName: 'FacetData',
	    /**
	     * Render the component.
	     * @returns {XML} Html code of the component.
	     */
	    render: function render() {
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'facet-data', onClick: this._selectFacetData },
	            this._renderData()
	        );
	    },
	
	    /**
	     * Render the data.
	     * @returns {string} Html generated code.
	     */
	    _renderData: function _renderData() {
	        if (this.props.type == 'text') {
	            return this.props.data.label + ' (' + _number2.default.format(this.props.data.count) + ')';
	        }
	        throw new _exception.ArgumentInvalidException('Unknown property type : ' + this.props.type);
	    },
	
	    /**
	     * Facet selection action handler.
	     * @returns {function} the facet selection handler.
	     */
	    _selectFacetData: function _selectFacetData() {
	        return this.props.selectHandler(this.props.dataKey, this.props.data);
	    }
	};
	
	module.exports = (0, _builder2.default)(FacetData);

/***/ }),
/* 893 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(147);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _translation = __webpack_require__(142);
	
	var _text = __webpack_require__(438);
	
	var _text2 = _interopRequireDefault(_text);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var actionWrapper = __webpack_require__(894);
	
	// Components
	var Scope = __webpack_require__(895).component;
	
	
	// Mixins
	var stylable = __webpack_require__(816);
	
	/**
	* SearchBar component
	* @type {Object}
	*/
	var SearchBar = {
	    mixins: [stylable],
	    displayName: 'SearchBar',
	    /**
	    * Component default properties.
	    * @return {Object} the default props.
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            placeholder: 'search.bar.placeholder',
	            scopes: [],
	            minChar: 0,
	            loading: false,
	            helpTranslationPath: 'search.bar.help',
	            hasScopes: true,
	            identifier: undefined,
	            store: undefined,
	            action: undefined,
	            onSearchCriteriaChangeByUser: undefined
	        };
	    },
	
	    propTypes: {
	        hasScopes: _react.PropTypes.bool,
	        helpTranslationPath: _react.PropTypes.string,
	        loading: _react.PropTypes.bool,
	        minChar: _react.PropTypes.number,
	        placeholder: _react.PropTypes.string,
	        scopes: _react.PropTypes.array,
	        value: _react.PropTypes.string,
	        onSearchCriteriaChangeByUser: _react.PropTypes.func
	    },
	    /**
	    * Get the initial state
	    * @return {Object} the initial state
	    */
	    getInitialState: function getInitialState() {
	        return {
	            loading: this.props.loading,
	            scope: this.props.store.getScope(),
	            query: this.props.store.getQuery()
	        };
	    },
	
	    /**
	    * Component did mount handler
	    */
	    componentDidMount: function componentDidMount() {
	        this._focusQuery();
	    },
	
	    /**
	    * Component will mount handler
	    */
	    componentWillMount: function componentWillMount() {
	        this.props.store.addQueryChangeListener(this._onQueryChangeFromStore);
	        this.props.store.addScopeChangeListener(this._onScopeChangeFromStore);
	        this.props.store.addResultsChangeListener(this._onResultsChangeFromStore);
	    },
	
	    /**
	    * Component did unmount handler
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        this.props.store.removeQueryChangeListener(this._onQueryChangeFromStore);
	        this.props.store.removeScopeChangeListener(this._onScopeChangeFromStore);
	        this.props.store.removeResultsChangeListener(this._onResultsChangeFromStore);
	    },
	
	    /**
	    * Query changed in store event handler
	    */
	    _onQueryChangeFromStore: function _onQueryChangeFromStore() {
	        this.setState({
	            query: this.props.store.getQuery()
	        });
	    },
	
	    /**
	    * Scope changed in store event handler
	    */
	    _onScopeChangeFromStore: function _onScopeChangeFromStore() {
	        this.setState({
	            scope: this.props.store.getScope()
	        });
	    },
	    _onResultsChangeFromStore: function _onResultsChangeFromStore() {
	        this.setState({ loading: false });
	    },
	
	    /**
	    * Broadcast query change
	    */
	    _broadcastQueryChange: function _broadcastQueryChange() {
	        var _this = this;
	
	        actionWrapper(function () {
	            _this.props.action.updateProperties({
	                query: _this.refs.query.getValue()
	            });
	            _this.setState({
	                loading: true
	            });
	        })();
	    },
	
	    /**
	    * Input change handler
	    * @param  {String} query the new query
	    */
	    _onInputChange: function _onInputChange(query) {
	        this.setState({ query: query });
	        var _props = this.props,
	            minChar = _props.minChar,
	            onSearchCriteriaChangeByUser = _props.onSearchCriteriaChangeByUser;
	
	        if (query.length >= minChar) {
	            this._broadcastQueryChange();
	        }
	        if (onSearchCriteriaChangeByUser) {
	            onSearchCriteriaChangeByUser();
	        }
	    },
	
	    /**
	    * Scope selection handler
	    * @param  {Object} scope selected scope
	    */
	    _onScopeSelection: function _onScopeSelection(scope) {
	        this._focusQuery();
	        var _props2 = this.props,
	            action = _props2.action,
	            onSearchCriteriaChangeByUser = _props2.onSearchCriteriaChangeByUser;
	
	        action.updateProperties({
	            scope: scope,
	            selectedFacets: {},
	            groupingKey: undefined,
	            sortBy: undefined,
	            sortAsc: true
	        });
	        this.setState({ scope: scope });
	        if (onSearchCriteriaChangeByUser) {
	            onSearchCriteriaChangeByUser();
	        }
	    },
	
	    /**
	    * Input key press handler
	    * @param  {String} key pressed key
	    */
	    _handleInputKeyPress: function _handleInputKeyPress(_ref) {
	        var _this2 = this;
	
	        var key = _ref.key;
	
	        if ('Enter' === key) {
	            var onSearchCriteriaChangeByUser = this.props.onSearchCriteriaChangeByUser;
	
	            actionWrapper(function () {
	                _this2.props.action.updateProperties({
	                    query: _this2.refs.query.getValue()
	                });
	            }, null, 0)();
	            if (onSearchCriteriaChangeByUser) {
	                onSearchCriteriaChangeByUser();
	            }
	        }
	    },
	
	    /**
	    * Render help message
	    * @return {HTML} rendered help message
	    */
	    _renderHelp: function _renderHelp() {
	        return _react2.default.createElement(
	            'div',
	            { ref: 'help' },
	            (0, _translation.translate)(this.props.helpTranslationPath)
	        );
	    },
	
	    /**
	    * Focus the query input field
	    */
	    _focusQuery: function _focusQuery() {
	        _reactDom2.default.findDOMNode(this.refs.query).focus();
	    },
	
	    /**
	    * Render the component.
	    * @return {HTML} - The rendered component
	    */
	    render: function render() {
	        var _props3 = this.props,
	            hasScopes = _props3.hasScopes,
	            scopes = _props3.scopes;
	        var _state = this.state,
	            loading = _state.loading,
	            query = _state.query,
	            scope = _state.scope;
	
	        var placeholder = this.props.placeholder;
	        if (query && 0 < query.length) {
	            placeholder = '';
	        }
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'search-bar' },
	            hasScopes && _react2.default.createElement(Scope, { list: scopes, onScopeSelection: this._onScopeSelection, ref: 'scope', value: scope }),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'search-bar-input' },
	                _react2.default.createElement(_text2.default, { name: 'searchbarinput', onChange: this._onInputChange, onKeyPress: this._handleInputKeyPress, placeholder: (0, _translation.translate)(placeholder), ref: 'query', value: query }),
	                loading && _react2.default.createElement('div', { className: 'three-quarters-loader', 'data-role': 'spinner' })
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(SearchBar);

/***/ }),
/* 894 */
/***/ (function(module, exports) {

	"use strict";
	
	var DEFAULT_TIMEOUT = 500; // 0.5s
	var currentCall = {};
	function actionWrapper(searchAction, context, timeout) {
	    return function () {
	        context = context || this || {};
	        var args = arguments;
	        if (currentCall) {
	            //Cancel previous search action.
	            window.clearTimeout(currentCall.timeout);
	            if (currentCall.action && currentCall.action.cancel) {
	                currentCall.action.cancel();
	            }
	        }
	        currentCall.timeout = window.setTimeout(function () {
	            currentCall.action = searchAction.apply(context, args);
	            if (currentCall.action && currentCall.action.cancel) {
	                currentCall.action.then(function () {
	                    currentCall = {};
	                });
	            } else {
	                currentCall = {};
	            }
	        }, timeout !== undefined ? timeout : DEFAULT_TIMEOUT);
	        return currentCall.timeout;
	    };
	}
	module.exports = actionWrapper;

/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _translation = __webpack_require__(142);
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _icon = __webpack_require__(607);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var ReactDOM = __webpack_require__(147);
	
	var uuid = __webpack_require__(401);
	var find = __webpack_require__(547);
	
	var _require = __webpack_require__(406),
	    uniqueId = _require.uniqueId;
	
	// Components
	
	
	var Dropdown = __webpack_require__(844).component;
	
	var scopeMixin = {
	    /**
	    * Component tag name.
	    * @type {String}
	    */
	    displayName: 'Scope',
	    /**
	    * Component default properties.
	    * @return {Object} the default props.
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            list: []
	        };
	    },
	
	    /**
	    * Scope property validation.
	    * @type {Object}
	    */
	    propTypes: {
	        list: _react.PropTypes.array.isRequired,
	        value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
	    },
	    /**
	    * Called when component will mount.
	    */
	    componentWillMount: function componentWillMount() {
	        this.scopesId = uniqueId('scopes_');
	    },
	
	    /**
	    * Called when component is mounted.
	    */
	    componentDidMount: function componentDidMount() {
	        if (ReactDOM.findDOMNode(this.refs.scopeDropdown)) {
	            componentHandler.upgradeElement(ReactDOM.findDOMNode(this.refs.scopeDropdown));
	        }
	    },
	
	    /**
	    * Component will receive props.
	    * @param {Object} nextProps the next props
	    */
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        if (ReactDOM.findDOMNode(this.refs.scopeDropdown)) {
	            componentHandler.upgradeElement(ReactDOM.findDOMNode(this.refs.scopeDropdown));
	        }
	    },
	
	    /**
	    * Called before component is unmounted.
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        if (ReactDOM.findDOMNode(this.refs.scopeDropdown)) {
	            componentHandler.downgradeElements(ReactDOM.findDOMNode(this.refs.scopeDropdown));
	        }
	    },
	
	    /**
	    * Get the scope click handler, based on the scope given as an argument.
	    * @param  {String} code   the clicked scope's code
	    * @return {Function}  the scope click handler
	    */
	    _getScopeClickHandler: function _getScopeClickHandler(_ref) {
	        var _this = this;
	
	        var code = _ref.code;
	        var onScopeSelection = this.props.onScopeSelection;
	
	        return function () {
	            if (onScopeSelection) {
	                onScopeSelection(code);
	            }
	            // Fix MDL issue with closing a dropdown
	            var parentRef = _this.refs.parent;
	            if (parentRef) {
	                var dropdownDiv = parentRef.getElementsByTagName('div')[0];
	                dropdownDiv.className = dropdownDiv.className.replace(' is-visible', '');
	            }
	        };
	    },
	    _getActiveScope: function _getActiveScope() {
	        var _props = this.props,
	            list = _props.list,
	            value = _props.value;
	
	        var activeScope = find(list, { code: value });
	        return activeScope || {};
	    },
	
	    /**
	    * Render the scope list if it is deployed
	    * @return {HTML} the rendered scope list
	    */
	    _renderScopeList: function _renderScopeList() {
	        var _this2 = this;
	
	        var scopesId = this.scopesId;
	        var _props2 = this.props,
	            scopeList = _props2.list,
	            value = _props2.value;
	
	        return _react2.default.createElement(
	            'ul',
	            { className: 'mdl-menu mdl-menu--bottom-left mdl-js-menu mdl-js-ripple-effect', 'data-focus': 'search-bar-scopes', htmlFor: scopesId, ref: 'scopeDropdown' },
	            0 < scopeList.length && scopeList.map(function (scope) {
	                var code = scope.code,
	                    icon = scope.icon,
	                    label = scope.label,
	                    otherScopeProps = _objectWithoutProperties(scope, ['code', 'icon', 'label']);
	
	                var scopeId = uniqueId('scopes_');
	                var isActive = value === code;
	                return _react2.default.createElement(
	                    'li',
	                    { className: 'mdl-menu__item', 'data-active': isActive, key: scope.code || scopeId, 'data-scope': scope.code || scopeId, onClick: _this2._getScopeClickHandler(scope) },
	                    scope.code && _react2.default.createElement(_icon2.default, _extends({ name: icon || code }, otherScopeProps)),
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        (0, _translation.translate)(label)
	                    )
	                );
	            }),
	            0 === scopeList.length && _react2.default.createElement(
	                'li',
	                { className: 'mdl-menu__item' },
	                (0, _translation.translate)('scopes.empty')
	            )
	        );
	    },
	
	    /**
	    * Render the complete scope element.
	    * @return {object} - The jsx element.
	    */
	    render: function render() {
	        var scopesId = this.scopesId;
	
	        var activeScope = this._getActiveScope();
	
	        var code = activeScope.code,
	            icon = activeScope.icon,
	            label = activeScope.label,
	            otherScopeProps = _objectWithoutProperties(activeScope, ['code', 'icon', 'label']);
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'search-bar-scope', ref: 'parent' },
	            _react2.default.createElement(
	                'button',
	                { className: 'mdl-button mdl-js-button', id: scopesId, 'data-scope': code },
	                _react2.default.createElement(_icon2.default, _extends({ name: icon || code }, otherScopeProps)),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    (0, _translation.translate)(label)
	                )
	            ),
	            this._renderScopeList()
	        );
	    }
	};
	module.exports = (0, _builder2.default)(scopeMixin);

/***/ }),
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Dependencies
	
	var React = __webpack_require__(146);
	var detailMixin = __webpack_require__(897).mixin;
	
	//Function to help page creation.
	module.exports = {
	    detail: detailMixin,
	    search: __webpack_require__(901),
	    mixin: __webpack_require__(921),
	    list: __webpack_require__(922),
	    /**
	     * Helper to creates a detail page.
	     * @param {object} config - The page configuration.
	     * @returns {object} - The react component associated to the page.
	     */
	    createDetail: function createDetail(config) {
	        config = config || {};
	        if (config.mixins) {
	            config.mixins.push(detailMixin);
	        } else {
	            config.mixins = [detailMixin];
	        }
	        return React.createClass(config);
	    }
	};

/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var saveBehaviour = __webpack_require__(898);
	var validateBehaviour = __webpack_require__(899);
	var cartridgeBehaviour = __webpack_require__(900);
	
	var detailMixin = {
	    mixins: [validateBehaviour, saveBehaviour, cartridgeBehaviour]
	};
	module.exports = { mixin: detailMixin };

/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var isFunction = __webpack_require__(158);
	var assign = __webpack_require__(519);
	module.exports = {
	    _getDetail: function getDetail() {
	        var detailJSON = {};
	        for (var blockKey in this.refs) {
	            if (isFunction(this.refs[blockKey]._getEntity)) {
	                var blockJSON = this.refs[blockKey]._getEntity();
	                assign(detailJSON, _defineProperty({}, blockKey, blockJSON));
	            }
	        }
	        return detailJSON;
	    }
	};

/***/ }),
/* 899 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var _require = __webpack_require__(148),
	    isFunction = _require.isFunction,
	    isEmpty = _require.isEmpty;
	
	var assign = __webpack_require__(519);
	module.exports = {
	    validate: function validateDetail() {
	        var validationMap = {};
	        for (var blockKey in this.refs) {
	            //validate only the reference elements which have valide function
	            // todo: @pierr see if it is sufficient
	            if (isFunction(this.refs[blockKey].validate)) {
	                var validationRes = this.refs[blockKey].validate();
	                if (validationRes !== undefined) {
	                    assign(validationMap, _defineProperty({}, blockKey, validationRes));
	                }
	            }
	        }
	        if (isEmpty(validationMap)) {
	            return true;
	        }
	    }
	};

/***/ }),
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _lang = __webpack_require__(148);
	
	var _application = __webpack_require__(399);
	
	var _empty = __webpack_require__(822);
	
	module.exports = {
	
	    /**
	     * Updates the cartridge using the cartridgeConfiguration.
	     */
	    _registerCartridge: function _registerCartridge() {
	        this.cartridgeConfiguration = this.cartridgeConfiguration || this.props.cartridgeConfiguration;
	
	        if (!(0, _lang.isFunction)(this.cartridgeConfiguration)) {
	            this.cartridgeConfiguration = function () {
	                return {};
	            };
	            console.warn('\n                Your detail page does not have any cartrige configuration, this is not mandarory but recommended.\n                It should be a component attribute return by a function.\n                function cartridgeConfiguration(){\n                    var cartridgeConfiguration = {\n                    summary: {component: "A React Component", props: {id: this.props.id}},\n                    cartridge: {component: "A React Component"},\n                    actions: {components: "react actions"}\n                    };\n                    return cartridgeConfiguration;\n                }\n            ');
	        }
	
	        (0, _application.setHeader)(this.cartridgeConfiguration());
	    },
	
	
	    /**
	     * Registers the cartridge upon mounting.
	     */
	    componentWillMount: function componentWillMount() {
	        this._registerCartridge();
	    }
	};

/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    advancedSearch: __webpack_require__(902),
	    quickSearch: __webpack_require__(913),
	    searchHeader: __webpack_require__(915),
	    common: __webpack_require__(919)
	};

/***/ }),
/* 902 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _dispatcher = __webpack_require__(903);
	
	var _dispatcher2 = _interopRequireDefault(_dispatcher);
	
	var _buttonBackToTop = __webpack_require__(601);
	
	var _buttonBackToTop2 = _interopRequireDefault(_buttonBackToTop);
	
	var _group = __webpack_require__(904);
	
	var _group2 = _interopRequireDefault(_group);
	
	var _builtInStore = __webpack_require__(905);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _actionBuilder = __webpack_require__(906);
	
	var _actionBuilder2 = _interopRequireDefault(_actionBuilder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var _require = __webpack_require__(297),
	    camel = _require.camelCase;
	
	var _require2 = __webpack_require__(297),
	    capitalize = _require2.capitalize;
	
	var _require3 = __webpack_require__(148),
	    isFunction = _require3.isFunction;
	
	var _require4 = __webpack_require__(529),
	    reduce = _require4.reduce;
	
	// Components
	
	
	var FacetBox = __webpack_require__(907).component;
	var ListActionBar = __webpack_require__(908).component;
	var ListSummary = __webpack_require__(909).component;
	var Results = __webpack_require__(910).component;
	
	// Store
	
	
	// Mixins
	var CartridgeBehaviour = __webpack_require__(900);
	
	// Actions
	
	
	/**
	* Page mixin of the advanced search.
	* @type {Object}
	*/
	var AdvancedSearch = {
	  /**
	  * Component's mixins
	  * @type {Array}
	  */
	  mixins: [CartridgeBehaviour],
	  /**
	  * Display name.
	  */
	  displayName: 'advanced-search',
	  /**
	  * Get the default props
	  * @return {object} the default props
	  */
	  getDefaultProps: function getDefaultProps() {
	    return {
	      action: undefined,
	      backToTopComponent: _buttonBackToTop2.default,
	      callSearchOnMount: true,
	      facetConfig: {},
	      groupComponent: _group2.default,
	      hasBackToTop: true,
	      isSelection: true,
	      lineOperationList: [],
	      lineComponentMapper: undefined,
	      orderableColumnList: [],
	      onLineClick: undefined,
	      openedFacetList: {},
	      scopesConfig: {},
	      scrollParentSelector: undefined,
	      service: undefined,
	      store: _builtInStore.advancedSearchStore
	    };
	  },
	
	  /**
	  * Props validation
	  * @type {Object}
	  */
	  propTypes: {
	    action: (0, _types2.default)('object'),
	    backToTopComponent: (0, _types2.default)('func'),
	    callSearchOnMount: (0, _types2.default)('bool'),
	    exportAction: (0, _types2.default)('func'),
	    facetConfig: (0, _types2.default)('object'),
	    groupComponent: (0, _types2.default)('func'),
	    hasBackToTop: (0, _types2.default)('bool'),
	    isSelection: (0, _types2.default)('bool'),
	    lineComponentMapper: (0, _types2.default)('func'),
	    lineOperationList: (0, _types2.default)(['array', 'object']),
	    onLineClick: (0, _types2.default)('func'),
	    orderableColumnList: (0, _types2.default)(['array', 'object']),
	    openedFacetList: (0, _types2.default)('object'),
	    scopesConfig: (0, _types2.default)('object'),
	    scrollParentSelector: (0, _types2.default)('string'),
	    service: (0, _types2.default)('object'),
	    store: (0, _types2.default)('object')
	  },
	  /**
	  * Get initial state
	  * @return {Object} initial state
	  */
	  getInitialState: function getInitialState() {
	    return this._getNewStateFromStore();
	  },
	
	  /**
	  * Register the store listeners
	  */
	  componentWillMount: function componentWillMount() {
	    var _this = this;
	
	    var _props = this.props,
	        store = _props.store,
	        callSearchOnMount = _props.callSearchOnMount,
	        service = _props.service;
	    //listen to search event
	
	    store.on('advanced-search-criterias:change', this._onStoreChangeWithSearch);
	
	    //listen to data changes
	    ['facets', 'results', 'total-count'].forEach(function (node) {
	      store['add' + capitalize(camel(node)) + 'ChangeListener'](_this._onStoreChangeWithoutSearch);
	    });
	
	    // listen to scope change
	    store.addScopeChangeListener(this._onScopeChange);
	
	    this._action = this.props.action || (0, _actionBuilder2.default)({
	      service: service,
	      identifier: store.identifier,
	      getSearchOptions: function getSearchOptions() {
	        return store.getValue.call(store);
	      } // Binding the store in the function call
	    });
	    if (this.props.callSearchOnMount) {
	      this._action.search();
	    }
	  },
	
	  /**
	  * Un-register the store listeners
	  */
	  componentWillUnmount: function componentWillUnmount() {
	    var _this2 = this;
	
	    // remove listeners
	    this.props.store.removeListener('advanced-search-criterias:change', this._onStoreChangeWithSearch);
	    ['facets', 'results', 'total-count'].forEach(function (node) {
	      _this2.props.store['remove' + capitalize(camel(node)) + 'ChangeListener'](_this2._onStoreChangeWithoutSearch);
	    });
	    this.props.store.removeScopeChangeListener(this._onScopeChange);
	  },
	  getSelectedItems: function getSelectedItems() {
	    var results = this.refs.resultList;
	    var selectedItems = reduce(results.refs, function (selectedItems, ref) {
	      if (isFunction(ref.getSelectedItems)) {
	        selectedItems = selectedItems.concat(ref.getSelectedItems());
	      } else if (ref.refs) {
	        selectedItems = selectedItems.concat(reduce(ref.refs, function (subSelectedItems, subRef) {
	          if (isFunction(subRef.getSelectedItems)) {
	            subSelectedItems = subSelectedItems.concat(subRef.getSelectedItems());
	          }
	          return subSelectedItems;
	        }, []));
	      }
	      return selectedItems;
	    }, []);
	    return selectedItems;
	  },
	
	  /**
	  * Store changed, update the state, trigger a search after update
	  */
	  _onStoreChangeWithSearch: function _onStoreChangeWithSearch() {
	    this.setState(this._getNewStateFromStore(), this._action.search);
	  },
	
	  /**
	  * Store changed, update the state, do not trigger a search after update
	  */
	  _onStoreChangeWithoutSearch: function _onStoreChangeWithoutSearch() {
	    this.setState(this._getNewStateFromStore());
	  },
	
	  /**
	  * Scope changed, need to remove all existing sort.
	  */
	  _onScopeChange: function _onScopeChange() {
	    _dispatcher2.default.handleViewAction({ data: { sortBy: null, sortAsc: null },
	      type: 'update',
	      identifier: _builtInStore.advancedSearchStore.identifier });
	  },
	  /**
	  * Compute a state object from the store values.
	  * @return {[type]} [description]
	  */
	  _getNewStateFromStore: function _getNewStateFromStore() {
	    var store = this.props.store;
	
	    var query = store.getQuery();
	    var scope = store.getScope();
	    var selectedFacets = store.getSelectedFacets() || {};
	    var groupingKey = store.getGroupingKey();
	    var sortBy = store.getSortBy();
	    var sortAsc = store.getSortAsc();
	    var facets = store.getFacets();
	    var results = store.getResults();
	    var totalCount = store.getTotalCount();
	    var selectionStatus = 'none';
	    var hasGrouping = scope !== undefined && scope !== 'ALL';
	    return {
	      facets: facets,
	      groupingKey: groupingKey,
	      hasGrouping: hasGrouping,
	      query: query,
	      selectionStatus: selectionStatus,
	      scope: scope,
	      selectedFacets: selectedFacets,
	      sortBy: sortBy,
	      sortAsc: sortAsc,
	      results: results,
	      totalCount: totalCount
	    };
	  },
	
	  /**
	  * Export action handler.
	  */
	  _exportHandler: function _exportHandler() {
	    this.props.exportAction();
	  },
	
	  /**
	  * Render the facet box.
	  * @returns {HTML} the rendered component
	  */
	  _renderFacetBox: function _renderFacetBox() {
	    var _state = this.state,
	        facets = _state.facets,
	        selectedFacets = _state.selectedFacets;
	    var _props2 = this.props,
	        facetConfig = _props2.facetConfig,
	        scopesConfig = _props2.scopesConfig,
	        openedFacetList = _props2.openedFacetList;
	
	    return React.createElement(FacetBox, {
	      action: this._action,
	      facetConfig: facetConfig,
	      openedFacetList: openedFacetList,
	      facets: facets,
	      ref: 'facetBox',
	      scopesConfig: scopesConfig,
	      selectedFacets: selectedFacets
	    });
	  },
	
	  /**
	  * Render the list summary component.
	  * @returns {HTML} the rendered component
	  */
	  _renderListSummary: function _renderListSummary() {
	    var _state2 = this.state,
	        query = _state2.query,
	        scope = _state2.scope,
	        totalCount = _state2.totalCount;
	
	    return React.createElement(ListSummary, {
	      action: this._action,
	      query: query,
	      ref: 'summary',
	      scope: scope,
	      totalCount: totalCount
	    });
	  },
	
	  /**
	  * Render the action bar.
	  * @returns {HTML} the rendered component
	  */
	  _renderActionBar: function _renderActionBar() {
	    var _this3 = this;
	
	    var _state3 = this.state,
	        facets = _state3.facets,
	        groupingKey = _state3.groupingKey,
	        hasGrouping = _state3.hasGrouping,
	        selectedFacets = _state3.selectedFacets,
	        selectionStatus = _state3.selectionStatus,
	        sortBy = _state3.sortBy;
	    var _props3 = this.props,
	        isSelection = _props3.isSelection,
	        lineOperationList = _props3.lineOperationList,
	        orderableColumnList = _props3.orderableColumnList;
	
	    var groupableColumnList = facets ? Object.keys(facets).reduce(function (result, facetKey) {
	      if (Object.keys(facets[facetKey]).length > 1) {
	        result[facetKey] = facetKey;
	      }
	      return result;
	    }, {}) : {};
	    var selectionAction = function selectionAction(status) {
	      _this3.setState({ selectionStatus: status });
	    };
	    return React.createElement(ListActionBar, {
	      action: this._action,
	      groupSelectedKey: groupingKey,
	      groupableColumnList: groupableColumnList,
	      hasGrouping: hasGrouping,
	      isSelection: isSelection,
	      operationList: lineOperationList,
	      orderSelected: sortBy,
	      orderableColumnList: orderableColumnList,
	      ref: 'actionBar',
	      selectedFacets: selectedFacets,
	      selectionAction: selectionAction,
	      selectionStatus: selectionStatus
	    });
	  },
	
	  /**
	  * Render the results component
	  * @return {HTML} the rendered component
	  */
	  _renderResults: function _renderResults() {
	    var _props4 = this.props,
	        groupComponent = _props4.groupComponent,
	        isSelection = _props4.isSelection,
	        lineComponentMapper = _props4.lineComponentMapper,
	        lineOperationList = _props4.lineOperationList,
	        scrollParentSelector = _props4.scrollParentSelector,
	        store = _props4.store,
	        scopesConfig = _props4.scopesConfig;
	    var _state4 = this.state,
	        groupingKey = _state4.groupingKey,
	        facets = _state4.facets,
	        results = _state4.results,
	        selectionStatus = _state4.selectionStatus,
	        totalCount = _state4.totalCount;
	
	    return React.createElement(Results, {
	      action: this._action,
	      groupComponent: groupComponent,
	      groupingKey: groupingKey,
	      isSelection: isSelection,
	      lineClickHandler: this._lineClick,
	      lineComponentMapper: lineComponentMapper,
	      lineOperationList: lineOperationList,
	      lineSelectionHandler: this._selectItem,
	      ref: 'resultList',
	      renderSingleGroupDecoration: false,
	      resultsFacets: facets,
	      resultsMap: results,
	      scopesConfig: scopesConfig,
	      scrollParentSelector: scrollParentSelector,
	      selectionStatus: selectionStatus,
	      store: store,
	      totalCount: totalCount
	    });
	  },
	
	  /**
	  * Line selection handler
	  */
	  _selectItem: function _selectItem() {
	    // count the selected items
	    var selectedItemsCount = this.getSelectedItems().length;
	    // Count the visible items
	    var visibleItemsCount = reduce(this.refs.resultList.refs, function (visibleItemsCount, refComponent, refKey) {
	      // Results might be a list (non-grouped search) or groups (grouped search)
	      if (refKey.indexOf('list-') === 0) {
	        visibleItemsCount += refComponent.props.data.length;
	      }
	      if (refKey.indexOf('group-') === 0) {
	        if (refComponent.props.list.length < refComponent.state.resultsDisplayedCount) {
	          visibleItemsCount += refComponent.props.list.length;
	        } else {
	          visibleItemsCount += refComponent.state.resultsDisplayedCount;
	        }
	      }
	      return visibleItemsCount;
	    }, 0);
	    // By default, the selection status is partial
	    var selectionStatus = 'partial';
	    // If no item is selected, then the selectionStatus is none
	    if (selectedItemsCount === 0) {
	      selectionStatus = 'none';
	    } else if (selectedItemsCount === visibleItemsCount) {
	      // There are as many selected items as visible items, so the selectionStatus is all
	      selectionStatus = 'selected';
	    }
	    this.setState({ selectionStatus: selectionStatus });
	  },
	
	  /**
	  * Action on line click.
	  * @param {object} item  the item clicked
	  */
	  _lineClick: function _lineClick(item) {
	    if (this.props.onLineClick) {
	      this.props.onLineClick(item);
	    }
	  },
	
	  /**
	  * Render the component
	  * @return {HTML} the rendered component
	  */
	  render: function render() {
	    // true if a facet is collapsed
	    var facetCollapsedClassName = Object.keys(this.props.openedFacetList).length === 0 ? 'facet-collapsed' : '';
	    return React.createElement(
	      'div',
	      { className: 'advanced-search', 'data-focus': 'advanced-search' },
	      React.createElement(
	        'div',
	        { 'data-focus': 'facet-container', className: facetCollapsedClassName },
	        this._renderFacetBox()
	      ),
	      React.createElement(
	        'div',
	        { 'data-focus': 'result-container' },
	        this._renderListSummary(),
	        this._renderActionBar(),
	        this._renderResults()
	      ),
	      this.props.hasBackToTop && React.createElement(this.props.backToTopComponent, null)
	    );
	  }
	};
	
	module.exports = (0, _builder2.default)(AdvancedSearch);

/***/ }),
/* 903 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_903__;

/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _class;
	
	//web components
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _number = __webpack_require__(884);
	
	var _number2 = _interopRequireDefault(_number);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _column = __webpack_require__(605);
	
	var _column2 = _interopRequireDefault(_column);
	
	var _grid = __webpack_require__(604);
	
	var _grid2 = _interopRequireDefault(_grid);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var propTypes = {
	    canShowMore: _react.PropTypes.bool.isRequired,
	    count: _react.PropTypes.number.isRequired,
	    groupKey: _react.PropTypes.string.isRequired,
	    showAllHandler: _react.PropTypes.func.isRequired,
	    showMoreHandler: _react.PropTypes.func.isRequired
	};
	
	var defaultProps = {
	    count: 0
	};
	
	var AdvancedSearchGroup = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(AdvancedSearchGroup, _Component);
	
	    function AdvancedSearchGroup() {
	        _classCallCheck(this, AdvancedSearchGroup);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    AdvancedSearchGroup.prototype.render = function render() {
	        var _props = this.props,
	            canShowMore = _props.canShowMore,
	            count = _props.count,
	            children = _props.children,
	            groupKey = _props.groupKey,
	            showAllHandler = _props.showAllHandler,
	            showMoreHandler = _props.showMoreHandler;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'group-container' },
	            _react2.default.createElement(
	                'h3',
	                null,
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    groupKey
	                ),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    _number2.default.format(count)
	                )
	            ),
	            _react2.default.createElement(
	                'p',
	                null,
	                this.i18n('search.mostRelevant')
	            ),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'group-container-results' },
	                children
	            ),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'group-container-actions' },
	                _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'group-container-actions__left' },
	                    canShowMore && _react2.default.createElement(_button2.default, { handleOnClick: showMoreHandler, label: this.i18n('search.show.more') })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { 'data-focus': 'group-container-actions__right' },
	                    _react2.default.createElement(_button2.default, { shape: null, color: 'accent', handleOnClick: function handleOnClick() {
	                            showAllHandler(groupKey);
	                        }, label: this.i18n('search.show.all') })
	                )
	            )
	        );
	    };
	
	    return AdvancedSearchGroup;
	}(_react.Component)) || _class;
	
	AdvancedSearchGroup.propTypes = propTypes;
	AdvancedSearchGroup.defaultProps = defaultProps;
	AdvancedSearchGroup.displayName = 'AdvancedSearchGroup';
	
	exports.default = AdvancedSearchGroup;
	module.exports = exports['default'];

/***/ }),
/* 905 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_905__;

/***/ }),
/* 906 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_906__;

/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var keys = __webpack_require__(155);
	
	// Components
	
	var FacetBox = __webpack_require__(890).component;
	
	var scopeFacetKey = 'FCT_SCOPE';
	
	var Box = {
	    /**
	     * Get the default props
	     * @return {object} the default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            facets: {},
	            selectedFacets: {},
	            facetConfig: {},
	            action: undefined,
	            scopesConfig: undefined
	        };
	    },
	
	    /**
	     * Facet selection handler
	     * @param  {object}  facetComponentData The new facet box state, given by the FacetBox component
	     * @param  {Boolean} isDisableGroup     override the groupinKey ?
	     */
	    _onFacetSelection: function _onFacetSelection(facetComponentData, isDisableGroup) {
	        if (keys(facetComponentData.selectedFacetList).length === 1 && facetComponentData.selectedFacetList[scopeFacetKey]) {
	            this.props.action.updateProperties({
	                scope: this.props.scopesConfig[facetComponentData.selectedFacetList[scopeFacetKey].key],
	                sortBy: undefined,
	                sortAsc: true
	            });
	        } else {
	            delete facetComponentData.selectedFacetList[scopeFacetKey];
	            var newProperties = {
	                selectedFacets: facetComponentData.selectedFacetList
	            };
	            if (isDisableGroup) {
	                newProperties.groupingKey = undefined;
	            }
	            this.props.action.updateProperties(newProperties);
	        }
	    },
	
	    /**
	     * Render the component
	     * @return {HTML} the rendered component
	     */
	    render: function render() {
	        return React.createElement(FacetBox, {
	            'data-focus': 'advanced-search-facet-box',
	            facetList: this.props.facets,
	            selectedFacetList: this.props.selectedFacets,
	            config: this.props.facetConfig,
	            openedFacetList: this.props.openedFacetList,
	            dataSelectionHandler: this._onFacetSelection
	        });
	    }
	};
	
	module.exports = (0, _builder2.default)(Box);

/***/ }),
/* 908 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var _require = __webpack_require__(529),
	    reduce = _require.reduce;
	
	var _require2 = __webpack_require__(341),
	    omit = _require2.omit;
	
	// Components
	
	var ListActionBar = __webpack_require__(882).component;
	
	//Mixins
	
	var i18nMixin = __webpack_require__(293);
	
	var Bar = {
	    mixins: [i18nMixin],
	    /**
	     * Get the default props
	     * @return {object} the default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            action: undefined,
	            groupableColumnList: {},
	            groupingKey: undefined,
	            hasGrouping: true,
	            lineOperationList: undefined,
	            orderableColumnList: {},
	            orderSelected: undefined,
	            selectionAction: undefined,
	            selectionStatus: undefined,
	            selectedFacets: {}
	        };
	    },
	
	    /**
	     * Filter the facet list so that the scope facet is not displayed
	     * @return {object} The filtered facet list
	     */
	    _filterFacetList: function _filterFacetList() {
	        var _this = this;
	
	        var selectedFacets = this.props.selectedFacets;
	
	        return reduce(selectedFacets, function (result, facet, facetKey) {
	            result[facetKey] = {
	                label: _this.i18n('live.filter.facets.' + facetKey),
	                value: facet.data.label
	            };
	            return result;
	        }, {});
	    },
	
	    /**
	     * On facet click, remove it from the selected facets, and update the store
	     * @param  {string} key The facet key to remove
	     */
	    _onFacetClick: function _onFacetClick(key) {
	        var _props = this.props,
	            selectedFacets = _props.selectedFacets,
	            updateProperties = _props.action.updateProperties;
	
	        updateProperties({ selectedFacets: omit(selectedFacets, key) });
	    },
	
	    /**
	     * Update the store to ask for a new results order
	     * @param  {string} key   the filed key to sort by
	     * @param  {boolean} order the sort direciton, ascending or descending
	     */
	    _orderAction: function _orderAction(key, order) {
	        this.props.action.updateProperties({
	            sortBy: key,
	            sortAsc: order
	        });
	    },
	
	    /**
	     * Group by the given key
	     * @param  {string} key The facet key to base the grouping on
	     */
	    _groupAction: function _groupAction(key) {
	        this.props.action.updateProperties({
	            groupingKey: key
	        });
	    },
	
	    /**
	     * Render the component
	     * @return {HTML} the rendered component
	     */
	    render: function render() {
	        var _props2 = this.props,
	            groupableColumnList = _props2.groupableColumnList,
	            groupingKey = _props2.groupingKey,
	            hasGrouping = _props2.hasGrouping,
	            isSelection = _props2.isSelection,
	            operationList = _props2.operationList,
	            orderableColumnList = _props2.orderableColumnList,
	            selectionAction = _props2.selectionAction,
	            selectionStatus = _props2.selectionStatus,
	            sortBy = _props2.sortBy;
	
	        return React.createElement(ListActionBar, {
	            'data-focus': 'advanced-search-action-bar',
	            facetClickAction: this._onFacetClick,
	            facetList: this._filterFacetList(),
	            groupAction: this._groupAction,
	            groupableColumnList: groupableColumnList,
	            groupLabelPrefix: 'live.filter.facets.',
	            groupSelectedKey: groupingKey,
	            hasGrouping: hasGrouping,
	            isSelection: isSelection,
	            operationList: operationList,
	            orderAction: this._orderAction,
	            orderSelected: sortBy,
	            orderableColumnList: orderableColumnList,
	            selectionAction: selectionAction,
	            selectionStatus: selectionStatus
	        });
	    }
	};
	
	module.exports = (0, _builder2.default)(Bar);

/***/ }),
/* 909 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	
	// Components
	
	var ListSummary = __webpack_require__(883).component;
	
	// Mixins
	
	var referenceBehaviour = __webpack_require__(857);
	var storeBehaviour = __webpack_require__(852);
	
	var scopeAll = 'ALL';
	
	var Summary = {
	    /**
	    * Component's mixins
	    * @type {Array}
	    */
	    mixins: [referenceBehaviour, storeBehaviour],
	
	    /**
	    * Reference names to be fetched by the reference behaviour
	    * @type {Array}
	    */
	    referenceNames: ['scopes'],
	
	    /**
	     * Get the default props
	     * @return {object} the default props
	     */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            totalCount: 0,
	            query: '',
	            action: undefined,
	            scope: undefined
	        };
	    },
	
	    /** @inheritdoc */
	    componentDidMount: function componentDidMount() {
	        this._loadReference();
	    },
	
	    /**
	     * Scope click handler
	     * Set the scope to ALL.
	     */
	    _onScopeClick: function _onScopeClick() {
	        this.props.action.updateProperties({
	            scope: scopeAll,
	            selectedFacets: {},
	            groupingKey: undefined
	        });
	    },
	    _getScopeLabel: function _getScopeLabel() {
	        var _this = this;
	
	        if (this.state && this.state.reference.scopes) {
	            var selectedScope = this.state.reference.scopes.find(function (scope) {
	                return scope.code === _this.props.scope;
	            });
	            return selectedScope != null ? selectedScope.label || this.props.scope : this.props.scope;
	        }
	        return this.props.scope;
	    },
	
	    /**
	     * Render the component
	     * @return {HTML} the rendered component
	     */
	    render: function render() {
	        var scope = this.props.scope && this.props.scope !== scopeAll ? {
	            scope: {
	                code: this.props.scope,
	                label: 'Scope',
	                value: this._getScopeLabel()
	            }
	        } : undefined;
	        return React.createElement(ListSummary, {
	            'data-focus': 'advanced-search-list-summary',
	            nb: this.props.totalCount,
	            queryText: this.props.query,
	            scopeList: scope,
	            scopeClickAction: this._onScopeClick
	        });
	    }
	};
	
	module.exports = (0, _builder2.default)(Summary);

/***/ }),
/* 910 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _translation = __webpack_require__(142);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _defaultEmptyComponent = __webpack_require__(911);
	
	var _defaultEmptyComponent2 = _interopRequireDefault(_defaultEmptyComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var assign = __webpack_require__(342);
	var clone = __webpack_require__(149);
	var filter = __webpack_require__(556);
	var find = __webpack_require__(547);
	var keys = __webpack_require__(155);
	var isArray = __webpack_require__(167);
	var map = __webpack_require__(540);
	var mapValues = __webpack_require__(381);
	var omit = __webpack_require__(383);
	
	// Components
	
	var ListSelection = __webpack_require__(848).list.component;
	var GroupWrapper = __webpack_require__(912).component;
	
	/**
	* Results component, used to render the results, grouped or ungrouped
	* @type {Object}
	*/
	var Results = {
	    displayName: 'Results',
	    /**
	    * By default, an empty component is picked.
	    * @return {Object} the default props
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            action: undefined,
	            emptyComponent: _defaultEmptyComponent2.default,
	            groupComponent: undefined,
	            groupingKey: undefined,
	            idField: undefined,
	            initialRowsCount: 3,
	            isSelection: undefined,
	            lineClickHandler: undefined,
	            lineComponentMapper: undefined,
	            lineOperationList: undefined,
	            lineSelectionHandler: undefined,
	            scopesConfig: undefined,
	            scopeFacetKey: 'FCT_SCOPE',
	            scrollParentSelector: undefined,
	            selectionStatus: undefined,
	            renderSingleGroupDecoration: true,
	            resultsMap: undefined,
	            resultsFacets: undefined,
	            selectionResultsMap: undefined,
	            showMoreAdditionalRows: 5,
	            store: undefined,
	            totalCount: undefined
	        };
	    },
	
	    /**
	    * Initial state
	    * @return {Object} Initial state
	    */
	    getInitialState: function getInitialState() {
	        return {
	            loading: false
	        };
	    },
	
	    /**
	    * Component will receive props
	    */
	    componentWillReceiveProps: function componentWillReceiveProps() {
	        if (this.state.loading) {
	            this.setState({
	                loading: false
	            });
	        }
	    },
	
	
	    /**
	    * Render a single group of results, using the group component given as a prop.
	    * @param  {array} list the results list
	    * @param  {string} key  the group key
	    * @param  {int} count  the group's results count
	    * @param  {bool} isUnique  is this the only rendered group
	    * @return {HMTL}      the rendered group
	    */
	    _renderSingleGroup: function _renderSingleGroup(list, key, count, isUnique) {
	        var initialRowsCount = this.props.initialRowsCount;
	
	        if (this.props.renderSingleGroupDecoration && !this.props.groupComponent) {
	            console.warn('You are trying to wrap your list in a group without a groupComponent. Please give one or set "renderSingleGroupDecoration" to false.');
	        }
	
	        if (isUnique) {
	            if (this.props.renderSingleGroupDecoration) {
	                return React.createElement(GroupWrapper, {
	                    count: count,
	                    groupComponent: this.props.groupComponent,
	                    groupKey: key,
	                    initialRowsCount: initialRowsCount,
	                    isUnique: true,
	                    list: list,
	                    ref: 'group-' + key,
	                    renderResultsList: this._renderResultsList,
	                    showAllHandler: this._showAllHandler
	                });
	            } else {
	                return this._renderResultsList(list, key, count, true);
	            }
	        } else {
	            return React.createElement(GroupWrapper, {
	                count: count,
	                groupComponent: this.props.groupComponent,
	                groupKey: key,
	                initialRowsCount: initialRowsCount,
	                key: key,
	                list: list,
	                ref: 'group-' + key,
	                renderResultsList: this._renderResultsList,
	                showAllHandler: this._showAllHandler
	            });
	        }
	    },
	
	    /**
	    * Render the empty component given as a prop when the result map is empty.
	    * @return {HMTL}      the rendered component
	    */
	    _renderEmptyResults: function _renderEmptyResults() {
	        return React.createElement(this.props.emptyComponent, null);
	    },
	
	    /**
	    * Render the results list
	    * @param  {Array}  list     the results list
	    * @param  {string}  key      the group key
	    * @param  {integer}  count    the group count
	    * @param  {Boolean} isUnique true if this is the only group rendered
	    * @return {HTML}          the rendered component
	    */
	    _renderResultsList: function _renderResultsList(list, key, count, isUnique) {
	        var _props = this.props,
	            lineComponentMapper = _props.lineComponentMapper,
	            idField = _props.idField,
	            isSelection = _props.isSelection,
	            lineSelectionHandler = _props.lineSelectionHandler,
	            lineClickHandler = _props.lineClickHandler,
	            lineOperationList = _props.lineOperationList,
	            scrollParentSelector = _props.scrollParentSelector,
	            selectionStatus = _props.selectionStatus,
	            selectionResultsMap = _props.selectionResultsMap,
	            otherProps = _objectWithoutProperties(_props, ['lineComponentMapper', 'idField', 'isSelection', 'lineSelectionHandler', 'lineClickHandler', 'lineOperationList', 'scrollParentSelector', 'selectionStatus', 'selectionResultsMap']);
	
	        var selectionData = selectionResultsMap ? selectionResultsMap[key] || [] : [];
	        var scope = otherProps.store.getScope();
	        var lineKey = scope === undefined || scope === 'ALL' ? key : scope;
	        var LineComponent = lineComponentMapper(lineKey, list);
	        var hasMoreData = isUnique !== undefined && isUnique && list.length < count;
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(ListSelection, _extends({
	                data: list,
	                'data-focus': 'results-list',
	                fetchNextPage: this._onScrollReachedBottom,
	                hasMoreData: hasMoreData,
	                idField: idField,
	                isSelection: isSelection,
	                LineComponent: LineComponent,
	                onLineClick: lineClickHandler,
	                onSelection: lineSelectionHandler,
	                operationList: lineOperationList,
	                parentSelector: scrollParentSelector,
	                ref: 'list-' + key,
	                selectionData: selectionData,
	                selectionStatus: selectionStatus
	            }, otherProps)),
	            this.state.loading && React.createElement(
	                'div',
	                { 'data-focus': 'loading-more-results' },
	                (0, _translation.translate)('search.loadingMore')
	            )
	        );
	    },
	
	
	    /**
	    * Construct the show all action
	    * @param  {string} key the group key where the show all has been clicked
	    */
	    _showAllHandler: function _showAllHandler(key) {
	        var _props2 = this.props,
	            showAllHandler = _props2.showAllHandler,
	            resultsFacets = _props2.resultsFacets,
	            scopeFacetKey = _props2.scopeFacetKey,
	            groupingKey = _props2.groupingKey,
	            scopesConfig = _props2.scopesConfig;
	
	        var selectedScope = key;
	        if (scopesConfig && key && scopesConfig[key]) {
	            selectedScope = scopesConfig[key];
	        }
	        if (resultsFacets[scopeFacetKey]) {
	            this._scopeSelectionHandler(selectedScope);
	        } else {
	            var facetKey = groupingKey;
	            var facetValue = selectedScope;
	            this._facetSelectionHandler(facetKey, facetValue);
	        }
	        // Called if defined (may be used in the quick search to close the popin.)
	        if (showAllHandler) {
	            showAllHandler();
	        }
	    },
	
	    /**
	    * Construct the show more handler
	    * @param  {string} key the group key where the show more has been clicked
	    * @return {function}     the show more handler
	    */
	    _getShowMoreHandler: function _getShowMoreHandler(key) {
	        var _this = this;
	
	        return function () {
	            var groupsRowsCounts = clone(_this.state.groupsRowsCounts);
	            groupsRowsCounts[key] = groupsRowsCounts[key] ? groupsRowsCounts[key] + _this.props.showMoreAdditionalRows : _this.props.initialRowsCount;
	            _this.setState({ groupsRowsCounts: groupsRowsCounts });
	        };
	    },
	
	
	    /**
	    * Scope selection handler
	    * @param  {string} key the scope key
	    */
	    _scopeSelectionHandler: function _scopeSelectionHandler(key) {
	        this.props.action.updateProperties({
	            scope: key
	        });
	    },
	
	    /**
	    * Facet selection handler
	    * @param  {string} key the facet key
	    * @param  {string} value the facet value
	    */
	    _facetSelectionHandler: function _facetSelectionHandler(key, value) {
	        var selectedFacets = assign({}, this.props.store.getSelectedFacets(), _defineProperty({}, key, {
	            key: value,
	            data: {
	                label: value,
	                count: 0
	            }
	        }));
	        this.props.action.updateProperties({
	            groupingKey: undefined,
	            selectedFacets: selectedFacets
	        });
	    },
	
	    /**
	    * Scroll reached bottom handler
	    */
	    _onScrollReachedBottom: function _onScrollReachedBottom() {
	        var _this2 = this;
	
	        if (!this.state.loading) {
	            this.setState({
	                loading: true
	            }, function () {
	                _this2.props.action.search(true);
	            });
	        }
	    },
	
	
	    /**
	    * Get the group counts object
	    * @param  {object} resultsMap the results map
	    * @return {object}           the counts map
	    */
	    _getGroupCounts: function _getGroupCounts(resultsMap) {
	        resultsMap = resultsMap ? resultsMap : this.props.resultsMap;
	        // resultMap can be either an Array or an Object depending of the search being grouped or not.
	        if (resultsMap && isArray(resultsMap) && 1 === resultsMap.length) {
	            //Check if the resultMap contains an entry which is an array.
	            var isResultMapEntryAnArray = isArray(resultsMap[0]);
	            if (isResultMapEntryAnArray) {
	                return _defineProperty({}, resultsMap[0][0], {
	                    count: this.props.totalCount
	                });
	            }
	            //this case occurs when the server response contains only one group with results.
	            return _defineProperty({}, keys(resultsMap[0]), {
	                count: this.props.totalCount
	            });
	        } else if (1 === keys(resultsMap).length) {
	            return _defineProperty({}, keys(resultsMap)[0], {
	                count: this.props.totalCount
	            });
	        }
	
	        // here : grouped list
	        var targetFacetData = void 0;
	        var resultsFacets = this.props.resultsFacets;
	
	        if (resultsFacets) {
	            var _props3 = this.props,
	                scopeFacetKey = _props3.scopeFacetKey,
	                groupingKey = _props3.groupingKey;
	
	            var key = groupingKey === undefined ? scopeFacetKey : groupingKey;
	            var scopeFacet = resultsFacets[key];
	            return mapValues(scopeFacet, function (facetData) {
	                return facetData.count;
	            });
	        }
	        return 0;
	    },
	
	
	    /**
	    * Render the whole component
	    * @return {HMTL}      the rendered component
	    */
	    render: function render() {
	        var _this3 = this;
	
	        // If there is no result, render the given empty component
	        if (0 === this.props.totalCount) {
	            return this._renderEmptyResults();
	        }
	
	        var resultsMap = void 0;
	
	        // resultsMap can be an Array or an Object.
	        if (isArray(this.props.resultsMap)) {
	            resultsMap = filter(this.props.resultsMap, function (resultGroup) {
	                var propertyGroupName = keys(resultGroup)[0]; //group property name
	                var list = resultGroup[propertyGroupName];
	                return 0 !== list.length;
	            });
	        } else {
	            resultsMap = omit(this.props.resultsMap, function (resultGroup) {
	                var propertyGroupName = keys(resultGroup)[0]; //group property name
	                var list = resultGroup[propertyGroupName];
	                return 0 === list.length;
	            });
	        }
	
	        // Get the count for each group
	        var groupCounts = this._getGroupCounts(resultsMap);
	        // Check if there is only one group left
	
	        if (isArray(resultsMap) && 1 === resultsMap.length) {
	            var key = keys(resultsMap[0])[0];
	            var list = resultsMap[0][key];
	            var count = groupCounts[key].count;
	            return this._renderSingleGroup(list, key, count, true);
	        } else if (1 === keys(resultsMap).length) {
	            var _key = keys(resultsMap)[0];
	            var _list = resultsMap[_key];
	            var _count = groupCounts[_key].count;
	            return this._renderSingleGroup(_list, _key, _count, true);
	        } else {
	            return React.createElement(
	                'div',
	                { 'data-focus': 'search-results' },
	                map(resultsMap, function (resultGroup) {
	                    var key = keys(resultGroup)[0]; //group property name
	                    var list = resultGroup[key];
	                    var count = groupCounts[key];
	                    return _this3._renderSingleGroup(list, key, count);
	                })
	            );
	        }
	    }
	};
	
	module.exports = (0, _builder2.default)(Results);

/***/ }),
/* 911 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _translation = __webpack_require__(142);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function DefaultEmpty() {
	    return _react2.default.createElement(
	        'div',
	        { 'data-focus': 'empty-result' },
	        (0, _translation.translate)('search.empty')
	    );
	} // Dependencies
	
	
	module.exports = DefaultEmpty;

/***/ }),
/* 912 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Dependencies
	var React = __webpack_require__(146);
	
	var clone = __webpack_require__(149);
	
	var GroupWrapper = {
	    getDefaultProps: function getDefaultProps() {
	        return {
	            groupComponent: undefined,
	            groupKey: undefined,
	            count: undefined,
	            isUnique: false,
	            showAllHandler: undefined,
	            list: undefined,
	            renderResultsList: undefined
	        };
	    },
	    getInitialState: function getInitialState() {
	        return {
	            resultsDisplayedCount: this.props.initialRowsCount || 3
	        };
	    },
	    _showMoreHandler: function _showMoreHandler() {
	        this.setState({
	            resultsDisplayedCount: this.state.resultsDisplayedCount + 3 <= this.props.list.length ? this.state.resultsDisplayedCount + 3 : this.props.list.length
	        });
	    },
	    render: function render() {
	        var list = this.props.isUnique ? this.props.list : this.props.list.slice(0, this.state.resultsDisplayedCount);
	        return React.createElement(
	            this.props.groupComponent,
	            { canShowMore: this.props.list.length > this.state.resultsDisplayedCount, count: this.props.count, isUnique: this.props.isUnique, groupKey: this.props.groupKey, list: list, showAllHandler: this.props.showAllHandler, showMoreHandler: this._showMoreHandler },
	            this.props.renderResultsList(list, this.props.groupKey, this.props.count, this.props.isUnique)
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(GroupWrapper);

/***/ }),
/* 913 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _group = __webpack_require__(914);
	
	var _group2 = _interopRequireDefault(_group);
	
	var _actionBuilder = __webpack_require__(906);
	
	var _actionBuilder2 = _interopRequireDefault(_actionBuilder);
	
	var _builtInStore = __webpack_require__(905);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Dependencies
	
	
	// Components
	var DefaultSearchBar = __webpack_require__(893).component;
	var Results = __webpack_require__(910).component;
	
	
	// Mixins
	var referenceBehaviour = __webpack_require__(857);
	var storeBehaviour = __webpack_require__(852);
	
	// Actions
	
	
	// Stores
	
	
	/**
	* General search mixin.
	* Contains a search bar, and a results list.
	* @type {Object}
	*/
	var QuickSearchComponent = {
	    /**
	    * Component's mixins
	    * @type {Array}
	    */
	    mixins: [referenceBehaviour, storeBehaviour],
	    /**
	    * Tag name.
	    */
	    displayName: 'QuickSearch',
	    /**
	    * Reference names to be fetched by the reference behaviour
	    * @type {Array}
	    */
	    referenceNames: ['scopes'],
	    /**
	    * Get the default props
	    * @return {object} the default props
	    */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            action: undefined,
	            groupComponent: _group2.default,
	            groupMaxRows: undefined,
	            lineComponentMapper: undefined,
	            lineOperationList: undefined,
	            onLineClick: undefined,
	            scopesConfig: {},
	            scopeFacetKey: 'FCT_SCOPE',
	            scopeSelectionHandler: this._scopeSelectionHandler,
	            scrollParentSelector: undefined,
	            SearchBar: DefaultSearchBar,
	            service: undefined,
	            store: _builtInStore.quickSearchStore
	        };
	    },
	
	    /**
	    * Prop validation
	    * @type {Object}
	    */
	    propTypes: {
	        action: _react.PropTypes.object,
	        groupComponent: _react.PropTypes.func,
	        groupMaxRows: _react.PropTypes.number,
	        lineComponentMapper: _react.PropTypes.func,
	        onLineClick: _react.PropTypes.func,
	        scopesConfig: _react.PropTypes.object,
	        scopeFacetKey: _react.PropTypes.string,
	        scopeSelectionHandler: _react.PropTypes.func,
	        service: _react.PropTypes.object,
	        store: _react.PropTypes.object,
	        showAllHandler: _react.PropTypes.func
	    },
	    /**
	    * Register the store listeners
	    */
	    componentWillMount: function componentWillMount() {
	        var _props = this.props,
	            action = _props.action,
	            service = _props.service,
	            store = _props.store;
	
	        this._action = action || (0, _actionBuilder2.default)({
	            service: service,
	            identifier: store.identifier,
	            getSearchOptions: function getSearchOptions() {
	                return store.getValue.call(store);
	            } // Binding the store in the function call
	        });
	        this._loadReference();
	
	        store.on('quick-search-criterias:change', this._triggerSearch);
	        // store.addQueryChangeListener(this._triggerSearch);
	        // store.addScopeChangeListener(this._triggerSearch);
	        store.addResultsChangeListener(this._onResultsChange);
	    },
	
	    /**
	    * Unregister the store listeners
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        var store = this.props.store;
	
	        store.removeListener('quick-search-criterias:change', this._triggerSearch);
	        // store.removeQueryChangeListener(this._triggerSearch);
	        // store.removeScopeChangeListener(this._triggerSearch);
	        store.removeResultsChangeListener(this._onResultsChange);
	    },
	
	    /**
	    * Trigger search
	    */
	    _triggerSearch: function _triggerSearch() {
	        this._action.search();
	    },
	
	    /**
	    * Results change handler
	    */
	    _onResultsChange: function _onResultsChange() {
	        var store = this.props.store;
	
	        var resultsMap = store.getResults();
	        var facets = store.getFacets();
	        var totalCount = store.getTotalCount();
	        this.setState({ resultsMap: resultsMap, facets: facets, totalCount: totalCount });
	    },
	
	    /**
	    * Action on line click.
	    * @param {object} item  the item clicked
	    */
	    _lineClickHandler: function _lineClickHandler(item) {
	        if (this.props.onLineClick) {
	            this.props.onLineClick(item);
	        }
	    },
	
	    /**
	    * redner the SearchBar
	    * @returns {HTML} the rendered component
	    */
	    _renderSearchBar: function _renderSearchBar() {
	        var _props2 = this.props,
	            placeholder = _props2.placeholder,
	            SearchBar = _props2.SearchBar,
	            store = _props2.store;
	        var _state = this.state,
	            isLoading = _state.isLoading,
	            scopes = _state.reference.scopes;
	
	        return _react2.default.createElement(SearchBar, {
	            action: this._action,
	            'data-focus': 'search-bar',
	            loading: isLoading,
	            placeholder: placeholder,
	            ref: 'searchBar',
	            scopes: scopes,
	            store: store
	        });
	    },
	
	    /**
	    * redner the results
	    * @returns {HTML} the rendered component
	    */
	    _renderResults: function _renderResults() {
	        // Adding 'action' in this.props destructuring here prevent the fact that '...otherProps' consider the props 'action' in otherProps.
	        // It didn't give 'this._action' to the 'action' props without doing it
	        var _props3 = this.props,
	            action = _props3.action,
	            groupComponent = _props3.groupComponent,
	            groupMaxRows = _props3.groupMaxRows,
	            lineComponentMapper = _props3.lineComponentMapper,
	            lineOperationList = _props3.lineOperationList,
	            scrollParentSelector = _props3.scrollParentSelector,
	            scopeFacetKey = _props3.scopeFacetKey,
	            store = _props3.store,
	            scopesConfig = _props3.scopesConfig,
	            otherProps = _objectWithoutProperties(_props3, ['action', 'groupComponent', 'groupMaxRows', 'lineComponentMapper', 'lineOperationList', 'scrollParentSelector', 'scopeFacetKey', 'store', 'scopesConfig']);
	
	        var _state2 = this.state,
	            facets = _state2.facets,
	            resultsMap = _state2.resultsMap,
	            totalCount = _state2.totalCount;
	
	        return _react2.default.createElement(Results, _extends({
	            action: this._action,
	            groupComponent: groupComponent,
	            groupingKey: scopeFacetKey,
	            initialRowsCount: groupMaxRows,
	            isSelection: false,
	            lineClickHandler: this._lineClickHandler,
	            lineComponentMapper: lineComponentMapper,
	            lineOperationList: lineOperationList,
	            resultsFacets: facets,
	            resultsMap: resultsMap,
	            scopesConfig: scopesConfig,
	            scrollParentSelector: scrollParentSelector,
	            store: store,
	            totalCount: totalCount
	        }, otherProps));
	    },
	
	    /**
	    * Render the component
	    * @return {HTML} the rendered component
	    */
	    render: function render() {
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'quick-search' },
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'quick-search-bar' },
	                this._renderSearchBar()
	            ),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'quick-search-results' },
	                this._renderResults()
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(QuickSearchComponent);

/***/ }),
/* 914 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _class; // libraires
	
	
	var _react = __webpack_require__(146);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _translation = __webpack_require__(224);
	
	var _translation2 = _interopRequireDefault(_translation);
	
	var _number = __webpack_require__(884);
	
	var _number2 = _interopRequireDefault(_number);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	//web components
	
	var propTypes = {
	    count: _react.PropTypes.number.isRequired,
	    groupKey: _react.PropTypes.string.isRequired
	};
	
	var defaultProps = {
	    count: 0
	};
	
	var QuickSearchGroup = (0, _translation2.default)(_class = function (_Component) {
	    _inherits(QuickSearchGroup, _Component);
	
	    function QuickSearchGroup() {
	        _classCallCheck(this, QuickSearchGroup);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    QuickSearchGroup.prototype.render = function render() {
	        var _props = this.props,
	            children = _props.children,
	            count = _props.count,
	            groupKey = _props.groupKey,
	            showAllHandler = _props.showAllHandler;
	
	        return _react2.default.createElement(
	            'div',
	            { 'data-focus': 'group-container' },
	            _react2.default.createElement(
	                'h3',
	                null,
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    groupKey
	                ),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    _number2.default.format(count)
	                )
	            ),
	            _react2.default.createElement(
	                'p',
	                null,
	                this.i18n('search.mostRelevant')
	            ),
	            _react2.default.createElement(
	                'div',
	                { 'data-focus': 'group-container-results' },
	                children
	            )
	        );
	    };
	
	    return QuickSearchGroup;
	}(_react.Component)) || _class;
	
	QuickSearchGroup.propTypes = propTypes;
	QuickSearchGroup.defaultProps = defaultProps;
	QuickSearchGroup.displayName = 'QuickSearchGroup';
	
	exports.default = QuickSearchGroup;
	module.exports = exports['default'];

/***/ }),
/* 915 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    actionWrapper: __webpack_require__(894),
	    cartridge: __webpack_require__(916),
	    summary: __webpack_require__(918),
	    mixin: __webpack_require__(917)
	};

/***/ }),
/* 916 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _translation = __webpack_require__(142);
	
	var React = __webpack_require__(146);
	var searchHeaderMixin = __webpack_require__(917);
	module.exports = React.createClass({
	  displayName: 'exports',
	
	  mixins: [searchHeaderMixin],
	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: 'cartridge-search', 'data-focus': 'cartridge-search' },
	      React.createElement(
	        'h1',
	        null,
	        (0, _translation.translate)('search.cartridge.title')
	      ),
	      this._SearchBarComponent()
	    );
	  }
	});

/***/ }),
/* 917 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _actionBuilder = __webpack_require__(906);
	
	var _actionBuilder2 = _interopRequireDefault(_actionBuilder);
	
	var _builtInStore = __webpack_require__(905);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var referenceBehaviour = __webpack_require__(857);
	var storeBehaviour = __webpack_require__(852);
	
	// Components
	var SearchBar = __webpack_require__(893).component;
	
	// Actions
	
	
	// Store
	
	
	module.exports = {
	    mixins: [referenceBehaviour, storeBehaviour],
	    referenceNames: ['scopes'],
	    getDefaultProps: function getDefaultProps() {
	        return {
	            service: undefined,
	            store: _builtInStore.advancedSearchStore,
	            onSearchCriteriaChange: undefined,
	            onSearchCriteriaChangeByUser: undefined
	        };
	    },
	    getInitialState: function getInitialState() {
	        return {
	            isLoading: false
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        var _this = this;
	
	        this._loadReference();
	        this._action = this.props.action || (0, _actionBuilder2.default)({
	            service: this.props.service,
	            identifier: this.props.store.identifier,
	            getSearchOptions: function getSearchOptions() {
	                return _this.props.store.getValue.call(_this.props.store);
	            } // Binding the store in the function call
	        });
	        this.props.store.addQueryChangeListener(this._onSearchCriteriaChange);
	        this.props.store.addScopeChangeListener(this._onSearchCriteriaChange);
	    },
	    componentWillUnmount: function componentWillUnmount() {
	        this.props.store.removeQueryChangeListener(this._onSearchCriteriaChange);
	        this.props.store.removeScopeChangeListener(this._onSearchCriteriaChange);
	    },
	    _onSearchCriteriaChange: function _onSearchCriteriaChange() {
	        var onSearchCriteriaChange = this.props.onSearchCriteriaChange;
	
	        if (onSearchCriteriaChange) {
	            onSearchCriteriaChange();
	        }
	    },
	    _SearchBarComponent: function _SearchBarComponent() {
	        var _props = this.props,
	            helpTranslationPath = _props.helpTranslationPath,
	            minChar = _props.minChar,
	            onSearchCriteriaChangeByUser = _props.onSearchCriteriaChangeByUser,
	            placeholder = _props.placeholder,
	            store = _props.store;
	        var _state = this.state,
	            isLoading = _state.isLoading,
	            scopes = _state.reference.scopes;
	
	        return React.createElement(SearchBar, {
	            action: this._action,
	            helpTranslationPath: helpTranslationPath,
	            loading: isLoading,
	            minChar: minChar,
	            placeholder: placeholder,
	            ref: 'searchBar',
	            scopes: scopes,
	            store: store,
	            onSearchCriteriaChangeByUser: onSearchCriteriaChangeByUser });
	    }
	};

/***/ }),
/* 918 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Components
	var React = __webpack_require__(146);
	var searchHeaderMixin = __webpack_require__(917);
	
	module.exports = React.createClass({
	    displayName: 'exports',
	
	    mixins: [searchHeaderMixin],
	    render: function render() {
	        return this._SearchBarComponent();
	    }
	});

/***/ }),
/* 919 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    component: __webpack_require__(920)
	};

/***/ }),
/* 920 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    defaultEmptyComponent: __webpack_require__(911),
	    groupWrapper: __webpack_require__(912),
	    results: __webpack_require__(910)
	};

/***/ }),
/* 921 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    cartridgeBehaviour: __webpack_require__(900)
	};

/***/ }),
/* 922 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _actionBuilder = __webpack_require__(923);
	
	var _actionBuilder2 = _interopRequireDefault(_actionBuilder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//The purpose of this module is to deal with autonomous lists.
	//If you need lists inside a form please see the listFor helper function in a form.
	//The following lists can
	//- be loaded from a criteria (or without) (the criteria can be the result of a form)
	//- be paginated
	//- be displayed in any list container.
	var React = __webpack_require__(146);
	
	var _require = __webpack_require__(297),
	    camelCase = _require.camelCase,
	    capitalize = _require.capitalize;
	
	var type = _types2.default;
	var assign = __webpack_require__(519);
	
	var STORE_NODE = ['criteria', 'groupingKey', 'sortBy', 'sortAsc', 'dataList', 'totalCount'];
	var DEFAULT_LIST_COMPONENT = __webpack_require__(845).component;
	/**
	 * Cretes a name for the property listener.
	 * @param  {string} node - Node name.
	 * @return {string} the built property.
	 */
	function _listenerProp(node) {
	    return 'add' + capitalize(camelCase(node)) + 'ChangeListener';
	}
	function _unListenerProp(node) {
	    return 'remove' + capitalize(camelCase(node)) + 'ChangeListener';
	}
	/**
	 * Mixin to deal the list page.
	 * @type {Object}
	 */
	var listPageMixin = {
	    getDefaultProps: function getDefaultProps() {
	        return {
	            ListComponent: DEFAULT_LIST_COMPONENT,
	            pickProps: function pickProps(props) {
	                return props;
	            }
	        };
	    },
	    getInitialState: function getInitialState() {
	        return {};
	    },
	
	    /** @inheritdoc */
	    propTypes: {
	        //Store object.
	        pickProps: type('func'),
	        service: type('func'),
	        store: type('object').isRequired
	    },
	    /**
	     *  Build the action from.
	     */
	    _buildAction: function _buildAction() {
	        var _this = this;
	
	        this._action = this.props.action || (0, _actionBuilder2.default)({
	            service: this.props.service,
	            identifier: this.props.store.identifier,
	            getListOptions: function getListOptions() {
	                return _this.props.store.getValue.call(_this.props.store);
	            } // Binding the store in the function call
	        });
	    },
	
	    /**
	     * Read the state from the store.
	     * @return {object} - The object read from the store.
	     */
	    _getStateFromStore: function _getStateFromStore() {
	        var store = this.props.store;
	        return store.getValue();
	    },
	
	    /**
	     * Hanlde the list store change.
	     */
	    _handleStoreChanged: function _handleStoreChanged() {
	        this.setState(this._getStateFromStore());
	    },
	
	    /**
	     * Register the store nodes.
	     */
	    _reload: function _reload() {
	        this._action.load();
	    },
	    _registerStoreNode: function _registerStoreNode() {
	        var _this2 = this;
	
	        STORE_NODE.forEach(function (node) {
	            //Maybe this is a bit too much, a global change event could be more efficient as almost all store props change.
	            _this2.props.store[_listenerProp(node)](_this2._handleStoreChanged);
	        });
	        //When the criteria is changed, the search is triggered.
	        this.props.store.addCriteriaChangeListener(this._reload);
	    },
	    _unRegisterStoreNode: function _unRegisterStoreNode() {
	        var _this3 = this;
	
	        STORE_NODE.forEach(function (node) {
	            //Maybe this is a bit too much, a global change event could be more efficient as almost all store props change.
	            _this3.props.store[_unListenerProp(node)](_this3._handleStoreChanged);
	        });
	        //When the criteria is changed, the search is triggered.
	        this.props.store.removeCriteriaChangeListener(this._reload);
	    },
	
	    /**
	     * build the list props.
	     * @return {object} - the list property.
	     */
	    _buildListProps: function _buildListProps() {
	        var props = this.props,
	            state = this.state;
	        var dataList = state.dataList,
	            totalCount = state.totalCount;
	
	        dataList = dataList || [];
	        return assign({}, props, state, {
	            data: dataList,
	            fetchNextPage: this._action.load,
	            hasMoreData: dataList.length < totalCount
	        });
	    },
	
	    /** @inheritdoc */
	    componentWillMount: function componentWillMount() {
	        this._registerStoreNode();
	        this._buildAction();
	        this._action.load();
	    },
	    componentWillUnmount: function componentWillUnmount() {
	        this._unRegisterStoreNode();
	    },
	
	    /** @inheritdoc */
	    render: function render() {
	        var listProps = this._buildListProps();
	        return React.createElement(this.props.ListComponent, _extends({}, listProps, { ref: 'list' }));
	    }
	};
	
	module.exports = (0, _builder2.default)(listPageMixin);

/***/ }),
/* 923 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_923__;

/***/ }),
/* 924 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var i18nBehaviour = __webpack_require__(293);
	
	
	var messageMixin = {
	    /** @inheritedDoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            type: 'info',
	            style: {}
	        };
	    },
	
	
	    /** @inheritedDoc */
	    propTypes: {
	        content: (0, _types2.default)('string'),
	        style: (0, _types2.default)('object'),
	        title: (0, _types2.default)('string'),
	        ttl: (0, _types2.default)('number'),
	        type: (0, _types2.default)('string')
	    },
	
	    /** @inheritedDoc */
	    componentDidMount: function componentDidMount() {
	        var _this = this;
	
	        if (this.props.ttl) {
	            setTimeout(function () {
	                _this._handleTimeToLeave();
	            }, this.props.ttl);
	        }
	    },
	
	
	    /** @inheritedDoc */
	    mixins: [i18nBehaviour],
	
	    /**
	    * Time to leave handler.
	    */
	    _handleTimeToLeave: function _handleTimeToLeave() {
	        var _props = this.props,
	            handleTimeToLeave = _props.handleTimeToLeave,
	            id = _props.id;
	
	        if (handleTimeToLeave) {
	            handleTimeToLeave(id);
	        }
	    },
	
	
	    /**
	    * Handle click on the dismiss button.
	    * @param {Event} event - Sanitize event.
	    */
	    _handleOnClick: function _handleOnClick(event) {
	        var _props2 = this.props,
	            handleOnClick = _props2.handleOnClick,
	            id = _props2.id;
	
	        if (handleOnClick) {
	            handleOnClick(id);
	        }
	    },
	
	
	    /**
	    * Render an alert.
	    * @return {JSX} The jsx.
	    */
	    render: function render() {
	        var _props3 = this.props,
	            type = _props3.type,
	            id = _props3.id,
	            content = _props3.content,
	            title = _props3.title;
	
	        return React.createElement(
	            'div',
	            { 'data-focus': 'message', 'data-id': id, 'data-message-type': type },
	            React.createElement(_button2.default, { handleOnClick: this._handleOnClick, icon: 'clear', shape: 'icon', type: 'button' }),
	            title && React.createElement(
	                'h4',
	                null,
	                title
	            ),
	            React.createElement(
	                'p',
	                null,
	                this.i18n(content)
	            )
	        );
	    }
	};
	module.exports = (0, _builder2.default)(messageMixin);

/***/ }),
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    header: __webpack_require__(926),
	    bar: __webpack_require__(928),
	    cartridge: __webpack_require__(929),
	    menu: __webpack_require__(930),
	    popin: __webpack_require__(294),
	    confirmationPopin: __webpack_require__(218),
	    messageCenter: __webpack_require__(932),
	    errorCenter: __webpack_require__(516),
	    contentBar: __webpack_require__(933),
	    contentActions: __webpack_require__(934),
	    layout: __webpack_require__(935),
	    loadingBar: __webpack_require__(517)
	};

/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	var ReactDOM = __webpack_require__(147);
	
	var _require = __webpack_require__(529),
	    pluck = _require.pluck,
	    sortBy = _require.sortBy;
	
	var applicationStateBehaviour = __webpack_require__(927);
	var headerMixin = {
	    mixins: [applicationStateBehaviour],
	    /** @inheriteddoc */
	    getDefaultProps: function getMenuDefaultProps() {
	        return {
	            /**
	            * Selector for the domNode on which the scroll is attached.
	            * @type {string}
	            */
	            scrollTargetSelector: undefined,
	            /**
	            * Default style of the component.s
	            * @type {Object}
	            */
	            style: {},
	            /**
	            * Default size of the bar. Should be present in sizeMap.
	            * @type {String}
	            */
	            size: 'medium',
	            /**
	            * Map which defines sizes exists for the components and their border.
	            * @type {Object}
	            */
	            sizeMap: {
	                'small': {
	                    'sizeBorder': 5
	                },
	                'medium': {
	                    'sizeBorder': 0
	                }
	            },
	            /**
	            * A way to redefine the process size of the element.
	            * @type {function}
	            */
	            processSize: undefined,
	            /**
	            * A handler to notify other elements that the size has changed.
	            * @type {[type]}
	            */
	            notifySizeChange: undefined
	        };
	    },
	    /** @inheritdoc */
	    propTypes: {
	        size: (0, _types2.default)('string'),
	        scrollTargetSelector: (0, _types2.default)('string'),
	        style: (0, _types2.default)('object'),
	        sizeMap: (0, _types2.default)('object'),
	        notifySizeChange: (0, _types2.default)(['func', 'object']),
	        processSize: (0, _types2.default)(['func', 'object'])
	    },
	    /** @inheritdoc */
	    getInitialState: function getMenuDefaultState() {
	        /** @inheriteddoc */
	        return {
	            open: this.props.open,
	            size: this.props.size
	        };
	    },
	
	    /** @inheriteddoc */
	    componentWillMount: function barWillMount() {
	        this._processSizes();
	        this.scrollTargetNode = this.props.scrollTargetSelector && this.props.scrollTargetSelector !== '' ? document.querySelector(this.props.scrollTargetSelector) : window;
	    },
	    /** @inheriteddoc */
	    componentDidMount: function barDidMount() {
	        this.attachScrollListener();
	    },
	    /** @inheriteddoc */
	    componentWillUnmount: function barWillUnMount() {
	        this.detachScrollListener();
	        this.appStateWillUnmount();
	    },
	    /**
	    * Process the sizeMap in order to sort them by border size and create a sizes array.
	    */
	    _processSizes: function processSizes() {
	        var sizes = [];
	        for (var sz in this.props.sizeMap) {
	            sizes.push({ name: sz, sizeBorder: this.props.sizeMap[sz].sizeBorder });
	        }
	        this.sizes = pluck(sortBy(sizes, 'sizeBorder'), 'name');
	    },
	    /**
	    * Get the current element size.
	    * @returns {int} - The size in pixel of the current element in the browser.
	    */
	    _processElementSize: function processElementSize() {
	        return ReactDOM.findDOMNode(this).offsetHeight;
	    },
	    /**
	    * Get the scroll position from the top of the screen.
	    * @returns {int} - The position in pixel from the top of the scroll container.
	    */
	    _getScrollPosition: function getScrollPosition() {
	        //The pageYOffset is done in order to deal with the window case. Another possibility would have been to use window.docment.body as a node for scrollTop.
	        //But the scrollListener on the page is only on the window element.
	        return this.scrollTargetNode.pageYOffset !== undefined ? this.scrollTargetNode.pageYOffset : this.scrollTargetNode.scrollTop;
	    },
	    /**
	    * Notify other elements that the size has changed.
	    */
	    _notifySizeChange: function notifySizeChanged() {
	        if (this.props.notifySizeChange) {
	            this.props.notifySizeChange(this.state.size);
	        }
	    },
	    /**
	    * Change the size of the bar.
	    * @param {string} newSize - The new size.
	    * @returns {undefined} -  A way to stop the propagation.
	    */
	    _changeSize: function changeSize(newSize) {
	        // Todo: see if the notification of the changed size can be called before.
	        return this.setState({ size: newSize }, this._notifySizeChange);
	    },
	    /**
	    * Process the size in order to know if the size should be changed depending on the scroll position and the border of each zone.
	    * @returns {object} - The return is used to stop the treatement.
	    */
	    _processSize: function _processSize() {
	        //Allow the user to redefine the process size function.
	        if (this.props.processSize) {
	            return this.props.processSize();
	        }
	        var currentIndex = this.sizes.indexOf(this.state.size);
	        var currentScrollPosition = this._getScrollPosition();
	        //Process increase treatement.
	        if (currentIndex < this.sizes.length - 1) {
	            var increaseBorder = this.props.sizeMap[this.sizes[currentIndex + 1]].sizeBorder;
	            if (currentScrollPosition > increaseBorder) {
	                return this._changeSize(this.sizes[currentIndex + 1]);
	            }
	        }
	        //Process decrease treatement.
	        if (currentIndex > 0) {
	            var decreaseBorder = this.props.sizeMap[this.sizes[currentIndex - 1]].sizeBorder;
	            if (currentScrollPosition <= decreaseBorder) {
	                return this._changeSize(this.sizes[currentIndex - 1]);
	            }
	        }
	    },
	    /**
	    * Handle the scroll event in order to resize the page.
	    * @param {object} event [description]
	    */
	    handleScroll: function handleScrollEvent(event) {
	        this._processSize();
	    },
	
	    /**
	    * Attach scroll listener on the scroll target node.
	    */
	    attachScrollListener: function attachScrollListener() {
	        this.scrollTargetNode.addEventListener('scroll', this.handleScroll);
	        this.scrollTargetNode.addEventListener('resize', this.handleScroll);
	    },
	
	    /**
	    * Detach scroll handler on the scroll target node.
	    */
	    detachScrollListener: function detachScrollListener() {
	        this.scrollTargetNode.removeEventListener('scroll', this.handleScroll);
	        this.scrollTargetNode.removeEventListener('resize', this.handleScroll);
	    },
	    /** @inheriteddoc */
	    render: function renderBar() {
	        var className = 'header-' + this.state.size;
	        return React.createElement(
	            'header',
	            { className: className, 'data-focus': 'header', 'data-route': this.state.route, 'data-mode': this.state.mode, 'data-size': this.state.size },
	            this.props.children
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(headerMixin);

/***/ }),
/* 927 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var applicationStateMixin = {
	    /** @inheriteddoc */
	    getInitialState: function getCartridgeInitialState() {
	        return this._getStateFromStore();
	    },
	    /** @inheriteddoc */
	    componentWillMount: function cartridgeWillMount() {
	        _builtInStore2.default.addModeChangeListener(this._handleChangeApplicationStatus);
	        _builtInStore2.default.addRouteChangeListener(this._handleChangeApplicationStatus);
	    },
	    /** @inheriteddoc */
	    appStateWillUnMount: function cartridgeWillUnMount() {
	        _builtInStore2.default.removeModeChangeListener(this._handleChangeApplicationStatus);
	        _builtInStore2.default.removeRouteChangeListener(this._handleChangeApplicationStatus);
	    },
	    _handleChangeApplicationStatus: function _handleChangeApplicationStatus() {
	        this.setState(this._getStateFromStore());
	    },
	
	    _getStateFromStore: function getCartridgeStateFromStore() {
	        var processMode = _builtInStore2.default.getMode();
	        var mode = 'consult';
	        if (processMode && processMode.edit && processMode.edit > 0) {
	            mode = 'edit';
	        }
	        return { mode: mode, route: _builtInStore2.default.getRoute() };
	    }
	};
	
	module.exports = applicationStateMixin;

/***/ }),
/* 928 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	
	var barMixin = {
	    /**
	    * Get initial state
	    * @return {object} Initial state
	    */
	    getInitialState: function getInitialState() {
	        return this._getStateFromStore();
	    },
	
	    /**
	    * Component will mount
	    */
	    componentWillMount: function componentWillMount() {
	        _builtInStore2.default.addSummaryComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.addBarContentLeftComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.addBarContentRightComponentChangeListener(this._handleComponentChange);
	    },
	
	    /**
	    * Component will unmount.
	    */
	    componentWillUnmount: function componentWillUnmount() {
	        _builtInStore2.default.removeSummaryComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.removeBarContentLeftComponentChangeListener(this._handleComponentChange);
	        _builtInStore2.default.removeBarContentRightComponentChangeListener(this._handleComponentChange);
	    },
	
	    /**
	    * Get state from store
	    * @return {object} state from store
	    */
	    _getStateFromStore: function _getStateFromStore() {
	        return {
	            summaryComponent: _builtInStore2.default.getSummaryComponent(),
	            barContentLeftComponent: _builtInStore2.default.getBarContentLeftComponent(),
	            barContentRightComponent: _builtInStore2.default.getBarContentRightComponent()
	        };
	    },
	
	    /**
	    * Component change handler.
	    */
	    _handleComponentChange: function _handleComponentChange() {
	        this.setState(this._getStateFromStore());
	    },
	
	    /**
	    * Render the component
	    * @return {HTML} Rendered component
	    */
	    render: function render() {
	        var _state = this.state,
	            barContentLeftComponent = _state.barContentLeftComponent,
	            barContentRightComponent = _state.barContentRightComponent,
	            summaryComponent = _state.summaryComponent;
	
	        return React.createElement(
	            'div',
	            { 'data-focus': 'bar' },
	            React.createElement(
	                'div',
	                { 'data-focus': 'bar-content-left' },
	                barContentLeftComponent && React.createElement(barContentLeftComponent.component, barContentLeftComponent.props)
	            ),
	            React.createElement(
	                'div',
	                { 'data-focus': 'bar-content-right' },
	                barContentRightComponent && React.createElement(barContentRightComponent.component, barContentRightComponent.props)
	            ),
	            React.createElement(
	                'div',
	                { 'data-focus': 'bar-content-middle' },
	                summaryComponent && React.createElement(summaryComponent.component, summaryComponent.props)
	            )
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(barMixin);

/***/ }),
/* 929 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	
	var cartridgeMixin = {
	    /** @inheriteddoc */
	    getInitialState: function getInitialState() {
	        return this._getStateFromStore();
	    },
	
	    /** @inheriteddoc */
	    componentWillMount: function componentWillMount() {
	        _builtInStore2.default.addCartridgeComponentChangeListener(this._handleComponentChange);
	    },
	
	    /** @inheriteddoc */
	    componentWillUnmount: function componentWillUnmount() {
	        _builtInStore2.default.removeCartridgeComponentChangeListener(this._handleComponentChange);
	    },
	
	    /**
	     * Read the component state from the connected stores.
	     * @return {object} - The new state.
	     */
	    _getStateFromStore: function _getStateFromStore() {
	        return { cartridgeComponent: _builtInStore2.default.getCartridgeComponent() || { component: 'div', props: {} } };
	    },
	
	    /**
	     * Handle the component change cb.
	     */
	    _handleComponentChange: function _handleComponentChange() {
	        this.setState(this._getStateFromStore());
	    },
	
	    /** @inheriteddoc */
	    render: function render() {
	        var cartridgeComponent = this.state.cartridgeComponent;
	        var Component = cartridgeComponent.component,
	            props = cartridgeComponent.props;
	
	        return React.createElement(
	            'div',
	            { 'data-focus': 'cartridge' },
	            React.createElement(Component, props)
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(cartridgeMixin);

/***/ }),
/* 930 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Dependencies
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _history = __webpack_require__(143);
	
	var _history2 = _interopRequireDefault(_history);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Mixins
	
	var popinProperties = __webpack_require__(931).mixin;
	var stylabe = __webpack_require__(816);
	
	// Components
	
	var Menu = {
	    mixins: [stylabe, popinProperties], /** @inheritedProps*/
	    /** @inheritedProps*/
	    getDefaultProps: function getDefaultProps() {
	        return {
	            items: []
	        };
	    },
	
	    /** @inheritedProps*/
	    propTypes: {
	        code: (0, _types2.default)('array')
	    },
	    /**
	    * Toggle the state of the menu.
	    */
	    toggle: function toggle() {
	        this.setState({ open: !this.state.open });
	    },
	
	    /**
	    * Render the links of the menu
	    */
	    _renderMenuItems: function _renderMenuItems() {
	        var _this = this,
	            _arguments = arguments;
	
	        return this.props.items.map(function (link, idx) {
	            var clickHandler = void 0;
	            if (link.route !== undefined) {
	                clickHandler = function clickHandler() {
	                    if (link.onClick) link.onClick.call(_this, _arguments);
	                    _history2.default.navigate(link.route, true);
	                };
	            } else {
	                clickHandler = link.onClick;
	            }
	            var buttonProps = _extends({
	                option: 'link',
	                shape: 'icon',
	                type: 'button'
	            }, link);
	            return React.createElement(
	                'li',
	                { key: idx, onClick: clickHandler },
	                React.createElement(_button2.default, buttonProps),
	                React.createElement(
	                    'span',
	                    null,
	                    link.name
	                )
	            );
	        });
	    },
	
	    /** @inheriteddoc */
	    render: function render() {
	        var _props = this.props,
	            direction = _props.direction,
	            position = _props.position,
	            children = _props.children;
	
	        var className = 'menu menu-' + direction + ' menu-' + position + ' menu-' + (this.state.open ? 'open' : '') + ' ' + this._getStyleClassName();
	        return React.createElement(
	            'nav',
	            { className: className, 'data-focus': 'menu' },
	            React.createElement('div', { 'data-focus': 'menu-brand' }),
	            React.createElement(
	                'ul',
	                { 'data-focus': 'menu-items' },
	                this._renderMenuItems()
	            ),
	            children
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(Menu);

/***/ }),
/* 931 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Mixin used in order to create a popin or a menu.
	 * @type {Object} - popin behavour mixin
	 */
	var PopinProperties = {
	    /** @inheritdoc */
	    getDefaultProps: function getMenuDefaultProps() {
	        return {
	            direction: 'vertical', //horizontal
	            position: 'left', // top, bottom, right, left
	            open: false
	        };
	    },
	    /** @inheritdoc */
	    propTypes: {
	        open: (0, _types2.default)('bool')
	    },
	    /** @inheritdoc */
	    getInitialState: function getDefaultState() {
	        return {
	            open: this.props.open
	        };
	    }
	};
	
	module.exports = { mixin: PopinProperties };

/***/ }),
/* 932 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _types = __webpack_require__(220);
	
	var _types2 = _interopRequireDefault(_types);
	
	var _builtInStore = __webpack_require__(526);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var Message = __webpack_require__(924).component;
	var assign = __webpack_require__(519);
	var capitalize = __webpack_require__(304);
	var messageCenterMixin = {
	    getDefaultProps: function getCartridgeDefaultProps() {
	        return {
	            ttlInfo: 10000,
	            ttlSuccess: 5000,
	            style: {}
	        };
	    },
	    /** @inheriteddoc */
	    getInitialState: function getCartridgeInitialState() {
	        return this._getStateFromStore();
	    },
	    /** @inheriteddoc */
	    componentWillMount: function cartridgeWillMount() {
	        _builtInStore2.default.addPushedMessageListener(this._handlePushMessage);
	        _builtInStore2.default.addClearMessagesListener(this._handleClearMessage);
	    },
	    /** @inheriteddoc */
	    componentWillUnmount: function cartridgeWillUnMount() {
	        _builtInStore2.default.removePushedMessageListener(this._handlePushMessage);
	        _builtInStore2.default.removeClearMessagesListener(this._handleClearMessage);
	    },
	    _getStateFromStore: function getCartridgeStateFromStore() {
	        return { messages: _builtInStore2.default.getMessages() || {} };
	    },
	    _handlePushMessage: function _handlePushMessage(messageId) {
	        var messages = this.state.messages;
	        messages[messageId] = _builtInStore2.default.getMessage(messageId);
	        this.setState({ messages: messages });
	    },
	    _handleClearMessage: function _handleClearMessage() {
	        this.setState({ messages: {} });
	    },
	    _handleRemoveMessage: function _handleRemoveMessage(messageId) {
	        var msgs = this.state.messages;
	        delete msgs[messageId];
	        this.setState({ messages: msgs });
	    },
	    renderMessages: function renderMessages() {
	        var msgs = [];
	        for (var msgKey in this.state.messages) {
	            var msg = this.state.messages[msgKey];
	            var ttlConf = {};
	            var messageProps = assign(this.state.messages[msgKey], { handleOnClick: this._handleRemoveMessage, key: msgKey });
	            if (msg.type === 'info' || msg.type === 'success') {
	                assign(messageProps, { ttl: this.props['ttl' + capitalize(msg.type)], handleTimeToLeave: this._handleRemoveMessage });
	            }
	            msgs.push(React.createElement(Message, messageProps));
	        }
	        return msgs;
	    },
	    /** @inheriteddoc */
	    render: function renderMessageCenter() {
	        var className = 'message-center ' + this.props.style.className;
	        return React.createElement(
	            'div',
	            { className: className, 'data-focus': 'message-center' },
	            this.renderMessages()
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(messageCenterMixin);

/***/ }),
/* 933 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(146);
	
	var headerMixin = {
	    /** @inheriteddoc */
	    render: function render() {
	        return React.createElement(
	            'div',
	            { 'data-focus': 'content-bar' },
	            this.props.children
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(headerMixin);

/***/ }),
/* 934 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	var _builtInStore = __webpack_require__(404);
	
	var _builtInStore2 = _interopRequireDefault(_builtInStore);
	
	var _button = __webpack_require__(221);
	
	var _button2 = _interopRequireDefault(_button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Mixins
	
	// Dependencies
	
	var stylableBehaviour = __webpack_require__(816);
	
	// Components
	
	// Stores
	
	var Dropdown = __webpack_require__(844).component;
	
	var ContentActions = {
	    mixins: [stylableBehaviour],
	    /** @inheriteddoc */
	    getInitialState: function getInitialState() {
	        return this._getStateFromStore();
	    },
	
	    /** @inheriteddoc */
	    componentWillMount: function componentWillMount() {
	        _builtInStore2.default.addActionsChangeListener(this._handleComponentChange);
	    },
	
	    /** @inheriteddoc */
	    componentWillUnmount: function componentWillUnmount() {
	        _builtInStore2.default.removeActionsChangeListener(this._handleComponentChange);
	    },
	
	    /**
	     * Get state from store
	     * @return {Object} actions extracted from the store
	     */
	    _getStateFromStore: function _getStateFromStore() {
	        return {
	            actions: _builtInStore2.default.getActions() || { primary: [], secondary: [] } };
	    },
	
	    /**
	     * Component change handler
	     */
	    _handleComponentChange: function _handleComponentChange() {
	        this.setState(this._getStateFromStore());
	    },
	
	    /** @inheriteddoc */
	    render: function render() {
	        var actions = this.state.actions;
	
	        return React.createElement(
	            'div',
	            { className: this._getStyleClassName(), 'data-focus': 'content-actions' },
	            actions.primary.map(function (primary) {
	                if (Array.isArray(primary.action)) {
	                    return React.createElement(Dropdown, { iconProps: { name: primary.icon }, operationList: primary.action, shape: 'fab' });
	                } else {
	                    return React.createElement(_button2.default, { handleOnClick: primary.action, icon: primary.icon, label: primary.label, shape: 'fab', style: { className: primary.className }, type: 'button' });
	                }
	            }),
	            React.createElement(Dropdown, { iconProps: { name: 'more_vert' }, operationList: actions.secondary, shape: 'fab' })
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(ContentActions);

/***/ }),
/* 935 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _builder = __webpack_require__(219);
	
	var _builder2 = _interopRequireDefault(_builder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Components
	
	var AppHeaderDefault = __webpack_require__(936); // Dependencies
	
	var LoadingBarDefault = __webpack_require__(517).component;
	var MessageCenterDefault = __webpack_require__(932).component;
	var ErrorCenterDefault = __webpack_require__(516).component;
	
	// Mixins
	
	var stylableBehaviour = __webpack_require__(816);
	
	var contentActionsMixin = {
	    mixins: [stylableBehaviour],
	    /** inheriteddoc */
	    getDefaultProps: function getDefaultProps() {
	        return {
	            AppHeader: AppHeaderDefault,
	            LoadingBar: LoadingBarDefault,
	            MessageCenter: MessageCenterDefault,
	            ErrorCenter: ErrorCenterDefault,
	            displayDevBar: true,
	            footerText: 'Please override the footer text by giving a "footerText" property to the Layout component.'
	        };
	    },
	
	    /** inheriteddoc */
	    render: function render() {
	        var _props = this.props,
	            LoadingBar = _props.LoadingBar,
	            MessageCenter = _props.MessageCenter,
	            ErrorCenter = _props.ErrorCenter,
	            AppHeader = _props.AppHeader,
	            MenuLeft = _props.MenuLeft,
	            footerText = _props.footerText,
	            displayDevBar = _props.displayDevBar,
	            children = _props.children;
	
	        return React.createElement(
	            'div',
	            { className: this._getStyleClassName(), 'data-focus': 'layout' },
	            React.createElement(LoadingBar, { displayDevBar: displayDevBar }),
	            React.createElement(MessageCenter, null),
	            React.createElement(ErrorCenter, null),
	            React.createElement(AppHeader, null),
	            React.createElement(
	                'div',
	                { 'data-focus': 'menu' },
	                MenuLeft && React.createElement(MenuLeft, null)
	            ),
	            React.createElement('div', { 'data-focus': 'page-content' }),
	            React.createElement(
	                'footer',
	                { 'data-focus': 'footer' },
	                footerText
	            ),
	            children
	        );
	    }
	};
	
	module.exports = (0, _builder2.default)(contentActionsMixin);

/***/ }),
/* 936 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	//Needed components
	var React = __webpack_require__(146);
	var Component = React.Component;
	
	var Header = __webpack_require__(926).component;
	var Cartridge = __webpack_require__(929).component;
	var ContentBar = __webpack_require__(933).component;
	var Bar = __webpack_require__(928).component;
	var ContentActions = __webpack_require__(934).component;
	/**
	 * Application header
	 */
	
	var AppHeader = function (_Component) {
	    _inherits(AppHeader, _Component);
	
	    function AppHeader() {
	        _classCallCheck(this, AppHeader);
	
	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }
	
	    AppHeader.prototype.render = function render() {
	        return React.createElement(
	            Header,
	            null,
	            React.createElement(
	                ContentBar,
	                null,
	                React.createElement(Bar, null),
	                React.createElement(Cartridge, null)
	            ),
	            React.createElement(ContentActions, null)
	        );
	    };
	
	    return AppHeader;
	}(Component);
	// static props
	
	
	AppHeader.displayName = 'AppHeader';
	
	module.exports = AppHeader;

/***/ }),
/* 937 */
/***/ (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(__webpack_module_template_argument_0__);
	
	var invariant = __webpack_require__(622);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(618)))

/***/ }),
/* 938 */
/***/ (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';
	
	module.exports = {
	    line: __webpack_require__(__webpack_module_template_argument_0__),
	    list: __webpack_require__(__webpack_module_template_argument_1__)
	};

/***/ })
/******/ ])))
});
;
//# sourceMappingURL=focus-components.js.map